<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LVS+Keepalived+MySQL主主复制实现MySQL高可用</title>
      <link href="posts/c05f2321/"/>
      <url>posts/c05f2321/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="LVS-Keepalived-MySQL主主复制实现MySQL高可用"><a href="#LVS-Keepalived-MySQL主主复制实现MySQL高可用" class="headerlink" title="LVS+Keepalived+MySQL主主复制实现MySQL高可用"></a>LVS+Keepalived+MySQL主主复制实现MySQL高可用</h2><h3 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h4><ul><li>LVS是Linux Virtual Server的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统， 是中国国内最早出现的自由软件项目之一。目前LVS已经被集成到Linux内核模块中 </li><li>LVS是Linux virtual server的缩写，为linux虚拟服务器，是一个虚拟的服务器集群系统。 LVS简单工作原理为用户请求LVS VIP，LVS根据转发方式和算法，将请求转发给后端服务器， 后端服务器接收到请求，返回给用户。对于用户来说，看不到Web后端具体的应用</li></ul><h4 id="LVS能做什么"><a href="#LVS能做什么" class="headerlink" title="LVS能做什么?"></a><strong>LVS能做什么?</strong></h4><p>LVS主要用于多服务器的负载均衡 </p><ul><li>LVS工作在网络层，可以实现高性能，高可用的服务器集群技术 </li><li> LVS廉价，可把许多低性能的服务器组合在一起形成一个超级服务器 </li><li>LVS易用，配置非常简单，且有多种负载均衡的方法 </li><li>稳定可靠，即使在集群的服务器中某台服务器无法正常工作，也不影响整体效果 </li><li>可扩展性也非常好</li></ul><h4 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a><strong>核心组件</strong></h4><p><strong>LVS的管理工具和内核模块 ipvsadm/ipvs</strong></p><ul><li><p>ipvsadm：用于空间的命令行工具, 用于管理集群服务及集群服务上的RS等 </p></li><li><p>ipvs：工作于内核上的程序, 可根据用户定义的集群实现请求转发 </p></li></ul><p><strong>专业术语</strong></p><ul><li>VS：Virtual Server，虚拟服务 </li><li>Director：负载均衡器，lvs调度器 </li><li>Balancer：分发器，lvs调度器 </li><li>RS：Real Server，后端请求处理服务器，web服务 </li><li>CIP：client ip，客户单ip </li><li>VIP：Director Virtural IP，负载均衡虚拟IP，lvs调度器上 </li><li> DIP：Director IP 负载均衡器ip </li><li>RIP：Real Server IP，后端请求处理服务器IP</li></ul><h4 id="LVS模式"><a href="#LVS模式" class="headerlink" title="LVS模式"></a><strong>LVS模式</strong></h4><ol><li><p><strong>NAT</strong></p><blockquote><p>NAT（Network Address Translation）即网络地址转换，其作用是通过数据报头的修改，使得位于企业内部的私有IP地址可以访问外网，以及外部用用户可以访问位于公司内部的私有IP主机。VS/NAT工作模式拓扑结构如图2所示，LVS负载调度器可以使用两块网卡配置不同的IP地址，eth0设置为私钥IP与内部网络通过交换设备相互连接，eth1设备为外网IP与外部网络联通。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/lvs1.png"></p></li><li><p><strong>TUN</strong></p><blockquote><p>在LVS（NAT）模式的集群环境中，由于所有的数据请求及响应的数据包都需要经过LVS调度器转发，如果后端服务器的数量大于10台，则调度器就会成为整个集群环境的瓶颈。我们知道，数据请求包往往远小于响应数据包的大小。因为响应数据包中包含有客户需要的具体数据，所以LVS（TUN）的思路就是将请求与响应数据分离，让调度器仅处理数据请求，而让真实服务器响应数据包直接返回给客户端。VS/TUN工作模式拓扑结构如图3所示。其中，IP隧道（IP tunning）是一种数据包封装技术，它可以将原始数据包封装并添加新的包头（内容包括新的源地址及端口、目标地址及端口），从而实现将一个目标为调度器的VIP地址的数据包封装，通过隧道转发给后端的真实服务器（Real Server），通过将客户端发往调度器的原始数据包封装，并在其基础上添加新的数据包头（修改目标地址为调度器选择出来的真实服务器的IP地址及对应端口），LVS（TUN）模式要求真实服务器可以直接与外部网络连接，真实服务器在收到请求数据包后直接给客户端主机响应数据。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/lvs2.png"></p></li><li><p><strong>DR（常用）</strong></p><blockquote><p> 在LVS（TUN）模式下，由于需要在LVS调度器与真实服务器之间创建隧道连接，这同样会增加服务器的负担。与LVS（TUN）类似，DR模式也叫直接路由模式，其体系结构如图4所示，该模式中LVS依然仅承担数据的入站请求以及根据算法选出合理的真实服务器，最终由后端真实服务器负责将响应数据包发送返回给客户端。与隧道模式不同的是，直接路由模式（DR模式）要求调度器与后端服务器必须在同一个局域网内，VIP地址需要在调度器与后端所有的服务器间共享，因为最终的真实服务器给客户端回应数据包时需要设置源IP为VIP地址，目标IP为客户端IP，这样客户端访问的是调度器的VIP地址，回应的源地址也依然是该VIP地址（真实服务器上的VIP），客户端是感觉不到后端服务器存在的。由于多台计算机都设置了同样一个VIP地址，所以在直接路由模式中要求调度器的VIP地址是对外可见的，客户端需要将请求数据包发送到调度器主机，而所有的真实服务器的VIP地址必须配置在Non-ARP的网络设备上，也就是该网络设备并不会向外广播自己的MAC及对应的IP地址，真实服务器的VIP对外界是不可见的，但真实服务器却可以接受目标地址VIP的网络请求，并在回应数据包时将源地址设置为该VIP地址。调度器根据算法在选出真实服务器后，在不修改数据报文的情况下，将数据帧的MAC地址修改为选出的真实服务器的MAC地址，通过交换机将该数据帧发给真实服务器。整个过程中，真实服务器的VIP不需要对外界可见。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/lvs3.png"></p></li></ol><h4 id="LVS负载均衡调度算法"><a href="#LVS负载均衡调度算法" class="headerlink" title="LVS负载均衡调度算法"></a><strong>LVS负载均衡调度算法</strong></h4><p>根据前面的介绍，我们了解了LVS的三种工作模式，但不管实际环境中采用的是哪种模式，调度算法进行调度的策略与算法都是LVS的核心技术，LVS在内核中主要实现了一下十种调度算法。</p><ol><li><p><strong>轮询调度</strong></p><blockquote><p>轮询调度（Round Robin 简称’RR’）算法就是按依次循环的方式将请求调度到不同的服务器上，该算法最大的特点就是实现简单。轮询算法假设所有的服务器处理请求的能力都一样的，调度器会将所有的请求平均分配给每个真实服务器。</p></blockquote></li><li><p><strong>加权轮询调度</strong></p><blockquote><p>加权轮询（Weight Round Robin 简称’WRR’）算法主要是对轮询算法的一种优化与补充，LVS会考虑每台服务器的性能，并给每台服务器添加一个权值，如果服务器A的权值为1，服务器B的权值为2，则调度器调度到服务器B的请求会是服务器A的两倍。权值越高的服务器，处理的请求越多。</p></blockquote></li><li><p><strong>最小连接调度</strong></p><blockquote><p>最小连接调度（Least Connections 简称’LC’）算法是把新的连接请求分配到当前连接数最小的服务器。最小连接调度是一种动态的调度算法，它通过服务器当前活跃的连接数来估计服务器的情况。调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1；当连接中断或者超时，其连接数减1。</p></blockquote><p>（集群系统的真实服务器具有相近的系统性能，采用最小连接调度算法可以比较好地均衡负载。)</p></li><li><p><strong>加权最小连接调度</strong></p><blockquote><p>加权最少连接（Weight Least Connections 简称’WLC’）算法是最小连接调度的超集，各个服务器相应的权值表示其处理性能。服务器的缺省权值为1，系统管理员可以动态地设置服务器的权值。加权最小连接调度在调度新连接时尽可能使服务器的已建立连接数和其权值成比例。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。</p></blockquote></li><li><p><strong>基于局部的最少连接</strong></p><blockquote><p>基于局部的最少连接调度（Locality-Based Least Connections 简称’LBLC’）算法是针对请求报文的目标IP地址的 负载均衡调度，目前主要用于Cache集群系统，因为在Cache集群客户请求报文的目标IP地址是变化的。这里假设任何后端服务器都可以处理任一请求，算法的设计目标是在服务器的负载基本平衡情况下，将相同目标IP地址的请求调度到同一台服务器，来提高各台服务器的访问局部性和Cache命中率，从而提升整个集群系统的处理能力。LBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则使用’最少连接’的原则选出一个可用的服务器，将请求发送到服务器。</p></blockquote></li><li><p><strong>带复制的基于局部性的最少连接</strong></p><blockquote><p>带复制的基于局部性的最少连接（Locality-Based Least Connections with Replication  简称’LBLCR’）算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统，它与LBLC算法不同之处是它要维护从一个目标IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射。按’最小连接’原则从该服务器组中选出一一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按’最小连接’原则从整个集群中选出一台服务器，将该服务器加入到这个服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p></blockquote></li><li><p><strong>目标地址散列调度</strong></p><blockquote><p>目标地址散列调度（Destination Hashing 简称’DH’）算法先根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。</p></blockquote></li><li><p><strong>源地址散列调度U</strong></p><blockquote><p>源地址散列调度（Source Hashing  简称’SH’）算法先根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。它采用的散列函数与目标地址散列调度算法的相同，它的算法流程与目标地址散列调度算法的基本相似。</p></blockquote></li><li><p><strong>最短的期望的延迟</strong></p><blockquote><p>最短的期望的延迟调度（Shortest Expected Delay 简称’SED’）算法基于WLC算法。举个例子吧，ABC三台服务器的权重分别为1、2、3 。那么如果使用WLC算法的话一个新请求进入时它可能会分给ABC中的任意一个。使用SED算法后会进行一个运算</p><p>A：（1+1）/1=2   B：（1+2）/2=3/2   C：（1+3）/3=4/3   就把请求交给得出运算结果最小的服务器。</p></blockquote></li><li><p><strong>最少队列调度</strong></p><blockquote><p>最少队列调度（Never Queue 简称’NQ’）算法，无需队列。如果有realserver的连接数等于0就直接分配过去，不需要在进行SED运算。</p></blockquote></li></ol><h3 id="KeepAlived"><a href="#KeepAlived" class="headerlink" title="KeepAlived"></a>KeepAlived</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a><strong>概述</strong></h4><p>keepalived起初就是为LVS设计的，专门用来监控集群系统中各个服务节点的状态，它根据 TCP/IP参考模型的第三、四和第五层交换机制检测每个服务节点的状态，每个服务节点异常 或者工作障碍，keepalvied将立刻检测到，并把障碍节点剔除，是毫秒级的，当后台节点恢 复正常以后，keepalived有自动将服务节点重新添加在服务器集群中</p><p>keepalvied后来增加vrrp功能，vrrp（虚拟路由器冗余协议），出现的目的就是解决静态路 由单点故障的问题，通过vrrp可以实现网络不间断稳定运行</p><h4 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a><strong>运行原理</strong></h4><p>keepalived 通过选举（服务器设置的权重）挑选出一台热备服务器做 MASTER 机器，MASTER 机器会被分 配到一个指定的虚拟 ip，即VIP, 外部程序可通过该 VIP 访问这台服务器，如果这台服务器出现故障（断网， 重启，或者本机器上的 keepalived crash 等），keepalived 会从其他的备份机器上重选（还是看服务器设 置的权重）一台机器做 MASTER 并分配同样的虚拟 IP，充当前一台 MASTER 的角色。权重越高，备用机器 被拉起来的占比就越大，一般的主备就可以满足需求 </p><p><strong>选举策略</strong></p><p>选举策略是根据VRRP协议，完全按照权重大小，权重最大的是 MASTER 机器，下面几种情况会触发选举</p><blockquote><ul><li>keepalived 启动的时候 ,master 服务器出现故障（断网，重启，或者本机器上的 keepalived crash 等，而本机器上其他应用程序 crash 不 算） </li><li>keepalived 启动的时候 ,有新的备份服务器加入且权重最大</li></ul></blockquote><h4 id="keepalived的脑裂"><a href="#keepalived的脑裂" class="headerlink" title="keepalived的脑裂"></a><strong>keepalived的脑裂</strong></h4><p><strong>什么是脑裂?</strong></p><blockquote><p>在高可用系统中，作为主备节点的两台服务器，可能因为一些比如说网络断开，两台机器的心跳 检测会认为主挂了，但是主其实是正常的，只是网络断开了，心跳检测没法检查到主还活着，由 于主从之间失去了联系，都以为是对方发生了故障，所以两个节点都会主动的抢占资源，争抢应 用服务，争抢VIP，这样就发发生一些严重的后果，或者资源被瓜分了、或者是两边的节点都启动 不起来了、或者是都起来了，但是同时读写共享存储，导致数据损坏</p></blockquote><p><strong>脑裂产生的原因</strong></p><blockquote><ul><li>高可用服务器对之间心跳线链路发生故障，导致无法正常通信 l 因心跳线断开（包括网线断裂、水晶头松动等物理原因）因网卡及相关驱动坏了，ip配置及冲突问题（网卡直连） l 因心跳线间连接的设备故障（网卡及交换机）</li><li>因仲裁的机器出问题（采用仲裁的方案） l 高可用服务器上开启了 iptables防火墙阻挡了心跳消息传输</li><li>高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败</li><li>其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等</li></ul></blockquote><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a><strong>环境</strong></h4><ul><li>centos7.5</li><li>mysql8.0</li></ul><table><thead><tr><th>节点编号</th><th>IP地址</th><th>节点类型</th></tr></thead><tbody><tr><td>1</td><td>172.16.220.10</td><td>Keepalived Master</td></tr><tr><td>2</td><td>172.16.220.20</td><td>Keepalived Slave</td></tr><tr><td>3</td><td>172.16.220.30</td><td>Mysql Server1</td></tr><tr><td>4</td><td>172.16.220.40</td><td>Mysql Server1</td></tr><tr><td>/</td><td>172.16.220.100</td><td>虚拟IP（VIP）</td></tr></tbody></table><h4 id="搭建Mysql双主复制"><a href="#搭建Mysql双主复制" class="headerlink" title="搭建Mysql双主复制"></a><strong>搭建Mysql双主复制</strong></h4><p><a href="https://sunnyws.com/2021/03/11/Mysql%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6/">https://sunnyws.com/2021/03/11/Mysql%E5%8F%8C%E4%B8%BB%E5%A4%8D%E5%88%B6/</a></p><h4 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a><strong>安装keepalived</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yum 安装</span></span><br><span class="line">yum install -y keepalived</span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">keepalived -v</span><br><span class="line"><span class="meta">#</span><span class="bash">安装ipvsadm</span>  </span><br><span class="line">yum  install -y  ipvsadm</span><br></pre></td></tr></table></figure><p><strong>修改keepalived配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><p>修改<strong>172.16.220.10</strong>配置为以下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"> global_defs &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> notification_email &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    518@msn.cn                                  <span class="comment"># 发生故障时发送的邮箱  这里没有smtp服务 暂时注释掉</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   notification_email_from linuxzen@linuxzen.com             <span class="comment"># 使用哪个邮箱发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   smtp_server linuxzen.com                                  <span class="comment"># 发件服务器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   smtp_connect_timeout 30</span></span><br><span class="line">  router_id LVS_DEVEL</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER             # 标示为主lvs</span><br><span class="line">    interface ens33          # HA检测端口,根据实际网卡名称，也可能是eth1,或ens33</span><br><span class="line">    virtual_router_id 51     # 主备的virtual_router_id 必须相同</span><br><span class="line">    priority 100             # 优先级,备lvs要比主lvs稍小</span><br><span class="line">    advert_int 1             # VRRP Multicast 广播周期秒数</span><br><span class="line">    authentication &#123;         # 定义认证</span><br><span class="line">        auth_type PASS       # 认证方式为口令认证</span><br><span class="line">        auth_pass 123456     # 定义口令</span><br><span class="line">   &#125;</span><br><span class="line">    virtual_ipaddress &#123;      # 定义vip</span><br><span class="line">       172.16.220.100        # 多个vip可换行添加</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">virtual_server 172.16.220.100 3306 &#123;</span><br><span class="line">    delay_loop 6                # 每隔6秒查看realserver状态</span><br><span class="line">    lb_algo rr                  # 调度算法为轮询</span><br><span class="line">    lb_kind DR                  # lvs工作模式为DR(直接路由)模式</span><br><span class="line">    persistence_timeout 0</span><br><span class="line">    protocol TCP                # 用TCP监测realserver的状态</span><br><span class="line"></span><br><span class="line">    real_server 172.16.220.30 3306 &#123;    # 定义realserver</span><br><span class="line">        weight 1                        # 定义权重</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3           # 三秒无响应超时</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.16.220.40 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<strong>172.16.220.20</strong>配置为以下内容</p><ul><li>1.将state MASTER 改为state BACKUP</li><li>2.降低priority 100 的值，如priority 90，优先级高的当选为master，低的当选为BACKUP</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"> global_defs &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> notification_email &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    518@msn.cn                                  <span class="comment"># 发生故障时发送的邮箱  这里没有smtp服务 暂时注释掉</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   notification_email_from linuxzen@linuxzen.com             <span class="comment"># 使用哪个邮箱发送</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   smtp_server linuxzen.com                                  <span class="comment"># 发件服务器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   smtp_connect_timeout 30</span></span><br><span class="line">  router_id LVS_DEVEL</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP             # 标示为备lvs</span><br><span class="line">    interface ens33          # HA检测端口,根据实际网卡名称，也可能是eth1,或ens33</span><br><span class="line">    virtual_router_id 51     # 主备的virtual_router_id 必须相同</span><br><span class="line">    priority 80             # 优先级,备lvs要比主lvs稍小</span><br><span class="line">    advert_int 1             # VRRP Multicast 广播周期秒数</span><br><span class="line">    authentication &#123;         # 定义认证</span><br><span class="line">        auth_type PASS       # 认证方式为口令认证</span><br><span class="line">        auth_pass 123456     # 定义口令</span><br><span class="line">   &#125;</span><br><span class="line">    virtual_ipaddress &#123;      # 定义vip</span><br><span class="line">       172.16.220.100        # 多个vip可换行添加</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">virtual_server 172.16.220.100 3306 &#123;</span><br><span class="line">    delay_loop 6                # 每隔6秒查看realserver状态</span><br><span class="line">    lb_algo rr                  # 调度算法为轮询</span><br><span class="line">    lb_kind DR                  # lvs工作模式为DR(直接路由)模式</span><br><span class="line">    persistence_timeout 0</span><br><span class="line">    protocol TCP                # 用TCP监测realserver的状态</span><br><span class="line"></span><br><span class="line">    real_server 172.16.220.30 3306 &#123;    # 定义realserver</span><br><span class="line">        weight 1                        # 定义权重</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3           # 三秒无响应超时</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 172.16.220.40 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重启<code>keepalived</code></strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启keepalived</span></span><br><span class="line">systemctl restart  keepalived</span><br><span class="line"><span class="meta">#</span><span class="bash">查看keepalived状态</span></span><br><span class="line">systemctl status  keepalived</span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启</span></span><br><span class="line">systemctl  enable keepalived</span><br></pre></td></tr></table></figure><h4 id="配置RS服务端"><a href="#配置RS服务端" class="headerlink" title="配置RS服务端"></a><strong>配置<code>RS服务端</code></strong></h4><p>这里主要是DR模式</p><p><strong>在<code>RS</code>上（这里是<code>172.16.220.30</code>和<code>172.16.220.40</code>）修改配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行下面命令</span></span><br><span class="line">ifconfig lo:0 172.16.220.100 netmask 255.255.255.255 broadcast 172.16.220.100</span><br><span class="line">/sbin/route add -host 172.16.220.100 dev lo:0</span><br><span class="line"> echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"> echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"> echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"> echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"> sysctl -p </span><br></pre></td></tr></table></figure><p><strong>设置开机执行</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  /etc/rc.local </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加配置</span></span><br><span class="line">ifconfig lo:0 172.16.220.100 netmask 255.255.255.255 broadcast 172.16.220.100</span><br><span class="line">/sbin/route add -host 172.16.220.100 dev lo:0</span><br><span class="line"> echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"> echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"> echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"> echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"> sysctl -p </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">赋予执行权限</span></span><br><span class="line">chmod a+x /etc/rc.local </span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h4><p><strong>1.多个vip, 为什么dns会把请求打到LVS上, 而没有打到RS上呢？</strong></p><blockquote><ul><li><p>理解LVS的DR模式, 要解决这个问题, 就需要了解ARP请求, 需要在LVS, RS1, RS2上都需要绑定多个VIP, 但是需要在RS1和RS2上需要额外的做一些工作, 禁止ARP请求</p><blockquote><p>echo “1” &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore </p><p>echo “2” &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</p><p>echo “1” &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</p><p>echo “2” &gt; /proc/sys/net/ipv4/conf/all/arp_announce</p></blockquote></li></ul></blockquote><blockquote><ul><li>LVS服务器是正常的情况下, 当DNS在请求的时候会解析出来VIP的地址, 但并不知道, 具体的mac 地址是哪一个, LVS服务器会通过ARP请求, 告知别人自己的mac地址, 别人就缓存下来了, 反之, RS 是禁止ARP请求的, 不相应其他机器的请求， 别人就不知道他的mac地址, 即使他有VIP地址, 所以 DNS只会把请求转发到LVS上, 而不能转发到RS上。</li></ul></blockquote><p><strong>2.既然RS禁止了ARP请求, 那LVS如何把请求转发给RS呢?</strong></p><blockquote><ul><li><p>是通过修改mac地址, 进行转发 的, 这个是DR模式的核心。</p></li><li><p>LVS又是如何知道RS的mac地址呢？</p><p>arp_ignore:定义对目标地址为本地IP的ARP询问不同的应答模式 </p><blockquote><p>0 (默认值): 回应任何网络接口上对任何本地IP地址的arp查询请求 </p><p>1 只回答目标IP地址是来访网络接口本地地址的ARP查询请求 </p><p>2 只回答目标IP地址是来访网络接口本地地址的ARP查询请求,且来访IP必须在该网络接口的子网段内</p><p>3 不回应该网络界面的arp请求，而只对设置的唯一和连接地址做出回应</p><p>4-7 保留未使用 • 8 不回应所有（本地地址）的arp查询</p></blockquote></li></ul></blockquote><p><strong>3.RS是如何做到, 直接返回给客户端的呢?</strong></p><blockquote><ul><li><p>通常情况下，接收的请求, 应该都是哪里来, 哪里回, 那RS是如何做到直接返回个客户端的呢? </p></li><li><p>arp_announce这个内核参数, 其实就是让RS可直接返回给客户端，arp_announce:对网络接口上，本 地IP地址的发出的，ARP回应，作出相应级别的限制: 确定不同程度的限制,宣布对来自本地源IP地址发 出Arp请求的接口</p><blockquote><p>0 - (默认) 在任意网络接口上的任何本地地址 </p><p>1 -尽量避免不在该网络接口子网段的本地地址做出arp回应. 当发起ARP请求的源IP地址是被设置应该经由路由 达到此网络接口的时候很有用.此时会检查来访IP是否为所有接口上的子网段内ip之一.如果改来访IP不属于各个 网络接口上的子网段内,那将采用级别2的方式来进行处理.</p><p>2 - 对查询目标使用最适当的本地地址.在此模式下将忽略这个IP数据包的源地址并尝试选择与能与该地址通信 的本地地址.首要是选择所有的网络接口的子网中外出访问子网中包含该目标IP地址的本地地址. 如果没有合适 的地址被发现,将选择当前的发送网络接口或其他的有可能接受到该ARP回应的网络接口来进行发送</p></blockquote></li></ul></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h4><p><strong>1.测试连接是否轮询</strong></p><p>本地通过<code>VIP(172.16.220.100)</code>创建多个连接  连接服务器数据库<strong>（测试轮询时，最好将 persistence_timeout 设为0）</strong>   </p><p>在Keepalived Master(172.16.220.10)查看ActiveConn变化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用的轮询算法   创建3个数据库连接  查看</span></span><br><span class="line">[root@10 ~]# ipvsadm</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  10:mysql rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.220.30:mysql          Route   1      2          0</span>         </span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.220.40:mysql          Route   1      1          0</span>      </span><br></pre></td></tr></table></figure><p><strong>2.Keepalived 是否可以master和backup自动切换</strong></p><ul><li>使用ip addr show 命令查看servera或者serverb时，如果发现172.16.220.200的ip 附加在ens33的网卡上面，说明该机器就是master</li><li>master和backup切换，当master关机或者关闭keepalived服务的时，172.16.220.200这个IP地址将会漂移到backup机器，并接管服务</li><li>master重启keepalived后，会再次接管VIP</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 172.16.220.10  机器</span></span><br><span class="line">[root@10 ~]# ip addr show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:74:13:ae brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.220.10/24 brd 172.16.220.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.220.100/32 scope global ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::cf07:9c93:1f0a:2324/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash"> 172.16.220.20  机器</span></span><br><span class="line">[root@20 ~]# ip addr show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:27:a8:47 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.220.20/24 brd 172.16.220.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::cf07:9c93:1f0a:2324/64 scope link tentative noprefixroute dadfailed </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::9aa0:13fd:7859:598b/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">172.16.220.10 停止keepalived</span></span><br><span class="line">[root@10 ~]# systemctl stop keepalived</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 172.16.220.10  机器</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:74:13:ae brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.220.10/24 brd 172.16.220.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::cf07:9c93:1f0a:2324/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta">#</span><span class="bash"> 172.16.220.20  机器</span> </span><br><span class="line">[root@20 ~]# ip addr show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:27:a8:47 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.220.20/24 brd 172.16.220.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet 172.16.220.100/32 scope global ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::cf07:9c93:1f0a:2324/64 scope link tentative noprefixroute dadfailed </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::9aa0:13fd:7859:598b/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p><strong>3.停止一个RS服务，是否剔除障碍节点</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">停止172.16.220.30 节点 mysql 服务</span></span><br><span class="line">[root@30 ~]# systemctl stop mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.10  查看</span> </span><br><span class="line">[root@10 ~]# ipvsadm</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  10:mysql rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.220.40:mysql          Route   1      0          0</span>    </span><br><span class="line"><span class="meta">#</span><span class="bash">创建3个连接 查看</span>   </span><br><span class="line">[root@10 ~]# ipvsadm</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  10:mysql rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 172.16.220.40:mysql          Route   1      3          0</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql双主复制</title>
      <link href="posts/5ac39a6e/"/>
      <url>posts/5ac39a6e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Mysql双主复制"><a href="#Mysql双主复制" class="headerlink" title="Mysql双主复制"></a>Mysql双主复制</h2><p>主主模式，两台MySQL互为主从，且两台MySQL均作为主节点对外提供服务，当其中一台MySQL发生故障后，将指向该故障节点的请求快速切换到另外一台MySQL，原来指向非故障节点的请求不受影响。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Centos7.5</li><li>Mysql8.0</li></ul><table><thead><tr><th>节点编号</th><th>IP地址</th><th>节点类型</th><th>端口</th></tr></thead><tbody><tr><td>1</td><td>172.16.220.30</td><td>Mysql Server1</td><td>3306</td></tr><tr><td>2</td><td>172.16.220.40</td><td>Mysql Server1</td><td>3306</td></tr></tbody></table><h3 id="卸载mariadb"><a href="#卸载mariadb" class="headerlink" title="卸载mariadb"></a>卸载mariadb</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看是否安装mariadb</span></span><br><span class="line">rpm -qa|grep mariadb</span><br><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">rpm -qa|grep mariadb|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录</span></span><br><span class="line">mkdir -p  /sunny/&#123;packages,software&#125;</span><br><span class="line"></span><br><span class="line">cd /sunny/packages/</span><br><span class="line"><span class="meta">#</span><span class="bash">下载安装包</span></span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">mkdir ./mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">解压安装包</span></span><br><span class="line">tar -xvf ./mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar -C ./mysql</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">rpm -ivh ./*.rpm --nodeps --force</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p><strong>172.16.220.30</strong><code>/etc/my.cnf</code> 中 <code>[mysqld]</code>下添加配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mysql5.7后  初始化的数据库需要与配置文件lower_case_table_names一致  默认为0  需要忽略大小写时  设置为1</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"><span class="meta">#</span><span class="bash">任意自然n,只需要保证两台mysql主机不重复就可</span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="meta">#</span><span class="bash">开启二进制日志</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">步进值auto_imcrement 。一般有n台主mysql就填n</span></span><br><span class="line">auto_increment_increment=2</span><br><span class="line"><span class="meta">#</span><span class="bash">起始值，一般填写第n台主机mysql.此时为第一台主  mysql</span></span><br><span class="line">auto_increment_offset=1          </span><br></pre></td></tr></table></figure><p><strong>172.16.220.40</strong><code>/etc/my.cnf</code> 中 <code>[mysqld]</code>下添加配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mysql5.7后  初始化的数据库需要与配置文件lower_case_table_names一致  默认为0  需要忽略大小写时  设置为1</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"><span class="meta">#</span><span class="bash">任意自然n,只需要保证两台mysql主机不重复就可</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta">#</span><span class="bash">开启二进制日志</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash">步进值auto_imcrement 。一般有n台主mysql就填n</span></span><br><span class="line">auto_increment_increment=2</span><br><span class="line"><span class="meta">#</span><span class="bash">起始值，一般填写第n台主机mysql.此时为第二台主  mysql</span></span><br><span class="line">auto_increment_offset=2          </span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化数据库</span></span><br><span class="line">/usr/sbin/mysqld --initialize --user=mysql --lower-case-table-names=1</span><br><span class="line"><span class="meta">#</span><span class="bash">授权</span></span><br><span class="line">chown mysql:mysql /var/lib/mysql -R</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span>  </span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启</span></span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看默认密码</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/mysqld.log | grep password </span><br><span class="line"></span><br><span class="line"><span class="comment">#输入默认密码登录</span></span><br><span class="line">mysql -uroot -p </span><br><span class="line"><span class="comment">#修改密码  并授权远程登录</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><h3 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入默认密码登录</span></span><br><span class="line">mysql -uroot -p </span><br><span class="line"><span class="meta">#</span><span class="bash">创建复制用户</span></span><br><span class="line">create user &#x27;repl&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;repl&#x27;;</span><br><span class="line">grant replication slave on *.* to &#x27;repl&#x27;@&#x27;%&#x27;;</span><br><span class="line">flush privileges;  </span><br></pre></td></tr></table></figure><h4 id="172-16-220-30配置"><a href="#172-16-220-30配置" class="headerlink" title="172.16.220.30配置"></a><strong>172.16.220.30配置</strong></h4><p>先在<code>172.16.220.40</code>上查看bin日志状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000002 |     3964 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>返回<code>172.16.220.30</code>配置从库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置从库</span></span><br><span class="line">change master to</span><br><span class="line">master_host=&#x27;172.16.220.40&#x27;,</span><br><span class="line">    master_user=&#x27;repl&#x27;,</span><br><span class="line">    master_password=&#x27;repl&#x27;,</span><br><span class="line">    master_log_file=&#x27;mysql-bin.000002&#x27;,</span><br><span class="line">    master_log_pos=3964;</span><br><span class="line"><span class="meta">#</span><span class="bash">保存配置</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看从库状态</span></span><br><span class="line">show slave status\G</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Connecting to master</span><br><span class="line">                  Master_Host: 172.16.220.40</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 2885</span><br><span class="line">               Relay_Log_File: 40-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">             Slave_IO_Running: Connecting</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 2885</span><br><span class="line">              Relay_Log_Space: 156</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 2061</span><br><span class="line">                Last_IO_Error: error connecting to master &#x27;repl@172.16.220.40:3306&#x27; - retry-time: 60 retries: 1 message: Authentication plugin &#x27;caching_sha2_password&#x27; reported error: Authentication requires secure connection.</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 210311 17:41:17</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">       Master_public_key_path: </span><br><span class="line">        Get_master_public_key: 0</span><br><span class="line">            Network_Namespace: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="172-16-220-40配置"><a href="#172-16-220-40配置" class="headerlink" title="172.16.220.40配置"></a><strong>172.16.220.40配置</strong></h4><p>先在<code>172.16.220.30</code>上查看bin日志状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000002 |     6663 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>返回<code>172.16.220.40</code>配置从库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置从库</span></span><br><span class="line">change master to</span><br><span class="line">master_host=&#x27;172.16.220.30&#x27;,</span><br><span class="line">    master_user=&#x27;repl&#x27;,</span><br><span class="line">    master_password=&#x27;repl&#x27;,</span><br><span class="line">    master_log_file=&#x27;mysql-bin.000002&#x27;,</span><br><span class="line">    master_log_pos=6663;</span><br><span class="line"><span class="meta">#</span><span class="bash">保存配置</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看从库状态</span></span><br><span class="line">show slave status\G</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Connecting to master</span><br><span class="line">                  Master_Host: 172.16.220.30</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 2108</span><br><span class="line">               Relay_Log_File: 40-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">             Slave_IO_Running: Connecting</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 2108</span><br><span class="line">              Relay_Log_Space: 156</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#x27;repl@172.16.220.30:3306&#x27; - retry-time: 60 retries: 1 message: Access denied for user &#x27;repl&#x27;@&#x27;172.16.220.40&#x27; (using password: YES)</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 210311 17:42:48</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">       Master_public_key_path: </span><br><span class="line">        Get_master_public_key: 0</span><br><span class="line">            Network_Namespace: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在<strong>172.16.220.30</strong>中创建数据库<code>test</code>,并创建<code>tb_user</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test;</span><br><span class="line">use test;</span><br><span class="line">create table tb_user(</span><br><span class="line">    id int(10) not NULL,</span><br><span class="line">    name varchar(100) not NULL,</span><br><span class="line">    sex varchar(32) not NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在<strong>172.16.220.40</strong>中查看是否有库test</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>在<strong>172.16.220.40</strong>中创建数据库<code>test1</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test1;</span><br></pre></td></tr></table></figure><p>在<strong>172.16.220.30</strong>中查看是否有库test1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| test1              |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7搭建Redis Cluster集群(3主3从)</title>
      <link href="posts/995a84ff/"/>
      <url>posts/995a84ff/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Centos7搭建Redis-Cluster集群-3主3从"><a href="#Centos7搭建Redis-Cluster集群-3主3从" class="headerlink" title="Centos7搭建Redis Cluster集群(3主3从)"></a>Centos7搭建Redis Cluster集群(3主3从)</h2><p>Redis Cluster是Redis官方提供的Redis集群功能</p><p>Redis Cluster提供了一种运行Redis安装的方法，在该安装中，数据会 <strong>在多个Redis节点之间自动分片</strong>。</p><p>Redis Cluster<strong>在分区期间</strong>还提供了<strong>一定程度的可用性</strong>，这实际上是在某些节点出现故障或无法通信时继续操作的能力。但是，如果发生较大故障（例如，大多数主服务器不可用时），群集将停止运行。</p><h3 id="Redis集群数据分片"><a href="#Redis集群数据分片" class="headerlink" title="Redis集群数据分片"></a>Redis集群数据分片</h3><p>Redis Cluster不使用一致的哈希，而是使用一种不同形式的分片，其中每个键从概念上讲都是我们称为<strong>哈希槽的一部分</strong>。</p><p>Redis集群中有16384个哈希槽，要计算给定密钥的哈希槽，我们只需对密钥的CRC16取模16384就可以了。</p><p>Redis群集中的每个节点都负责哈希槽的一个子集，因此，例如，您可能有一个包含3个节点的群集，其中：</p><ul><li>节点A包含从0到5500的哈希槽。</li><li>节点B包含从5501到11000的哈希槽。</li><li>节点C包含从11001到16383的哈希槽。</li></ul><p>这样可以轻松添加和删除集群中的节点。例如，如果要添加新节点D，则需要将一些哈希槽从节点A，B，C移到D。类似地，如果要从群集中删除节点A，则可以仅移动A提供的哈希槽到B和C。当节点A为空时，我可以将其从群集中完全删除。</p><h3 id="Redis群集一致性保证"><a href="#Redis群集一致性保证" class="headerlink" title="Redis群集一致性保证"></a>Redis群集一致性保证</h3><p>Redis Cluster无法保证<strong>强一致性</strong>。实际上，这意味着在某些情况下，Redis Cluster可能会丢失系统已确认给客户端的写入。</p><p>Redis Cluster可能会丢失写入的第一个原因是因为它使用异步复制。这意味着在写入过程中会发生以下情况：</p><ul><li>您的客户写信给主B。</li><li>主B向您的客户答复“确定”。</li><li>主机B将写操作传播到其从机B1，B2和B3。</li></ul><p>如您所见，B在回复客户端之前不会等待B1，B2，B3的确认，因为这会对Redis造成极高的延迟，因此，如果您的客户端写了一些东西，B会确认写，但是在崩溃之前崩溃由于能够将写操作发送到其从属设备，因此一个从属设备（未接收到写操作）可以提升为主设备，从而永远丢失写操作。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>使用三台机器搭建Redis 集群</li></ul><table><thead><tr><th>节点编号</th><th>IP地址</th><th>节点类型</th><th>redis端口</th><th>配置文件</th></tr></thead><tbody><tr><td>1</td><td>172.16.220.10</td><td>主</td><td>7001</td><td>/sunny/software/redis/conf/7001.cof</td></tr><tr><td>2</td><td>172.16.220.20</td><td>主</td><td>7002</td><td>/sunny/software/redis/conf/7002.cof</td></tr><tr><td>3</td><td>172.16.220.30</td><td>主</td><td>7003</td><td>/sunny/software/redis/conf/7003.cof</td></tr><tr><td>4</td><td>172.16.220.10</td><td>1从</td><td>8001</td><td>/sunny/software/redis/conf/8001.cof</td></tr><tr><td>5</td><td>172.16.220.20</td><td>2从</td><td>8002</td><td>/sunny/software/redis/conf/8002.cof</td></tr><tr><td>6</td><td>172.16.220.30</td><td>3从</td><td>8003</td><td>/sunny/software/redis/conf/8003.cof</td></tr></tbody></table><h3 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h3><p>以<code>172.16.220.10</code>为例，另两台相同。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# tree</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── redis-benchmark</span><br><span class="line">│   ├── redis-check-aof</span><br><span class="line">│   ├── redis-check-rdb</span><br><span class="line">│   ├── redis-cli</span><br><span class="line">│   ├── redis-sentinel -&gt; redis-server</span><br><span class="line">│   └── redis-server</span><br><span class="line">├── conf</span><br><span class="line">│   ├── 7001.conf</span><br><span class="line">│   └── 8001.conf</span><br><span class="line">├── data</span><br><span class="line">│   ├── 7001</span><br><span class="line">│   │   ├── appendonly_7001.aof</span><br><span class="line">│   │   └── nodes-7001.conf</span><br><span class="line">│   └── 8001</span><br><span class="line">│       ├── appendonly_8001.aof</span><br><span class="line">│       └── nodes-8001.conf</span><br><span class="line">└── redis.conf</span><br></pre></td></tr></table></figure><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p><a href="https://sunnyws.com/2020/12/22/Centos%E5%AE%89%E8%A3%85Redis/">https://sunnyws.com/2020/12/22/Centos%E5%AE%89%E8%A3%85Redis/</a></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>以<code>172.16.220.10</code>为例，另两台相同。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据备份及日志文件</span></span><br><span class="line">mkdir -p /sunny/software/redis/data/&#123;7001,8001&#125;</span><br><span class="line">mkdir -p /sunny/software/redis/conf</span><br><span class="line"><span class="meta">#</span><span class="bash">复制配置文件</span></span><br><span class="line">cp /sunny/software/redis/redis.conf /sunny/software/redis/conf/7001.conf</span><br><span class="line">vim /sunny/software/redis/conf/7001.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">端口</span></span><br><span class="line">port 7001</span><br><span class="line"><span class="meta">#</span><span class="bash">pid文件</span></span><br><span class="line">pidfile /var/run/redis_7001.pid </span><br><span class="line"><span class="meta">#</span><span class="bash">开启集群功能</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="meta">#</span><span class="bash">集群节点配置文件名，该文件不是人工编写的，由程序自动生成和修改</span></span><br><span class="line">cluster-config-file nodes-7001.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">集群节点超时时间，配合cluster-replica-validity-factor使用</span></span><br><span class="line">cluster-node-timeout 1000</span><br><span class="line"><span class="meta">#</span><span class="bash">探测集群节点超时不可用的次数，假设cluster-node-timeout设置为1000毫秒，cluster-replica-validity-factor为5，那么1000*5之间内集群节点还不可用的话，会被标记为疑似下线</span></span><br><span class="line">cluster-replica-validity-factor 5</span><br><span class="line"><span class="meta">#</span><span class="bash">主节点下最少的从节点数</span></span><br><span class="line">cluster-migration-barrier 1</span><br><span class="line"><span class="meta">#</span><span class="bash">yes 要求所有主节点正常工作，且所有<span class="built_in">hash</span> slots被分配到工作的主节点，集群才能提供服务，如果想一部分<span class="built_in">hash</span> slots即可响应请求，则设置为no</span></span><br><span class="line">cluster-require-full-coverage yes</span><br><span class="line"><span class="meta">#</span><span class="bash">yes 禁止当主节点挂掉时，让从节点不能竞选为主节点</span></span><br><span class="line">cluster-replica-no-failover no</span><br><span class="line"><span class="meta">#</span><span class="bash">开启AOF持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span><span class="bash">AOF持久化日志名</span></span><br><span class="line">appendfilename &quot;appendonly_7001.aof&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">设置RDB和AOF文件目录</span></span><br><span class="line">dir  /sunny/software/redis/data/7001/</span><br><span class="line"><span class="meta">#</span><span class="bash">redis3.2版本后新增protected-mode配置，默认是yes，即开启。设置外部网络连接redis服务，设置方式如下：1、关闭protected-mode模式，此时外部网络可以直接访问 2、开启protected-mode保护模式，需配置<span class="built_in">bind</span> ip或者设置访问密码</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span><span class="bash">密码先注释掉 初始化前添加密码测试的时候，主节点挂掉，从节点未能晋升。可以先搭建集群，再添加密码。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">requirepass 123456</span></span><br></pre></td></tr></table></figure><ul><li>复制<code>7001.conf</code> 改名为<code>8001.conf</code>,并将配置文件中的<code>7001</code>改为<code>8001</code></li></ul><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>在三台服务器上分别启动服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">172.16.220.10</span></span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/7001.conf</span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/8001.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.20</span></span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/7002.conf</span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/8002.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.30</span></span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/7003.conf</span><br><span class="line">/sunny/software/redis/bin/redis-server /sunny/software/redis/conf/8003.conf</span><br></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本例在172.16.220.10配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p  端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--cluster-replicas  主从比例  这里单从 为1</span></span><br><span class="line">/sunny/software/redis/bin/redis-cli -p 7001  --cluster create \</span><br><span class="line">      172.16.220.10:7001 \</span><br><span class="line">      172.16.220.10:8001 \</span><br><span class="line">      172.16.220.20:7002 \</span><br><span class="line">      172.16.220.20:8002 \</span><br><span class="line">      172.16.220.30:7003 \</span><br><span class="line">      172.16.220.30:8003 \</span><br><span class="line">      --cluster-replicas 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/redis_cluster%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4.png"></p><ul><li>如图所示，则搭建成功。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">登录客户端</span></span><br><span class="line">/sunny/software/redis/bin/redis-cli -c -p 7001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看节点状态</span></span><br><span class="line">127.0.0.1:7001&gt; cluster nodes</span><br><span class="line">0c5e731ee2c0f503aa878c5475e873ffdd9d7f93 172.16.220.20:7002@17002 master - 0 1615292704717 3 connected 5461-10922</span><br><span class="line">41742bc1aa339f6c7d960ff703f46bb8828ef0f5 172.16.220.10:7001@17001 myself,master - 0 1615292704000 1 connected 0-5460</span><br><span class="line">d29b9c724f8b160675fa2b30af0f948fe3c0f30e 172.16.220.30:7003@17003 master - 0 1615292705019 5 connected 10923-16383</span><br><span class="line">c606446c69f123fb0b890531fa83e2058b45614d 172.16.220.20:8002@18002 slave 41742bc1aa339f6c7d960ff703f46bb8828ef0f5 0 1615292705019 4 connected</span><br><span class="line">f3396effec9dc261451e0b14006356a3f42d3d45 172.16.220.10:8001@18001 slave d29b9c724f8b160675fa2b30af0f948fe3c0f30e 0 1615292704716 5 connected</span><br><span class="line">f65623247157583119f4fd538cc7ba40b6fa0c06 172.16.220.30:8003@18003 slave 0c5e731ee2c0f503aa878c5475e873ffdd9d7f93 0 1615292705019 6 connected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">主从关系不对应  修改主从关系</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.10机器   cluster replicate &lt;nodeID&gt;   这里7001的nodeID</span>  </span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -p 8001 -a 123456 cluster replicate 41742bc1aa339f6c7d960ff703f46bb8828ef0f5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.20机器   cluster replicate &lt;nodeID&gt;   这里7002的nodeID</span>  </span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -p 8002 -a 123456 cluster replicate 0c5e731ee2c0f503aa878c5475e873ffdd9d7f93</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.30机器   cluster replicate &lt;nodeID&gt;   这里7003的nodeID</span>  </span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -p 8003 -a 123456 cluster replicate d29b9c724f8b160675fa2b30af0f948fe3c0f30e</span><br><span class="line"></span><br><span class="line">127.0.0.1:7002&gt; cluster nodes</span><br><span class="line">0c5e731ee2c0f503aa878c5475e873ffdd9d7f93 172.16.220.20:7002@17002 myself,master - 0 1615339605000 3 connected 5461-10922</span><br><span class="line">d29b9c724f8b160675fa2b30af0f948fe3c0f30e 172.16.220.30:7003@17003 master - 0 1615339605592 5 connected 10923-16383</span><br><span class="line">f3396effec9dc261451e0b14006356a3f42d3d45 172.16.220.10:8001@18001 slave 41742bc1aa339f6c7d960ff703f46bb8828ef0f5 0 1615339605693 5 connected</span><br><span class="line">c606446c69f123fb0b890531fa83e2058b45614d 172.16.220.20:8002@18002 slave 0c5e731ee2c0f503aa878c5475e873ffdd9d7f93 0 1615339605592 4 connected</span><br><span class="line">f65623247157583119f4fd538cc7ba40b6fa0c06 172.16.220.30:8003@18003 slave d29b9c724f8b160675fa2b30af0f948fe3c0f30e 0 1615339605793 6 connected</span><br><span class="line">41742bc1aa339f6c7d960ff703f46bb8828ef0f5 172.16.220.10:7001@17001 master - 0 1615339605592 1 connected 0-5460</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看集群状态</span></span><br><span class="line">127.0.0.1:7001&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:20995</span><br><span class="line">cluster_stats_messages_pong_sent:21090</span><br><span class="line">cluster_stats_messages_sent:42085</span><br><span class="line">cluster_stats_messages_ping_received:21085</span><br><span class="line">cluster_stats_messages_pong_received:20995</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:42085</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加密码"><a href="#添加密码" class="headerlink" title="添加密码"></a>添加密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要在每个实例上设置密码  密码需要一致</span></span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -c -p 7001</span><br><span class="line">127.0.0.1:7001&gt; config set masterauth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; config set requirepass  123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; config rewrite</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:7001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; config rewrite</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7001&gt; exit</span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -c -p 8001</span><br><span class="line">127.0.0.1:8001&gt; config set masterauth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:8001&gt; config set requirepass  123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:8001&gt; config rewrite</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:8001&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:8001&gt; config rewrite</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:8001&gt; exit</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">保存key  是否 分区保存</span></span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -c -p 7001</span><br><span class="line">127.0.0.1:7001&gt; set name sunny</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [5798] located at 172.16.220.20:7002</span></span><br><span class="line">OK</span><br><span class="line">172.16.220.20:7002&gt; get name</span><br><span class="line">&quot;sunny&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">杀掉一台master机器  从节点是否晋升为主节点</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看现在的集群状态</span></span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -c -p 7001 -a 123456</span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:7001&gt; cluster nodes</span><br><span class="line">6a33a739c3367269906adbbbe7c495349e3e201a 172.16.220.20:7002@17002 master - 0 1615357749088 3 connected 5461-10922</span><br><span class="line">b8e9308aa39beb43bd04da03222d02abc6fcec4c 172.16.220.20:8002@18002 myself,slave f74ac9b06faab1620226f702f9bb9256fb674a2d 0 1615357749000 7 connected</span><br><span class="line">0810bf29a1c054db0a5bc021ea88ed5b8f1a0b38 172.16.220.10:8001@18001 slave f74ac9b06faab1620226f702f9bb9256fb674a2d 0 1615357749292 8 connected</span><br><span class="line">e297d413acbc8c314eaa485f7447c6f598ea2849 172.16.220.30:8003@18003 slave 6a33a739c3367269906adbbbe7c495349e3e201a 0 1615357749089 6 connected</span><br><span class="line">f74ac9b06faab1620226f702f9bb9256fb674a2d 172.16.220.10:7001@17001 master - 0 1615357749291 8 connected 0-5460</span><br><span class="line">00fc4ee2dad9dba5180da364054398a24b783a17 172.16.220.30:7003@17003 master - 0 1615357749291 5 connected 10923-16383</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">杀掉7001主进程  等待7s(cluster-node-timeout*cluster-replica-validity-factor)+repl-ping-replica-period</span></span><br><span class="line">[root@localhost redis]# ps -ef|grep redis</span><br><span class="line">root       7832      1  0 08:26 ?        00:00:03 ./bin/redis-server *:7001 [cluster]</span><br><span class="line">root       7845      1  0 08:27 ?        00:00:03 ./bin/redis-server *:8001 [cluster]</span><br><span class="line">root       7970   7716  0 08:38 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">[root@localhost redis]# kill -9 7832</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">换台机器查看集群状态 8001  是否晋升</span></span><br><span class="line">[root@localhost redis]# ./bin/redis-cli -p 8002</span><br><span class="line">127.0.0.1:8002&gt; cluster nodes</span><br><span class="line">6a33a739c3367269906adbbbe7c495349e3e201a 172.16.220.20:7002@17002 master - 0 1615357917109 3 connected 5461-10922</span><br><span class="line">b8e9308aa39beb43bd04da03222d02abc6fcec4c 172.16.220.20:8002@18002 myself,slave 6a33a739c3367269906adbbbe7c495349e3e201a 0 1615357916000 7 connected</span><br><span class="line">0810bf29a1c054db0a5bc021ea88ed5b8f1a0b38 172.16.220.10:8001@18001 master - 0 1615357917512 9 connected 0-5460</span><br><span class="line">e297d413acbc8c314eaa485f7447c6f598ea2849 172.16.220.30:8003@18003 slave 00fc4ee2dad9dba5180da364054398a24b783a17 0 1615357917211 6 connected</span><br><span class="line">f74ac9b06faab1620226f702f9bb9256fb674a2d 172.16.220.10:7001@17001 master,fail - 1615357909943 1615357909441 8 disconnected</span><br><span class="line">00fc4ee2dad9dba5180da364054398a24b783a17 172.16.220.30:7003@17003 master - 0 1615357917211 5 connected 10923-16383</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7搭建Kafka集群</title>
      <link href="posts/4fd3d46b/"/>
      <url>posts/4fd3d46b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Centos7搭建Kafka集群"><a href="#Centos7搭建Kafka集群" class="headerlink" title="Centos7搭建Kafka集群"></a>Centos7搭建Kafka集群</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>使用三台机器搭建Kafka集群</li><li>jdk1.8</li><li><a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz">zookeeper-3.6.1</a></li><li><a href="https://downloads.apache.org/kafka/2.7.0/kafka_2.12-2.7.0.tgz">kafka_2.12-2.7.0</a></li></ul><table><thead><tr><th>节点编号</th><th>IP地址</th><th>节点类型</th><th>端口</th></tr></thead><tbody><tr><td>1</td><td>172.16.220.10</td><td>zookeeper</td><td>2181（这里为单机部署）</td></tr><tr><td>1</td><td>172.16.220.10</td><td>kafka</td><td>9092</td></tr><tr><td>2</td><td>172.16.220.20</td><td>kafka</td><td>9092</td></tr><tr><td>3</td><td>172.16.220.30</td><td>kafka</td><td>9092</td></tr></tbody></table><h3 id="安装Jdk"><a href="#安装Jdk" class="headerlink" title="安装Jdk"></a>安装Jdk</h3><p><strong>卸载openJdk</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看是否安装openJdk   如没有安装openjdk可直接安装jdk</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta">#</span><span class="bash">卸载openJdk</span></span><br><span class="line">rpm -qa|grep jdk |xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><p><strong>安装Jdk</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件夹</span></span><br><span class="line">mkdir -p /usr/java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压资源包到/usr/<span class="built_in">local</span>/java/</span></span><br><span class="line">tar -zxvf ./jdk-8u231-linux-x64.tar.gz  -C /usr/java/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加jdk路径  在/etc/profile文件最后添加如下---中配置  JAVA_HOME路径为加压jdk包的路径</span></span><br><span class="line">----</span><br><span class="line"><span class="meta">#</span><span class="bash">jdk</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_231</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更新环境变量</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否安装成功</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title="安装Zookeeper"></a>安装Zookeeper</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf ./apache-zookeeper-3.6.1-bin.tar.gz -C /sunny/software/</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">cd   /sunny/software/apache-zookeeper-3.6.1-bin/conf</span><br><span class="line">cp ./zoo_sample.cfg ./zoo.cfg</span><br><span class="line">../bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="Kafka集群搭建"><a href="#Kafka集群搭建" class="headerlink" title="Kafka集群搭建"></a>Kafka集群搭建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf ./kafka_2.12-2.7.0.tgz -C /sunny/software/</span><br><span class="line"></span><br><span class="line">cd /ql/software/kafka_2.12-2.7.0/</span><br><span class="line">vim ./config/server.properties </span><br></pre></td></tr></table></figure><p> <code>172.16.220.10</code><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里zookeeper为单节点</span></span><br><span class="line">broker.id=1</span><br><span class="line">listeners = PLAINTEXT://172.16.220.10:9092</span><br><span class="line">zookeeper.connect=172.16.220.10:2181</span><br></pre></td></tr></table></figure><p> <code>172.16.220.20</code><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里zookeeper为单节点</span></span><br><span class="line">broker.id=2</span><br><span class="line">listeners = PLAINTEXT://172.16.220.20:9092</span><br><span class="line">zookeeper.connect=172.16.220.10:2181</span><br></pre></td></tr></table></figure><p> <code>172.16.220.30</code><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里zookeeper为单节点</span></span><br><span class="line">broker.id=3</span><br><span class="line">listeners = PLAINTEXT://172.16.220.30:9092</span><br><span class="line">zookeeper.connect=172.16.220.10:2181</span><br></pre></td></tr></table></figure><p><strong>分别启动</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">三台机器分别启动 kafka</span></span><br><span class="line">./bin/kafka-server-start.sh -daemon ./config/server.properties </span><br></pre></td></tr></table></figure><h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><ul><li>在任意一台机器，新建topic</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># cd /ql/software/kafka_2.12-2.7.0/bin/</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./kafka-topics.sh --create --zookeeper 172.16.220.10:2181       --replication-factor 1       --partitions 1       --topic test</span></span><br><span class="line">Created topic <span class="built_in">test</span>.</span><br></pre></td></tr></table></figure><ul><li> 使用任意一台机器作为生产者</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ./kafka-console-producer.sh     --broker-list 172.16.220.10:9092     --topic test</span></span><br><span class="line">&gt;test1</span><br><span class="line">&gt;test2</span><br></pre></td></tr></table></figure><ul><li>使用任意一台机器作为消费者</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ./kafka-console-consumer.sh      --bootstrap-server 172.16.220.30:9092      --topic test      --from-beginning</span></span><br><span class="line">test1</span><br><span class="line">test2</span><br></pre></td></tr></table></figure><h3 id="Kafka-Tool查看集群状态"><a href="#Kafka-Tool查看集群状态" class="headerlink" title="Kafka Tool查看集群状态"></a>Kafka Tool查看集群状态</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/kafka2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm部署K8S集群</title>
      <link href="posts/e96cc0ed/"/>
      <url>posts/e96cc0ed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="kubeadm部署K8S集群"><a href="#kubeadm部署K8S集群" class="headerlink" title="kubeadm部署K8S集群"></a>kubeadm部署K8S集群</h2><ul><li>Centos7.5</li><li>Docker 18.06.3</li><li>Kubernetes v1.15.0</li><li>CPU&gt;=2c ,内存&gt;=2G</li></ul><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>IP</th><th>角色</th><th>安装软件</th></tr></thead><tbody><tr><td>172.16.220.20</td><td>k8s-Master</td><td>kube-apiserver  kube-schduler  kube-controller-manager  docker  flannel  kubelet</td></tr><tr><td>172.16.220.30</td><td>k8s-node01</td><td>kubelet  kube-proxy  docker  flannel</td></tr><tr><td>172.16.220.40</td><td>k8s-node01</td><td>kubelet  kube-proxy  docker  flannel</td></tr></tbody></table><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h3><ul><li>关闭 防火墙、SeLinux、swap（3个节点都执行）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙  生产环境请跳过，开放相应端口</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭selinux</span> </span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭 swap 分区</span></span><br><span class="line">swapoff -a</span><br><span class="line">yes | cp /etc/fstab /etc/fstab_bak</span><br><span class="line">cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改host</span></span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.20 节点</span></span><br><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.30 节点</span></span><br><span class="line">hostnamectl set-hostname k8s-node01</span><br><span class="line"><span class="meta">#</span><span class="bash">172.16.220.40 节点</span></span><br><span class="line">hostnamectl set-hostname k8s-node02 </span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/hosts</span><br><span class="line">172.16.220.20 k8s-master</span><br><span class="line">172.16.220.30 k8s-node01</span><br><span class="line">172.16.220.40 k8s-node02</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">内核调整,将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><ul><li>（3个节点都执行）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖</span></span><br><span class="line">yum install -y yum-untils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加docker yum 源 这里是docker-ce社区免费版</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce-18.06.3.ce</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line"></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="配置K8S的yum源"><a href="#配置K8S的yum源" class="headerlink" title="配置K8S的yum源"></a>配置K8S的yum源</h3><ul><li>（3个节点都执行）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装kubeadm-kubelet和kubectl"><a href="#安装kubeadm-kubelet和kubectl" class="headerlink" title="安装kubeadm,kubelet和kubectl"></a>安装kubeadm,kubelet和kubectl</h3><ul><li>（3个节点都执行）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.15.0 kubeadm-1.15.0 kubectl-1.15.0</span><br></pre></td></tr></table></figure><ul><li><code>docker</code>与<code>kubelet</code>cgroup驱动需要相同，kubeadm-1.15默认为cgroup</li><li><a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/">官方文档</a>表示，更改设置，令容器运行时和kubelet使用systemd作为cgroup驱动，以此使系统更为稳定。</li></ul><p><strong>修改docker Cgroup Driver为systemd</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否修改成功 Cgroup Driver: systemd</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动kubelet</span></span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h3 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h3><ul><li>（master节点执行）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--apiserver-advertise-address string API 服务器所公布的其正在监听的 IP 地址。如果未设置，则使用默认网络接口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--service-cidr string 默认值：<span class="string">&quot;10.96.0.0/12&quot;</span> 为服务的虚拟 IP 地址另外指定 IP 地址段</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--pod-network-cidr string 指明 pod 网络可以使用的 IP 地址段。如果设置了这个参数，控制平面将会为每一个节点自动分配 CIDRs。</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--kubernetes-version v1.15.0 \</span><br><span class="line">--apiserver-advertise-address=172.16.220.20 \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \</span><br><span class="line">--service-cidr=10.1.0.0/16 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置api链接配置文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><h3 id="node节点接入集群"><a href="#node节点接入集群" class="headerlink" title="node节点接入集群"></a>node节点接入集群</h3><ul><li><p>（node节点执行）</p></li><li><p>使用master节点<code>kubeadm init</code>最后生成的语句添加node节点</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 172.16.220.20:6443 --token 1v6p79.bpqqc68x21sf9l1j \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:100ae0d15ad7f2f78aed6cccff01c273f3b47f7eab5aa47661778be03328b63f </span><br></pre></td></tr></table></figure><h3 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h3><ul><li>在master节点上查看</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl  get nodes </span><br><span class="line">NAME         STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master   NotReady   master   19m   v1.15.0</span><br><span class="line">k8s-node01   NotReady   &lt;none&gt;   11m   v1.15.0</span><br><span class="line">k8s-node02   NotReady   &lt;none&gt;   23s   v1.15.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(七) 基于Knife4jAggregationDesktop实现聚合OpenAPI文档</title>
      <link href="posts/ec81c193/"/>
      <url>posts/ec81c193/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-六-基于-Knife4jAggregationDesktop实现聚合OpenAPI文档"><a href="#微服务实战-六-基于-Knife4jAggregationDesktop实现聚合OpenAPI文档" class="headerlink" title="微服务实战(六) 基于 Knife4jAggregationDesktop实现聚合OpenAPI文档"></a>微服务实战(六) 基于 Knife4jAggregationDesktop实现聚合OpenAPI文档</h2><p>官方文档：<a href="https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html">https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html</a></p><ul><li><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</li><li><code>Knife4j</code>是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是<code>swagger-bootstrap-ui</code>,取名kni4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍!</li><li><code>Knife4jAggregation</code>是给Spring Boot的web系统赋能,拥有聚合OpenAPI文档的能力</li><li><code>Knife4jAggregationDesktop</code>是一款基于聚合组件<code>Knife4jAggregation</code>特性的独立部署的聚合OpenAPI文档软件，脱离Spring、Spring Boot技术架构体系，开发者下载后独立部署启动。开发者可以理解为能够渲染OpenAPI规范的独立文档应用</li></ul><h3 id="自定义swagger模块"><a href="#自定义swagger模块" class="headerlink" title="自定义swagger模块"></a>自定义swagger模块</h3><h4 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a><strong>模块结构</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─com.sunnyws.common.swagger</span><br><span class="line">│      │             ├── annotation</span><br><span class="line">│      │             │      └── EnableKnife4jSwagger.java</span><br><span class="line">│      │             └── config</span><br><span class="line">│      │                     ├── SwaggerAutoConfiguration.java</span><br><span class="line">│      │                     └── SwaggerProperties.java</span><br><span class="line">│      └─resources</span><br></pre></td></tr></table></figure><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h4><ul><li>引入<code>knife4j-spring-boot-starter</code>或<code>swagger-models``knife4j-micro-spring-boot-starter</code></li><li>引入<code>knife4j-spring-boot-starter</code>则每个项目都有单独的swagger文档，不影响Knife4jAggregationDesktop进行聚合使用</li><li>引入<code>swagger-models``knife4j-micro-spring-boot-starter</code>只是剔除了<code>knife4j-spring-boot-starter</code>的前端部分，每个项目无法通过页面单独查看swagger文档，只能通过Knife4jAggregationDesktop聚合查看</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-micro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="完整依赖"><a href="#完整依赖" class="headerlink" title="完整依赖"></a><strong>完整依赖</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">knife4j.swagger.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">knife4j.swagger.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>1.5.22<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot Web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;$&#123;knife4j.swagger.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- knife4j swagger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-micro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义swagger配置"><a href="#自定义swagger配置" class="headerlink" title="自定义swagger配置"></a><strong>自定义swagger配置</strong></h4><ul><li>除了通过自定义属性，对swagger必要参数进行设置，也可以通过knife4j增强特性对knife4j swagger前端页面一些参数进行修改，这里就不详细说,可以通过官方文档学习。</li><li>官方文档：<a href="https://doc.xiaominfo.com/knife4j/documentation/">https://doc.xiaominfo.com/knife4j/documentation/</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启swagger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger会解析的包路径</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String basePackage = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * group</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String groupName = <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger会解析的url规则</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; basePath = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在basePath基础上需要排除的url规则</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludePath = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String title = <span class="string">&quot;swagger&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">&quot;swagger document&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 版本</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 许可证</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String license = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 许可证URL</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String licenseUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务条款URL</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String termsOfServiceUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * host信息</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 联系人信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 联系人</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 联系人url</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">private</span> String url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 联系人email</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">private</span> String email = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的排除路径，排除Spring Boot默认的错误处理路径和端点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; DEFAULT_EXCLUDE_PATH = Arrays.asList(<span class="string">&quot;/error&quot;</span>, <span class="string">&quot;/actuator/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_PATH = <span class="string">&quot;/**&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwaggerProperties <span class="title">swaggerProperties</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwaggerProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(value = 1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// base-path处理</span></span><br><span class="line">        <span class="keyword">if</span> (swaggerProperties.getBasePath().isEmpty()) &#123;</span><br><span class="line">            swaggerProperties.getBasePath().add(BASE_PATH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(swaggerProperties.getEnabled())</span><br><span class="line">                .host(swaggerProperties.getHost())</span><br><span class="line">                .apiInfo(apiInfo(swaggerProperties)).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(swaggerProperties.getBasePackage()))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .groupName(swaggerProperties.getGroupName())</span><br><span class="line">                .securityContexts(CollectionUtils.newArrayList(securityContext(),securityContext1()))</span><br><span class="line">                .securitySchemes(CollectionUtils.&lt;SecurityScheme&gt;newArrayList(apiKey(),apiKey1()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(swaggerProperties.getTitle())</span><br><span class="line">                .description(swaggerProperties.getDescription())</span><br><span class="line">                .license(swaggerProperties.getLicense())</span><br><span class="line">                .licenseUrl(swaggerProperties.getLicenseUrl())</span><br><span class="line">                .termsOfServiceUrl(swaggerProperties.getTermsOfServiceUrl())</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(swaggerProperties.getContact().getName(), swaggerProperties.getContact().getUrl(), swaggerProperties.getContact().getEmail()))</span><br><span class="line">                .version(swaggerProperties.getVersion())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全模式，这里指定token通过Authorization头请求头传递</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiKey <span class="title">apiKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiKey(<span class="string">&quot;BearerToken&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiKey <span class="title">apiKey1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiKey(<span class="string">&quot;BearerToken1&quot;</span>, <span class="string">&quot;Authorization-x&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityContext <span class="title">securityContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.regex(<span class="string">&quot;/.*&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> SecurityContext <span class="title">securityContext1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth1())</span><br><span class="line">                .forPaths(PathSelectors.regex(<span class="string">&quot;/.*&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的全局鉴权策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.newArrayList(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;BearerToken&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">List&lt;SecurityReference&gt; <span class="title">defaultAuth1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.newArrayList(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;BearerToken1&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a><strong>自定义注解</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(&#123; SwaggerAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableKnife4jSwagger &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用Swagger"><a href="#引用Swagger" class="headerlink" title="引用Swagger"></a><strong>引用Swagger</strong></h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h4><ul><li>版本根据自己的项目定义</li><li>使用Nacos注册中心，以便Knife4jAggregationDesktop+Nacos实现聚合</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>sunnyws.com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sunnyws-common-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a><strong>添加配置</strong></h4><p>详细配置查看自定义的<code>SwaggerProperties.java</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-example1</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line"></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">basePackage:</span> <span class="string">com.sunnyws.example1.controller</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">example1</span> <span class="string">swagger</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&lt;div</span> <span class="string">style=&#x27;font-size:14px;color:red;&#x27;&gt;swagger-bootstrap-ui-demo</span> <span class="string">RESTful</span> <span class="string">APIs&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">termsOfServiceUrl:</span> <span class="string">test.cn</span></span><br><span class="line">  <span class="attr">groupName:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">contact:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span>   <span class="string">test.cn</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">test@xx.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a><strong>启动类添加注解</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableKnife4jSwagger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Knife4jAggregationDesktop"><a href="#Knife4jAggregationDesktop" class="headerlink" title="Knife4jAggregationDesktop"></a><strong>Knife4jAggregationDesktop</strong></h3><ul><li><p>官方提供了四种方式聚合，这里只是简单使用Nacos，其他请看官方文档</p></li><li><p><a href="https://www.bilibili.com/video/BV14z4y1r7e9/">第一篇 Knife4jAggregationDesktop介绍(opens new window)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1xV411b7Fe/">第二篇 Knige4jAggregationDesktiop安装和使用说明(opens new window)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1XA411s73b/">第三篇 Knife4jAggregationDesktop使用-Disk模式(opens new window)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV14y4y1i7nu/">第四篇 Knife4jAggregationDesktop使用-Cloud模式(opens new window)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Cy4y1i7B5/">第五篇 Knife4jAggregationDesktop使用-Eureka模式(opens new window)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1zh411f7pz/">第六篇 Knife4jAggregationDesktop使用-Nacos模式(opens new window)</a></p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><ul><li>下载地址：<a href="https://gitee.com/xiaoym/knife4j/attach_files">https://gitee.com/xiaoym/knife4j/attach_files</a></li></ul><p><strong>Linux环境</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">bin目录下的startup.sh文件赋予可执行权限</span></span><br><span class="line">chmod a+x startup.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">./sh startup.sh</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a><strong>修改配置</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入data下ROOT目录下添加配置，当然也可根据官方文档 在ROOT外新建配置目录 进行配置</span></span><br><span class="line">cd  ./data/ROOT</span><br><span class="line"><span class="meta">#</span><span class="bash">删除初始disk配置示例</span></span><br><span class="line">rm ./*</span><br><span class="line"><span class="meta">#</span><span class="bash">创建Nacos模式配置</span></span><br><span class="line">touch  nacos.properties</span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置</span></span><br><span class="line">vim  ./nacos.properties</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">根据Nacos配置和服务名  修改添加如下配置</span></span><br><span class="line">knife4j.nacos.serviceUrl=http://172.16.220.50:8848/nacos/</span><br><span class="line">knife4j.nacos.routes[0].name=测试一</span><br><span class="line">knife4j.nacos.routes[0].serviceName=sunnyws-service-example1</span><br><span class="line">knife4j.nacos.routes[0].location=/v2/api-docs?group=default</span><br><span class="line">knife4j.nacos.routes[0].namespaceId:e90d261b-9c05-4bcb-b99f-b419d952737a</span><br><span class="line">knife4j.nacos.routes[1].name=测试二 </span><br><span class="line">knife4j.nacos.routes[1].serviceName=sunnyws-service-example2</span><br><span class="line">knife4j.nacos.routes[1].location=/v2/api-docs?group=default</span><br><span class="line">knife4j.nacos.routes[1].namespaceId:e90d261b-9c05-4bcb-b99f-b419d952737a</span><br><span class="line"><span class="meta">#</span><span class="bash">开启认证</span></span><br><span class="line"><span class="meta">#</span><span class="bash">knife4j.basicAuth.enable=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">knife4j.basicAuth.username=nacos</span></span><br><span class="line"><span class="meta">#</span><span class="bash">knife4j.basicAuth.password=1234</span></span><br></pre></td></tr></table></figure><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a><strong>访问页面</strong></h4><ul><li><strong>默认端口</strong>：18006</li><li><strong>网址</strong>：<a href="http://ip:18006/doc.html">http://ip:18006/doc.html</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/swagger1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成WebSocket</title>
      <link href="posts/2d90bae4/"/>
      <url>posts/2d90bae4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="WebSocket的集成"><a href="#WebSocket的集成" class="headerlink" title="WebSocket的集成"></a>WebSocket的集成</h1><h3 id="一、maven依赖"><a href="#一、maven依赖" class="headerlink" title="一、maven依赖"></a>一、maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、WebSocket配置类"><a href="#二、WebSocket配置类" class="headerlink" title="二、WebSocket配置类"></a>二、WebSocket配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jeecg.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入ServerEndpointExporter，</span></span><br><span class="line"><span class="comment">     * 这个bean会自动注册使用了<span class="doctag">@ServerEndpoint</span>注解声明的Websocket endpoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、-WebSocket操作类"><a href="#三、-WebSocket操作类" class="headerlink" title="三、 WebSocket操作类"></a>三、 WebSocket操作类</h3><blockquote><p>通过该类WebSocket可以进行群推送以及单点推送</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.jeecg.modules.message.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocket&gt; webSockets =<span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Session&gt; sessionPool = <span class="keyword">new</span> HashMap&lt;String,Session&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(value=&quot;userId&quot;)</span>String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.session = session;</span><br><span class="line">webSockets.add(<span class="keyword">this</span>);</span><br><span class="line">sessionPool.put(userId, session);</span><br><span class="line">log.info(<span class="string">&quot;【websocket消息】有新的连接，总数为:&quot;</span>+webSockets.size());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">webSockets.remove(<span class="keyword">this</span>);</span><br><span class="line">log.info(<span class="string">&quot;【websocket消息】连接断开，总数为:&quot;</span>+webSockets.size());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;【websocket消息】收到客户端消息:&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此为广播消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAllMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;【websocket消息】广播消息:&quot;</span>+message);</span><br><span class="line">        <span class="keyword">for</span>(WebSocket webSocket : webSockets) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(webSocket.session.isOpen()) &#123;</span><br><span class="line">            webSocket.session.getAsyncRemote().sendText(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此为单点消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOneMessage</span><span class="params">(String userId, String message)</span> </span>&#123;</span><br><span class="line">        Session session = sessionPool.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>&amp;&amp;session.isOpen()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;【websocket消息】 单点消息:&quot;</span>+message);</span><br><span class="line">                session.getAsyncRemote().sendText(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此为单点消息(多人)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMoreMessage</span><span class="params">(String[] userIds, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(String userId:userIds) &#123;</span><br><span class="line">    Session session = sessionPool.get(userId);</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>&amp;&amp;session.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;【websocket消息】 单点消息:&quot;</span>+message);</span><br><span class="line">                    session.getAsyncRemote().sendText(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端中VUE使用WebSocket"><a href="#前端中VUE使用WebSocket" class="headerlink" title="前端中VUE使用WebSocket"></a>前端中VUE使用WebSocket</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    import store from &#39;@&#x2F;store&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123; </span><br><span class="line">              &#x2F;&#x2F;初始化websocket</span><br><span class="line">              this.initWebSocket()</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: function () &#123; &#x2F;&#x2F; 离开页面生命周期函数</span><br><span class="line">              this.websocketclose();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            initWebSocket: function () &#123;</span><br><span class="line">                &#x2F;&#x2F; WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https</span><br><span class="line">                var userId &#x3D; store.getters.userInfo.id;</span><br><span class="line">                var url &#x3D; window._CONFIG[&#39;domianURL&#39;].replace(&quot;https:&#x2F;&#x2F;&quot;,&quot;ws:&#x2F;&#x2F;&quot;).replace(&quot;http:&#x2F;&#x2F;&quot;,&quot;ws:&#x2F;&#x2F;&quot;)+&quot;&#x2F;websocket&#x2F;&quot;+userId;</span><br><span class="line">                this.websock &#x3D; new WebSocket(url);</span><br><span class="line">                this.websock.onopen &#x3D; this.websocketonopen;</span><br><span class="line">                this.websock.onerror &#x3D; this.websocketonerror;</span><br><span class="line">                this.websock.onmessage &#x3D; this.websocketonmessage;</span><br><span class="line">                this.websock.onclose &#x3D; this.websocketclose;</span><br><span class="line">              &#125;,</span><br><span class="line">              websocketonopen: function () &#123;</span><br><span class="line">                console.log(&quot;WebSocket连接成功&quot;);</span><br><span class="line">              &#125;,</span><br><span class="line">              websocketonerror: function (e) &#123;</span><br><span class="line">                console.log(&quot;WebSocket连接发生错误&quot;);</span><br><span class="line">              &#125;,</span><br><span class="line">              websocketonmessage: function (e) &#123;</span><br><span class="line">                var data &#x3D; eval(&quot;(&quot; + e.data + &quot;)&quot;); </span><br><span class="line">                 &#x2F;&#x2F;处理订阅信息</span><br><span class="line">                if(data.cmd &#x3D;&#x3D; &quot;topic&quot;)&#123;</span><br><span class="line">                   &#x2F;&#x2F;TODO 系统通知</span><br><span class="line">             </span><br><span class="line">                &#125;else if(data.cmd &#x3D;&#x3D; &quot;user&quot;)&#123;</span><br><span class="line">                   &#x2F;&#x2F;TODO 用户消息</span><br><span class="line">        </span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              websocketclose: function (e) &#123;</span><br><span class="line">                console.log(&quot;connection closed (&quot; + e.code + &quot;)&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>转载：<a href="http://doc.jeecg.com/1273998">JeecgBoot 开发文档</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用注解@Log记录操作日志</title>
      <link href="posts/94f54d0e/"/>
      <url>posts/94f54d0e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="SpringBoot使用注解-Log记录操作日志"><a href="#SpringBoot使用注解-Log记录操作日志" class="headerlink" title="SpringBoot使用注解@Log记录操作日志"></a>SpringBoot使用注解@Log记录操作日志</h2><h3 id="使用-Log"><a href="#使用-Log" class="headerlink" title="使用@Log"></a>使用@Log</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Log(title = &quot;添加用户&quot;, businessType = BusinessType.INSERT)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;用户表- 添加&quot;, notes = &quot;用户表- 添加&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;UserEntity&gt; <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity user)</span> </span>&#123;</span><br><span class="line">   Result&lt;UserEntity&gt; result = <span class="keyword">new</span> Result&lt;UserEntity&gt;();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      userService.save(user);</span><br><span class="line">      result.success(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(e.getMessage(),e);</span><br><span class="line">      result.error500(<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>保存结果</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                &quot;operId&quot;:&quot;110&quot;,</span><br><span class="line">                &quot;title&quot;:&quot;添加用户&quot;,</span><br><span class="line">                &quot;businessType&quot;:1,</span><br><span class="line">                &quot;method&quot;:&quot;com.sunnyws.log.controller.UserController.add()&quot;,</span><br><span class="line">                &quot;requestMethod&quot;:&quot;POST&quot;,</span><br><span class="line">                &quot;operatorType&quot;:&quot;Windows - Chrome-83.0.4103.61&quot;,</span><br><span class="line">                &quot;operName&quot;:&quot;&quot;,</span><br><span class="line">                &quot;deptName&quot;:&quot;&quot;,</span><br><span class="line">                &quot;operUrl&quot;:&quot;&#x2F;user&#x2F;add&quot;,</span><br><span class="line">                &quot;operIp&quot;:&quot;192.168.151.144&quot;,</span><br><span class="line">                &quot;operParam&quot;:&quot;&#123;\&quot;activitiSync\&quot;:0,\&quot;userIdentity\&quot;:0,\&quot;delFlag\&quot;:0,\&quot;workNo\&quot;:\&quot;\&quot;,\&quot;password\&quot;:\&quot;\&quot;,\&quot;post\&quot;:\&quot;\&quot;,\&quot;updateBy\&quot;:\&quot;\&quot;,\&quot;orgCode\&quot;:\&quot;\&quot;,\&quot;id\&quot;:\&quot;fb1468d95ea261f7938388eb32ecc845\&quot;,\&quot;thirdType\&quot;:\&quot;\&quot;,\&quot;email\&quot;:\&quot;\&quot;,\&quot;salt\&quot;:\&quot;\&quot;,\&quot;thirdId\&quot;:\&quot;\&quot;,\&quot;sex\&quot;:0,\&quot;departIds\&quot;:\&quot;\&quot;,\&quot;telephone\&quot;:\&quot;\&quot;,\&quot;avatar\&quot;:\&quot;\&quot;,\&quot;realname\&quot;:\&quot;\&quot;,\&quot;createBy\&quot;:\&quot;\&quot;,\&quot;phone\&quot;:\&quot;\&quot;,\&quot;status\&quot;:0,\&quot;username\&quot;:\&quot;test1\&quot;&#125;&quot;,</span><br><span class="line">                &quot;jsonResult&quot;:&quot;&#123;\&quot;code\&quot;:500,\&quot;message\&quot;:\&quot;操作失败\&quot;,\&quot;success\&quot;:false,\&quot;timestamp\&quot;:1599614179426&#125;&quot;,</span><br><span class="line">                &quot;status&quot;:0,</span><br><span class="line">                &quot;errorMsg&quot;:null,</span><br><span class="line">                &quot;operTime&quot;:null</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="Sql"><a href="#Sql" class="headerlink" title="Sql"></a>Sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_oper_log`  (</span><br><span class="line">  `oper_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志主键&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;模块标题&#x27;</span>,</span><br><span class="line">  `business_type` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;业务类型（0其它 1新增 2修改 3删除）&#x27;</span>,</span><br><span class="line">  `<span class="keyword">method</span>` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;方法名称&#x27;</span>,</span><br><span class="line">  `request_method` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;请求方式&#x27;</span>,</span><br><span class="line">  `operator_type` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作类别&#x27;</span>,</span><br><span class="line">  `oper_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;操作人员&#x27;</span>,</span><br><span class="line">  `dept_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">  `oper_url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;请求URL&#x27;</span>,</span><br><span class="line">  `oper_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;主机地址&#x27;</span>,</span><br><span class="line">  `oper_location` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;操作地点&#x27;</span>,</span><br><span class="line">  `oper_param` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;请求参数&#x27;</span>,</span><br><span class="line">  `json_result` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;返回参数&#x27;</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;操作状态（0正常 1异常）&#x27;</span>,</span><br><span class="line">  `error_msg` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;错误消息&#x27;</span>,</span><br><span class="line">  `oper_time` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`oper_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1303508790857216003</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;操作日志记录&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.1.5-RELEASE<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons.version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">commons.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集成springmvc框架并实现自动配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--commonns--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Swagger API文档 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.battcn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysOperLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;oper_id&quot;,type = IdType.UUID)</span></span><br><span class="line">    <span class="keyword">private</span> String operId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作模块 */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 业务类型（0其它 1新增 2修改 3删除） */</span></span><br><span class="line">    <span class="keyword">private</span> Integer businessType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /** 业务类型数组 */</span></span><br><span class="line"><span class="comment">//    private Integer[] businessTypes;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求方法 */</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求方式 */</span></span><br><span class="line">    <span class="keyword">private</span> String requestMethod;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作类别 **/</span></span><br><span class="line">    <span class="keyword">private</span> String operatorType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作人员 */</span></span><br><span class="line">    <span class="keyword">private</span> String operName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 部门名称 */</span></span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求url */</span></span><br><span class="line">    <span class="keyword">private</span> String operUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作地址 */</span></span><br><span class="line">    <span class="keyword">private</span> String operIp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求参数 */</span></span><br><span class="line">    <span class="keyword">private</span> String operParam;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 返回参数 */</span></span><br><span class="line">    <span class="keyword">private</span> String jsonResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作状态（0正常 1异常） */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 错误消息 */</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作时间 */</span></span><br><span class="line">    <span class="keyword">private</span> Date operTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BusinessStatus</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BusinessType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其它</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OTHER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DELETE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GRANT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EXPORT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    IMPORT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强退</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FORCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GENCODE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLEAN,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Log注解"><a href="#自定义Log注解" class="headerlink" title="自定义Log注解"></a>自定义Log注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BusinessType <span class="title">businessType</span><span class="params">()</span> <span class="keyword">default</span> BusinessType.OTHER</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSaveRequestData</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存返回的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSaveReponseData</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncLogService asyncLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置织入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.sunnyws.log.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理完请求后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;logPointCut()&quot;, returning = &quot;jsonResult&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object jsonResult)</span></span>&#123;</span><br><span class="line">        handleLog(joinPoint, <span class="keyword">null</span>, jsonResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截异常操作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;logPointCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span></span>&#123;</span><br><span class="line">        handleLog(joinPoint, e, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleLog</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint, <span class="keyword">final</span> Exception e, Object jsonResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获得注解</span></span><br><span class="line">            Log controllerLog = getAnnotationLog(joinPoint);</span><br><span class="line">            <span class="keyword">if</span> (controllerLog == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// *========数据库日志=========*//</span></span><br><span class="line">            SysOperLog operLog = <span class="keyword">new</span> SysOperLog();</span><br><span class="line">            operLog.setStatus(BusinessStatus.SUCCESS.ordinal());</span><br><span class="line">            <span class="comment">// 请求的地址</span></span><br><span class="line">            String ip = IpUtils.getRemoteIP(ServletUtils.getRequest());</span><br><span class="line">            operLog.setOperIp(ip);</span><br><span class="line">            String operatorType = IpUtils.getOsAndBrowserInfo(ServletUtils.getRequest());</span><br><span class="line">            operLog.setOperatorType(operatorType);</span><br><span class="line">            <span class="comment">// 返回参数</span></span><br><span class="line">            <span class="keyword">if</span>(controllerLog.isSaveReponseData())&#123;</span><br><span class="line">                operLog.setJsonResult(JSON.toJSONString(jsonResult));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            operLog.setOperUrl(ServletUtils.getRequest().getRequestURI());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取请求用户</span></span><br><span class="line">            HttpServletRequest request = ServletUtils.getRequest();</span><br><span class="line">            String username = request.getHeader(CacheConstants.DETAILS_USERNAME);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(username))&#123;</span><br><span class="line">                operLog.setOperName(username);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>)&#123;</span><br><span class="line">                operLog.setStatus(BusinessStatus.FAIL.ordinal());</span><br><span class="line">                operLog.setErrorMsg(StringUtils.substring(e.getMessage(), <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置方法名称</span></span><br><span class="line">            String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">            String methodName = joinPoint.getSignature().getName();</span><br><span class="line">            operLog.setMethod(className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置请求方式</span></span><br><span class="line">            operLog.setRequestMethod(ServletUtils.getRequest().getMethod());</span><br><span class="line">            <span class="comment">// 处理设置注解上的参数</span></span><br><span class="line">            getControllerMethodDescription(joinPoint, controllerLog, operLog);</span><br><span class="line">            <span class="comment">//异步保存数据库</span></span><br><span class="line">            asyncLogService.saveSysLog(operLog);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception exp)&#123;</span><br><span class="line">            <span class="comment">// 记录本地异常日志</span></span><br><span class="line">            log.error(<span class="string">&quot;==前置通知异常==&quot;</span>);</span><br><span class="line">            log.error(<span class="string">&quot;异常信息:&#123;&#125;&quot;</span>, exp.getMessage());</span><br><span class="line">            exp.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注解中对方法的描述信息 用于Controller层注解</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> log 日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getControllerMethodDescription</span><span class="params">(JoinPoint joinPoint, Log log, SysOperLog operLog)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 设置action动作</span></span><br><span class="line">        operLog.setBusinessType(log.businessType().ordinal());</span><br><span class="line">        <span class="comment">// 设置标题</span></span><br><span class="line">        operLog.setTitle(log.title());</span><br><span class="line">        <span class="comment">// 是否需要保存request，参数和值</span></span><br><span class="line">        <span class="keyword">if</span> (log.isSaveRequestData())&#123;</span><br><span class="line">            <span class="comment">// 获取参数的信息，传入到数据库中。</span></span><br><span class="line">            setRequestValue(joinPoint, operLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求的参数，放到log中</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operLog 操作日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRequestValue</span><span class="params">(JoinPoint joinPoint, SysOperLog operLog)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String requestMethod = operLog.getRequestMethod();</span><br><span class="line">        <span class="keyword">if</span> (HttpMethod.PUT.name().equals(requestMethod) || HttpMethod.POST.name().equals(requestMethod))&#123;</span><br><span class="line">            String params = argsArrayToString(joinPoint.getArgs());</span><br><span class="line">            operLog.setOperParam(StringUtils.substring(params, <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在注解，如果存在就获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Log <span class="title">getAnnotationLog</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(Log.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数拼装</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">argsArrayToString</span><span class="params">(Object[] paramsArray)</span></span>&#123;</span><br><span class="line">        String params = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (paramsArray != <span class="keyword">null</span> &amp;&amp; paramsArray.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramsArray.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!isFilterObject(paramsArray[i]))&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Object jsonObj = JSON.toJSON(paramsArray[i]);</span><br><span class="line">                        params += jsonObj.toString() + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否需要过滤的对象。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 对象信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果是需要过滤的对象，则返回true；否则返回false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFilterObject</span><span class="params">(<span class="keyword">final</span> Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> MultipartFile || o <span class="keyword">instanceof</span> HttpServletRequest || o <span class="keyword">instanceof</span> HttpServletResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步保存"><a href="#异步保存" class="headerlink" title="异步保存"></a>异步保存</h3><p>保存业务可以自己编写,未贴出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncLogService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysOperLogMapper sysOperLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存系统日志记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSysLog</span><span class="params">(SysOperLog sysOperLog)</span> </span>&#123;</span><br><span class="line">        sysOperLogMapper.insert(sysOperLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get remote ip address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRemoteIP</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> ||<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> ||<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> ||<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> ||<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;http_client_ip&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> ||<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是多级代理,那么取第一个ip为客户ip</span></span><br><span class="line">        <span class="keyword">if</span> (ip != <span class="keyword">null</span> &amp;&amp; ip.contains(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            ip = ip.substring(ip.lastIndexOf(<span class="string">&quot;,&quot;</span>) + <span class="number">1</span>, ip.length()).trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOsAndBrowserInfo</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        String userAgent = request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">        String user = userAgent.toLowerCase();</span><br><span class="line"></span><br><span class="line">        String os = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String browser = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================OS Info=======================</span></span><br><span class="line">        <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;windows&quot;</span>)) &#123;</span><br><span class="line">            os = <span class="string">&quot;Windows&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userAgent.toLowerCase().contains(<span class="string">&quot;mac&quot;</span>)) &#123;</span><br><span class="line">            os = <span class="string">&quot;Mac&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userAgent.toLowerCase().contains(<span class="string">&quot;x11&quot;</span>)) &#123;</span><br><span class="line">            os = <span class="string">&quot;Unix&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userAgent.toLowerCase().contains(<span class="string">&quot;android&quot;</span>)) &#123;</span><br><span class="line">            os = <span class="string">&quot;Android&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(userAgent.toLowerCase().contains(<span class="string">&quot;iphone&quot;</span>)) &#123;</span><br><span class="line">            os = <span class="string">&quot;IPhone&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            os = <span class="string">&quot;UnKnown, More-Info: &quot;</span>+userAgent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//===============Browser===========================</span></span><br><span class="line">        <span class="keyword">if</span> (user.contains(<span class="string">&quot;edge&quot;</span>)) &#123;</span><br><span class="line">            browser=(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Edge&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.contains(<span class="string">&quot;msie&quot;</span>)) &#123;</span><br><span class="line">            String substring=userAgent.substring(userAgent.indexOf(<span class="string">&quot;MSIE&quot;</span>)).split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            browser=substring.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>].replace(<span class="string">&quot;MSIE&quot;</span>, <span class="string">&quot;IE&quot;</span>)+<span class="string">&quot;-&quot;</span>+substring.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.contains(<span class="string">&quot;safari&quot;</span>) &amp;&amp; user.contains(<span class="string">&quot;version&quot;</span>)) &#123;</span><br><span class="line">            browser=(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Safari&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                    + <span class="string">&quot;-&quot;</span> +(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Version&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).split(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( user.contains(<span class="string">&quot;opr&quot;</span>) || user.contains(<span class="string">&quot;opera&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(user.contains(<span class="string">&quot;opera&quot;</span>))&#123;</span><br><span class="line">                browser=(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Opera&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                        +<span class="string">&quot;-&quot;</span>+(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Version&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).split(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(user.contains(<span class="string">&quot;opr&quot;</span>))&#123;</span><br><span class="line">                browser=((userAgent.substring(userAgent.indexOf(<span class="string">&quot;OPR&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line">                        .replace(<span class="string">&quot;OPR&quot;</span>, <span class="string">&quot;Opera&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.contains(<span class="string">&quot;chrome&quot;</span>)) &#123;</span><br><span class="line">            browser=(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Chrome&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((user.contains(<span class="string">&quot;mozilla/7.0&quot;</span>)) || (user.contains(<span class="string">&quot;netscape6&quot;</span>))  ||</span><br><span class="line">                (user.contains(<span class="string">&quot;mozilla/4.7&quot;</span>)) || (user.contains(<span class="string">&quot;mozilla/4.78&quot;</span>)) ||</span><br><span class="line">                (user.contains(<span class="string">&quot;mozilla/4.08&quot;</span>)) || (user.contains(<span class="string">&quot;mozilla/3&quot;</span>)) ) &#123;</span><br><span class="line">            browser = <span class="string">&quot;Netscape-?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.contains(<span class="string">&quot;firefox&quot;</span>)) &#123;</span><br><span class="line">            browser=(userAgent.substring(userAgent.indexOf(<span class="string">&quot;Firefox&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(user.contains(<span class="string">&quot;rv&quot;</span>)) &#123;</span><br><span class="line">            String IEVersion = (userAgent.substring(userAgent.indexOf(<span class="string">&quot;rv&quot;</span>)).split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]).replace(<span class="string">&quot;rv:&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            browser=<span class="string">&quot;IE&quot;</span> + IEVersion.substring(<span class="number">0</span>,IEVersion.length() - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            browser = <span class="string">&quot;UnKnown, More-Info: &quot;</span>+userAgent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> os +<span class="string">&quot;-&quot;</span>+ browser ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequestAttributes().getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletResponse <span class="title">getResponse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequestAttributes().getResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequest().getSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServletRequestAttributes <span class="title">getRequestAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">return</span> (ServletRequestAttributes) attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🧇<a href="https://github.com/sunnyws/spring-boot-demo/tree/master/spring-boot-log">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(六) Gateway 网关</title>
      <link href="posts/f8ec904c/"/>
      <url>posts/f8ec904c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-六-Gateway-网关"><a href="#微服务实战-六-Gateway-网关" class="headerlink" title="微服务实战(六) Gateway 网关"></a>微服务实战(六) Gateway 网关</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在微服务众多的服务的治理过程中，服务网关的作用在微服务框架中可以提供<code>统一入口</code>、<code>鉴权校验</code>、<code>动态路由</code>、<code>降低耦合度</code>的功能，关于springcloud的网关有三个，分别是zuul、zuul2和gateway，其中zuul/zuul2是Netflix公司开发的，但是因为zuul的性能不够好，zuul2的开发内部有歧义，所以springcloud便自研了一套网关——gateway。</p><p>Spring Cloud Gateway 作为 Spring Cloud 生态系中的网关，其目标是替代 Netflix Zuul，它不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全、监控/埋点和限流等。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>Route</p><p>Route 是网关的基础元素，由 ID、目标 URI、断言、过滤器组成。当请求到达网关时，由 Gateway Handler Mapping 通过断言进行路由匹配（Mapping），当断言为真时，匹配到路由。</p></li><li><p>Predicate</p><p>Predicate 是 <a href="http://c.biancheng.net/java/">Java</a> 8 中提供的一个函数。输入类型是 Spring Framework ServerWebExchange。它允许开发人员匹配来自 HTTP 的请求，例如请求头或者请求参数。简单来说它就是匹配条件。</p></li><li><p>Filter</p><p>Filter 是 Gateway 中的过滤器，可以在请求发出前后进行一些业务上的处理。</p></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/gateway1.png"></p><ol><li>客户端向Spring Cloud Gateway发出请求,然后在<code>Gateway Handler Mapping</code>中找到与请求相匹配的路由，将其发送到<code>Gateway web hander</code></li><li>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前( “pre” )或之后( “post” )执行业务逻辑。</li><li>Filter在”pre” 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等,在”post”类型的过滤器中可以做响应内容、响应头的修改,日志的输出，流量监控等有着非常重要的作用。</li></ol><h3 id="Gateway-Nacos-实现动态路由"><a href="#Gateway-Nacos-实现动态路由" class="headerlink" title="Gateway+Nacos 实现动态路由"></a>Gateway+Nacos 实现动态路由</h3><h4 id="添加POM"><a href="#添加POM" class="headerlink" title="添加POM"></a><strong>添加POM</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a><strong>添加配置</strong></h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-gateway</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">serverAddr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">    <span class="attr">dataId:</span> <span class="string">dynamic-route</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h4 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a><strong>添加配置类</strong></h4><ul><li>Nacos配置类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;gateway.nacos&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serverAddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String group = <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dataId = <span class="string">&quot;dynamic-route&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRouteList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;RouteDefinition&gt; routes;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从Nacos上初始化路由并动态监听</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicRouteNacosConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NacosProperties nacosProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.put(<span class="string">&quot;serverAddr&quot;</span>, nacosProperties.getServerAddr());</span><br><span class="line">            properties.put(<span class="string">&quot;namespace&quot;</span>, nacosProperties.getNamespace());</span><br><span class="line">            ConfigService configService = NacosFactory.createConfigService(properties);</span><br><span class="line">            String content = configService.getConfig(nacosProperties.getDataId(), nacosProperties.getGroup(), nacosProperties.getTimeout());</span><br><span class="line">            log.info(<span class="string">&quot;初始化网关路由开始&quot;</span>);</span><br><span class="line">            updateRoute(content);</span><br><span class="line">            log.info(<span class="string">&quot;初始化网关路由完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开户监听，实现动态</span></span><br><span class="line">            configService.addListener(nacosProperties.getDataId(), nacosProperties.getGroup(), <span class="keyword">new</span> Listener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">&quot;更新网关路由开始&quot;</span>);</span><br><span class="line">                    updateRoute(configInfo);</span><br><span class="line">                    log.info(<span class="string">&quot;更新网关路由完成&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;加载路由出错：&#123;&#125;&quot;</span>, e.getErrMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>: 更新路由</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateRoute</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        GatewayRouteList gatewayRouteList = yaml.loadAs(content, GatewayRouteList.class);</span><br><span class="line">        gatewayRouteList.getRoutes().forEach(route -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;加载路由：&#123;&#125;,&#123;&#125;&quot;</span>, route.getId(), route);</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(route)).subscribe();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加跨域配置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">// 允许cookies跨域</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// #允许访问的头信息,*表示全部</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了</span></span><br><span class="line">        config.setMaxAge(<span class="number">18000L</span>);</span><br><span class="line">        <span class="comment">// 允许提交请求的方法类型，*表示全部允许</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;OPTIONS&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;HEAD&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;GET&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;PUT&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;POST&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;DELETE&quot;);</span></span><br><span class="line"><span class="comment">//        config.addAllowedMethod(&quot;PATCH&quot;);</span></span><br><span class="line"></span><br><span class="line">        org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource source =</span><br><span class="line">                <span class="keyword">new</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>启动类添加<code>@EnableDiscoveryClient</code>允许注册到Nacos</p></li><li><p>启动类添加<code>@EnableConfigurationProperties</code>注入Nacos配置</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(NacosProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Nacos添加配置"><a href="#Nacos添加配置" class="headerlink" title="Nacos添加配置"></a><strong>Nacos添加配置</strong></h4><ul><li>根据Nacos配置及需求添加配置</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/gateway2.png"></p><blockquote><p>这只是gateway的基本使用，也可结合前面介绍的sentinel和ribbon实现负载均衡和限流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Redis</title>
      <link href="posts/9d3a5b2a/"/>
      <url>posts/9d3a5b2a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Centos安装Redis"><a href="#Centos安装Redis" class="headerlink" title="Centos安装Redis"></a>Centos安装Redis</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">若没有安装包，可以通过下面命令下载安装包</span>    </span><br><span class="line">cd /sunny/packages    </span><br><span class="line"><span class="meta">#</span><span class="bash">下载安装包</span>    </span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.9.tar.gz                  </span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /sunny/packages  </span><br><span class="line"><span class="meta">#</span><span class="bash">解压安装包</span>  </span><br><span class="line">tar -zxvf /sunny/packages/redis-5.0.9.tar.gz     </span><br><span class="line">cd   /sunny/packages/redis-5.0.9/     </span><br><span class="line"><span class="meta">#</span><span class="bash">编译 需要gcc</span></span><br><span class="line">make     </span><br><span class="line">cd ./src  mkdir -p /sunny/software/redis  </span><br><span class="line"><span class="meta">#</span><span class="bash">安装 指定安装目录</span>  </span><br><span class="line">make install PREFIX=/sunny/software/redis  </span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> cd ..  </span><br><span class="line"> cp ./redis.conf /sunny/software/redis/     </span><br><span class="line"> cd /sunny/software/redis/     </span><br><span class="line"> vim ./redis.conf  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">daemonize no 改成 守护进程启动 默认no</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash">设置密码 yourpassword 设置你的密码</span>  </span><br><span class="line">requirepass &lt;password&gt;  </span><br><span class="line"><span class="meta">#</span><span class="bash">本地回环地址 注释该行，任意外网可访问。生产环境建议取消注释</span></span><br><span class="line">bind 127.0.0.1   </span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">/sunny/software/redis/bin/redis-server  /sunny/software/redis/redis.conf     </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Mysql8</title>
      <link href="posts/6417fd23/"/>
      <url>posts/6417fd23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Centos安装Mysql8"><a href="#Centos安装Mysql8" class="headerlink" title="Centos安装Mysql8"></a>Centos安装Mysql8</h2><h3 id="卸载mariadb"><a href="#卸载mariadb" class="headerlink" title="卸载mariadb"></a>卸载mariadb</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看是否安装mariadb</span></span><br><span class="line">rpm -qa|grep mariadb</span><br><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">rpm -qa|grep mariadb|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录</span></span><br><span class="line">mkdir -p  /sunnyws/&#123;packages,software&#125;</span><br><span class="line"></span><br><span class="line">cd /sunnyws/packages/</span><br><span class="line"><span class="meta">#</span><span class="bash">下载安装包</span></span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">mkdir ./mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">解压安装包</span></span><br><span class="line">tar -xvf ./mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar -C ./mysql</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">rpm -ivh ./*.rpm --nodeps --force</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置   mysql5.7后  初始化的数据库需要与配置文件lower_case_table_names一致  默认为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">需要忽略大小写时  需在初始化前 添加---中内容</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">-----</span><br><span class="line"><span class="meta">#</span><span class="bash">在[mysqld]下面随便增加一行</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化数据库</span></span><br><span class="line">/usr/sbin/mysqld --initialize --user=mysql --lower-case-table-names=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">授权</span></span><br><span class="line">chown mysql:mysql /var/lib/mysql -R</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span>  </span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启</span></span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看默认密码</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/mysqld.log | grep password </span><br><span class="line"></span><br><span class="line"><span class="comment">#输入默认密码登录</span></span><br><span class="line">mysql -uroot -p </span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">use mysql;</span><br><span class="line"><span class="comment">#授权远程登录</span></span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合xxl-job</title>
      <link href="posts/6efdf379/"/>
      <url>posts/6efdf379/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="SpringBoot整合xxl-job"><a href="#SpringBoot整合xxl-job" class="headerlink" title="SpringBoot整合xxl-job"></a>SpringBoot整合xxl-job</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>XXL-JOB是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><h3 id="Clone-项目"><a href="#Clone-项目" class="headerlink" title="Clone 项目"></a>Clone 项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git  clone https://github.com/xuxueli/xxl-job.git</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>执行项目中的sql</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200915172746468.png#pic_center" alt="在这里插入图片描述"></p><h3 id="运行xxl-job-admin"><a href="#运行xxl-job-admin" class="headerlink" title="运行xxl-job-admin"></a>运行xxl-job-admin</h3><p><strong>修改xxl-job-admin下application.properties中相关配置</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 调度中心JDBC链接：链接地址请保持和 2.1章节 所创建的调度数据库的地址一致</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root_pwd</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">### 报警邮箱</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.port</span>=<span class="string">25</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line"><span class="comment">### 调度中心通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="meta">xxl.job.accessToken</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 调度中心国际化配置 [必填]： 默认为 &quot;zh_CN&quot;/中文简体, 可选范围为 &quot;zh_CN&quot;/中文简体, &quot;zh_TC&quot;/中文繁体 and &quot;en&quot;/英文；</span></span><br><span class="line"><span class="meta">xxl.job.i18n</span>=<span class="string">zh_CN</span></span><br><span class="line"><span class="comment">## 调度线程池最大线程配置【必填】</span></span><br><span class="line"><span class="meta">xxl.job.triggerpool.fast.max</span>=<span class="string">200</span></span><br><span class="line"><span class="meta">xxl.job.triggerpool.slow.max</span>=<span class="string">100</span></span><br><span class="line"><span class="comment">### 调度中心日志表数据保存天数 [必填]：过期日志自动清理；限制大于等于7时生效，否则, 如-1，关闭自动清理功能；</span></span><br><span class="line"><span class="meta">xxl.job.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><p><strong>打包运行</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar xxl-job-admin-2.2.1-SNAPSHOT.jar &gt; ./logs/xxl-job-admin.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200915172802724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MDE3NDQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--xxl_job核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--集成springmvc框架并实现自动配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="comment">### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span><br><span class="line">      <span class="attr">addressees:</span> <span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span><br><span class="line">      <span class="attr">ip:</span></span><br><span class="line">      <span class="comment">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">      <span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">xxl-job-executor-sample</span></span><br><span class="line">      <span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line">      <span class="attr">logpath:</span> <span class="string">./logs</span></span><br><span class="line">      <span class="comment">### 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line">      <span class="attr">accessToken:</span></span><br><span class="line">      <span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlAdminProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。 执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String addresses = <span class="string">&quot;http://127.0.0.1:8080/xxl-job-admin&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlExecutorProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String appname = <span class="string">&quot;xxl-job-executor&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址 从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP ，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和</span></span><br><span class="line"><span class="comment">    * &quot;调度中心请求并触发任务&quot;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Integer port = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String logPath = <span class="string">&quot;logs/applogs/xxl-job/jobhandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行器日志保存天数 [选填] ：值大于3时生效，启用执行器Log文件定期清理功能，否则不生效；</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Integer logRetentionDays = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xxl.job&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlJobProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">   <span class="keyword">private</span> XxlAdminProperties admin = <span class="keyword">new</span> XxlAdminProperties();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">   <span class="keyword">private</span> XxlExecutorProperties executor = <span class="keyword">new</span> XxlExecutorProperties();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(XxlJobProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxlJobAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> XxlJobSpringExecutor <span class="title">xxlJobSpringExecutor</span><span class="params">(XxlJobProperties xxlJobProperties)</span> </span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">      XxlJobSpringExecutor xxlJobSpringExecutor = <span class="keyword">new</span> XxlJobSpringExecutor();</span><br><span class="line">      xxlJobSpringExecutor.setAdminAddresses(xxlJobProperties.getAdmin().getAddresses());</span><br><span class="line">      XxlExecutorProperties executorProperties = xxlJobProperties.getExecutor();</span><br><span class="line">      xxlJobSpringExecutor.setAppname(executorProperties.getAppname());</span><br><span class="line">      xxlJobSpringExecutor.setIp(executorProperties.getIp());</span><br><span class="line">      xxlJobSpringExecutor.setPort(executorProperties.getPort());</span><br><span class="line">      xxlJobSpringExecutor.setAccessToken(executorProperties.getAccessToken());</span><br><span class="line">      xxlJobSpringExecutor.setLogPath(executorProperties.getLogPath());</span><br><span class="line">      xxlJobSpringExecutor.setLogRetentionDays(executorProperties.getLogRetentionDays());</span><br><span class="line">      xxlJobSpringExecutor.setAddress(executorProperties.getAddress());</span><br><span class="line">      <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(&#123; XxlJobAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableXxlJob &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableXxlJob</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JobApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleXxlJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、简单任务示例（Bean模式）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@XxlJob(&quot;demoJobHandler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">demoJobHandler</span><span class="params">(String param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XxlJobLogger.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;调度成功！&#123;&#125;&quot;</span>,param);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            XxlJobLogger.log(<span class="string">&quot;beat at:&quot;</span> + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ReturnT.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建执行器</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020091517283010.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MDE3NDQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>创建任务</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200915173002385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MDE3NDQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200915173026792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MDE3NDQ4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200915173035216.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring缓存@Cache整合Redis</title>
      <link href="posts/bdcda0c6/"/>
      <url>posts/bdcda0c6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Spring缓存-Cache整合Redis"><a href="#Spring缓存-Cache整合Redis" class="headerlink" title="Spring缓存@Cache整合Redis"></a>Spring缓存@Cache整合Redis</h1><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>@Cacheable</code>  针对方法配置，能够根据方法的请求参数对其结果进行缓存（<strong>查找缓存 - 有就返回 -没有就执行方法体 - 将结果缓存起来</strong>）</p><table><thead><tr><th>Param</th><th>Describe</th><th>Examples</th></tr></thead><tbody><tr><td>value</td><td>缓存的名称（必填）</td><td>@Cacheable(value = CacheConstant.DICT_CACHE）</td></tr><tr><td>key</td><td>缓存的 key，可以为空，如果不指定，则缺省按照方法的所有参数进行组合</td><td>@Cacheable(value = CacheConstant.DICT_CACHE,key = “#code+’:’+#key”)</td></tr><tr><td>condition</td><td>缓存的条件，可以为空。</td><td>@Cacheable(value= CacheConstant.DICT_CACHE,condition=”#userName.length()&gt;2”)</td></tr></tbody></table><ul><li><p><code>@CachePut</code>  根据方法的请求参数对其结果进行缓存，（<strong>执行方法体 - 将结果缓存起来，常用来更新缓存</strong>）参数与<code>@Cacheable</code>相同</p></li><li><p><code>@CacheEvict</code> 针对方法配置，清除缓存</p></li></ul><table><thead><tr><th align="left">Param</th><th align="left">Describe</th><th align="left">Examples</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">缓存的名称（必填）</td><td align="left">@CacheEvict(value= CacheConstant.DICT_CACHE)</td></tr><tr><td align="left">key</td><td align="left">缓存的 key，可以为空，如果不指定，则缺省按照方法的所有参数进行组合</td><td align="left">@CacheEvict(value = CacheConstant.DICT_CACHE,key = “#code+’:’+#key”)</td></tr><tr><td align="left">condition</td><td align="left">缓存的条件，可以为空。</td><td align="left">@CacheEvict(value= CacheConstant.DICT_CACHE,condition=”#userName.length()&gt;2”)</td></tr><tr><td align="left">allEntries</td><td align="left">是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存</td><td align="left">@CachEvict(value= CacheConstant.DICT_CACHE,allEntries=true)</td></tr><tr><td align="left">beforeInvocation</td><td align="left">是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存</td><td align="left">@CachEvict(value= CacheConstant.DICT_CACHE，beforeInvocation=true)</td></tr></tbody></table><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="定义缓存类型"><a href="#定义缓存类型" class="headerlink" title="定义缓存类型"></a>定义缓存类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 字典缓存key */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DICT_CACHE = <span class="string">&quot;cache:dict&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* test缓存key */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEST_CACHE = <span class="string">&quot;cache:test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RedisTemplate配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lettuceConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置redisTemplate</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        RedisSerializer&lt;?&gt; stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        <span class="comment">// value序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// Hash key序列化</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);</span><br><span class="line">        <span class="comment">// Hash value序列化</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存配置管理器</span></span><br><span class="line"><span class="comment">     * 设置<span class="doctag">@CacheEnable</span>注解  缓存使用Redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(LettuceConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                                                            .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                                                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; configMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/* 自定义配置cache:dict 缓存默认有效期 5小时） 可以缓存空值*/</span></span><br><span class="line">        configMap.put(CacheConstant.DICT_CACHE,redisCacheConfiguration.entryTtl(Duration.ofHours(<span class="number">5</span>)));</span><br><span class="line">        <span class="comment">/* 自定义配置test:demn 缓存默认有效期 4小时） 不可以缓存空值*/</span></span><br><span class="line">        configMap.put(CacheConstant.TEST_CACHE,redisCacheConfiguration.entryTtl(Duration.ofHours(<span class="number">4</span>)).disableCachingNullValues());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(RedisCacheWriter.lockingRedisCacheWriter(factory))</span><br><span class="line">                                                            .cacheDefaults(redisCacheConfiguration.entryTtl(Duration.ofHours(<span class="number">6</span>)))<span class="comment">//未在configMap中配置，默认过期时间6小时</span></span><br><span class="line">                                                            .withInitialCacheConfigurations(configMap)</span><br><span class="line">                                                            .transactionAware().build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(value = CacheConstant.DICT_CACHE,key = &quot;#code+&#x27;:&#x27;+#key&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryDictTextByKey</span><span class="params">(String code, String key)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;无缓存时调用&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dictMapper.queryDictTextByKey(code,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Rocketmq</title>
      <link href="posts/47b6e78d/"/>
      <url>posts/47b6e78d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="RocketMq（二）-Centos安装Rocketmq-单机"><a href="#RocketMq（二）-Centos安装Rocketmq-单机" class="headerlink" title="RocketMq（二）-Centos安装Rocketmq(单机)"></a>RocketMq（二）-Centos安装Rocketmq(单机)</h2><h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载资源包</span></span><br><span class="line">wget  https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压资源包</span></span><br><span class="line">tar -zxvf ./apache-maven-3.6.3-bin.tar.gz -C /sunnyws/software/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置环境变量  在/etc/profile添加---中内容</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">----</span><br><span class="line"><span class="meta">#</span><span class="bash">mvn</span></span><br><span class="line">export MAVEN_HOME=/sunnyws/software/apache-maven-3.6.3</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH</span><br><span class="line">----</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">mvn -version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更高maven源  在mirrors节点下 添加----中内容</span></span><br><span class="line">vim /sunnyws/software/apache-maven-3.6.3/conf/settings.xml</span><br><span class="line">------</span><br><span class="line">&lt;mirror&gt;  </span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;/id&gt;  </span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    </span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;/name&gt;  </span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;  </span><br><span class="line">&lt;/mirror&gt;  </span><br><span class="line">------</span><br></pre></td></tr></table></figure><h3 id="安装RocketMq"><a href="#安装RocketMq" class="headerlink" title="安装RocketMq"></a>安装RocketMq</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载资源包</span></span><br><span class="line">wget https://github.com/apache/rocketmq/archive/rocketmq-all-4.2.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压资源包</span></span><br><span class="line">tar -zxvf ./rocketmq-all-4.2.0.tar.gz -C /sunnyws/software/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入rocketmq路径下</span></span><br><span class="line">cd /sunnyws/software/rocketmq-rocketmq-all-4.2.0/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译项目</span></span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可能会提示内存不足  可以修改一下启动变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rocketMq内存要求较大 默认8g</span></span><br><span class="line"><span class="meta">#</span><span class="bash">跳转目录</span></span><br><span class="line">cd /sunnyws/software/rocketmq-rocketmq-all-4.2.0/distribution/target/apache-rocketmq/bin</span><br><span class="line"></span><br><span class="line">vi runbroker.sh/</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn256m&quot;</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:MaxDirectMemorySize=256m&quot;</span><br><span class="line"></span><br><span class="line">vi runserver.sh</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建日志目录</span></span><br><span class="line">mkdir -p /sunnyws/software/logs/rocketmq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置 添加ip</span></span><br><span class="line">vim ../conf/broker.conf</span><br><span class="line">----</span><br><span class="line">brokerIP1=xx.xx.xx.xx</span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动nameserver</span></span><br><span class="line">nohup sh mqnamesrv &gt; /sunnyws/software/logs/rocketmq/mqnamesrv.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动broker</span></span><br><span class="line">nohup sh mqbroker -n localhost:9876 -c ../conf/broker.conf &gt; /sunnyws/software/logs/rocketmq/broker.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装可视化"><a href="#安装可视化" class="headerlink" title="安装可视化"></a>安装可视化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /sunnyws/packages/</span><br><span class="line"><span class="meta">#</span><span class="bash">下载资源包  下载很慢 可以本地下载完 在上传</span></span><br><span class="line">wget https://codeload.github.com/apache/rocketmq-externals/zip/master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装unzip</span></span><br><span class="line">yum install -y unzip zip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压文件</span></span><br><span class="line">unzip ./rocketmq-externals-master.zip -d /sunnyws/software/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">跳转目录</span></span><br><span class="line">cd /sunnyws/software/rocketmq-externals-master/rocketmq-console/src/main/resources/</span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置</span></span><br><span class="line">vim application.properties</span><br><span class="line">-----</span><br><span class="line">rocketmq.config.namesrvAddr=xx.xx.xx.xx:9876</span><br><span class="line">-----</span><br><span class="line"><span class="meta">#</span><span class="bash">跳转目录</span></span><br><span class="line">cd /sunnyws/software/rocketmq-externals-master/rocketmq-console/</span><br><span class="line"><span class="meta">#</span><span class="bash">编译项目</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line">cd ./target</span><br><span class="line"></span><br><span class="line">nohup java  -jar ./rocketmq-console-ng-2.0.0.jar &gt;&gt; /sunnyws/software/logs/rocketmq/ng.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Rocketmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合AOP</title>
      <link href="posts/6fccc6c0/"/>
      <url>posts/6fccc6c0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="SpringBoot整合AOP"><a href="#SpringBoot整合AOP" class="headerlink" title="SpringBoot整合AOP"></a>SpringBoot整合AOP</h2><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方 式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个 热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑 的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高 了开发的效率。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p><strong>定义切面</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br></pre></td></tr></table></figure><p><strong>定义切点</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于方法，切入点为com.sunnyws.dict.controller中的所有函数</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution( * com.sunnyws.dict.controller.*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">//对于注解,标注了@Log的所有方法</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.sunnyws.log.annotation.Log)&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>增强类型</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@before(前置通知)</span>              <span class="comment">//在方法开始执行前执行</span></span><br><span class="line"><span class="meta">@after(后置通知)</span>               <span class="comment">//在方法执行后执行</span></span><br><span class="line"><span class="meta">@afterReturning(返回后通知)</span>    <span class="comment">//在方法返回后执行</span></span><br><span class="line"><span class="meta">@afterThrowing(异常通知)</span>       <span class="comment">//在抛出异常时执行</span></span><br><span class="line"><span class="meta">@around(环绕通知)</span>              <span class="comment">//在方法执行前和执行后都会执行</span></span><br></pre></td></tr></table></figure><p><strong>自定义注解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//定义被它所注解的注解保留多久</span></span><br><span class="line"><span class="comment">//策略类型</span></span><br><span class="line">    SOURCE   <span class="comment">//注解只保留在源文件（.java），当Java文件编译成class文件的时候，注解被遗弃；被编译器忽略</span></span><br><span class="line">    CLASS    <span class="comment">//注解被保留到class文件(.class)，但jvm加载class文件时候被遗弃，这是默认的生命周期</span></span><br><span class="line">    RUNTIME  <span class="comment">//注解不仅被保存到class文件中(字节码)，jvm加载class文件之后，仍然存在</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>  <span class="comment">//定义Annotation所修饰的对象范围</span></span><br><span class="line">    TYPE      <span class="comment">//用于描述类、接口(包括注解类型) 或enum声明 Class, interface</span></span><br><span class="line">    FIELD     <span class="comment">//用于描述域</span></span><br><span class="line">    METHOD    <span class="comment">//用于描述方法</span></span><br><span class="line">    PARAMETER <span class="comment">//用于描述参数</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--集成springmvc框架并实现自动配置 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--aop--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><h5 id="普通通知"><a href="#普通通知" class="headerlink" title="普通通知"></a>普通通知</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点 切入点为com.sunnyws.dict.controller中的所有函数</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution( * com.sunnyws.dict.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知, 在方法执行之前执行</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知, 在方法执行之后执行 。</span></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回通知, 在方法返回结果之后执行</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcut()&quot;, returning = &quot;returnObject&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object returnObject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知, 在方法抛出异常之后</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a><strong>环绕通知</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictAspect</span> </span>&#123;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//定义切点 切入点为com.sunnyws.dict.controller中的所有函数</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution( * com.sunnyws.dict.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, Log log)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">            Object result = pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><p><strong>定义注解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">title</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BusinessType <span class="title">businessType</span><span class="params">()</span> <span class="keyword">default</span> BusinessType.OTHER</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作人类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OperatorType <span class="title">operatorType</span><span class="params">()</span> <span class="keyword">default</span> OperatorType.MANAGE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存请求的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSaveRequestData</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictAspect</span> </span>&#123;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//定义切点,标注了@Log的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.sunnyws.log.annotation.Log)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, Log log)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">            Object result = pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(五) Seata 分布式事务</title>
      <link href="posts/7a1077b7/"/>
      <url>posts/7a1077b7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-五-Seata-分布式事务"><a href="#微服务实战-五-Seata-分布式事务" class="headerlink" title="微服务实战(五) Seata 分布式事务"></a>微服务实战(五) Seata 分布式事务</h2><p>官方文档：<a href="https://seata.io/zh-cn/">https://seata.io/zh-cn/</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><p>Seata 是阿里开源的分布式事务框架，属于二阶段提交模式。</p><h3 id="Seata术语"><a href="#Seata术语" class="headerlink" title="Seata术语"></a>Seata术语</h3><ul><li><p>TC (Transaction Coordinator) - 事务协调者</p><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p></li><li><p>TM (Transaction Manager) - 事务管理器</p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p></li><li><p>RM (Resource Manager) - 资源管理器</p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p></li></ul><h3 id="AT工作模式"><a href="#AT工作模式" class="headerlink" title="AT工作模式"></a>AT工作模式</h3><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a><strong>图解</strong></h4><blockquote><p>单体应用架构</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata1.png"></p><blockquote><p>微服务应用架构</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata2.png"></p><blockquote><p>Seate处理事务流程</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata3.png"></p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a><strong>工作机制</strong></h4><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><blockquote><p><strong>一阶段</strong>(1~4)</p><p><strong>二阶段-回滚</strong>(5~7)</p><p><strong>二阶段-提交</strong>(8)</p></blockquote><ol><li>Business 是业务入口，在程序中会通过<strong>注解</strong>(<code>@GlobalTransactional</code>)来说明他是一个<strong>全局事务</strong>，这时他的角色为 TM（事务管理者）</li><li>Business 会请求 TC（事务协调器，一个独立运行的服务），说明自己要开启一个全局事务，TC 会生成一个全局事务ID（XID），并返回给 Business</li><li>Business 得到 XID 后，开始调用微服务，例如调用 Storage。</li><li>Storage 会收到 XID，知道自己的事务属于这个全局事务。Storage 执行自己的业务逻辑，执行业务 SQL，并把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 <code>UNDO_LOG</code> 表中。向 TC 注册分支， 申请<strong>全局锁</strong>，拿到锁后提交本地事务，将本地事务提交的结果上报给 TC。 Storage 的角色是 RM（资源管理者），管理分支事务处理的资源。</li><li>如果所有分支都没有报错，TM向TC发起全局事务提交请求，TC再向RM发送提交请求。如果存在分支报错，TM向TC发起全局事务回滚请求，TC在向个RM发送分支事务回滚请求，</li><li>RM收到TC 的分支回滚请求，开启一个本地事务，通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。如果回滚日志存在：将后置镜像与当前数据对比，如果数据一致表示可以回滚（没有发生脏写），通过回滚日志的前置镜像生成回滚SQL， 执行数据回滚。如果回滚日志不存在：插入一条状态为全局事物已完成（数据库的值是: 1 ）的回滚日志， 避免另一个线程提交成功。提交本地事务，并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li><li>如果存在分支回滚失败，TC会重试发起分支回滚请求。当分支都回滚成功，TC向分支发送提交请求。</li><li>RM收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。 异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol><h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><ul><li>这里服务端存储模式采用的为db模式，服务注册和配置中心为Nacos</li></ul><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a><strong>下载安装包</strong></h4><p>下载地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压到指定文件夹</span></span><br><span class="line">tar -zxvf ./seata-server-1.3.0.tar.gz -C /sunny/software/</span><br></pre></td></tr></table></figure><h4 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a><strong>下载资源</strong></h4><p>下载地址：<a href="https://github.com/seata/seata/tree/1.3.0/script">https://github.com/seata/seata/tree/1.3.0/script</a></p><p><strong>目录结构</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">存放client端sql脚本 (包含 undo_log表) ，参数配置</span></span><br><span class="line">client</span><br><span class="line"><span class="meta">#</span><span class="bash">各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</span></span><br><span class="line">config-center</span><br><span class="line"><span class="meta">#</span><span class="bash">server端数据库脚本 (包含 lock_table、branch_table 与 global_table) 及各个容器配置</span></span><br><span class="line">server</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>client   </p><p>需要客户端 添加undo_log表</p></li><li><p>config-center</p><p>将<code>config-center</code>目录下的<code>config.txt</code> 放到seata安装目录下,<code>nacos-config.sh</code>放到seata bin目录下</p></li><li><p>server</p><p>Mysql创建数据库seata,执行server目录下的sql脚本，创建表lock_table、branch_table 与 global_table。</p></li></ul></blockquote><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a><strong>修改配置</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /sunny/software/seata/conf/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里采用的Nacos的服务注册与用户中心  所以不需要修改file.conf  只需要修改registry.conf  填写Nacos相关配置</span></span><br><span class="line"></span><br><span class="line">vim ./registry.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改注册配置</span></span><br><span class="line">registry&#123;</span><br><span class="line"><span class="meta"> #</span><span class="bash"> file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line"> type = &quot;nacos&quot;</span><br><span class="line"> </span><br><span class="line"> nacos &#123;</span><br><span class="line">     application = &quot;seata-server&quot;</span><br><span class="line">     serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">     group = &quot;SEATA_GROUP&quot;</span><br><span class="line">     namespace = &quot;e90d261b-9c05-4bcb-b99f-b419d952737a&quot;</span><br><span class="line">     cluster = &quot;default&quot;</span><br><span class="line">     username = &quot;nacos&quot;</span><br><span class="line">     password = &quot;nacos&quot;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    namespace = &quot;e90d261b-9c05-4bcb-b99f-b419d952737a&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="推送配置到Nacos"><a href="#推送配置到Nacos" class="headerlink" title="推送配置到Nacos"></a><strong>推送配置到Nacos</strong></h4><ul><li>推送配置到Nacos，需要前面下载资源中config-center的<code>config.txt</code>和<code>nacos-config.sh</code></li></ul><p><strong>修改config.txt</strong></p><ul><li>service.vgroupMapping.my_test_tx_group：my_test_tx_group为seata客户端事务组名称,需要与客户端配置相同，多个则配置多行</li><li>service.default.grouplist ：seata服务端地址</li><li>store.mode=file：默认file ，需要修改为db</li><li>store.db.url=..:数据库地址</li><li>store.db.user=username：数据库用户名</li><li>store.db.password=password：数据库密码</li><li>store.db.driverClassName：mysql8.0 需要改为com.mysql.cj.jdbc.Driver</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">transport.type</span>=<span class="string">TCP</span></span><br><span class="line"><span class="meta">transport.server</span>=<span class="string">NIO</span></span><br><span class="line"><span class="meta">transport.heartbeat</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">transport.enableClientBatchSendRequest</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">transport.threadFactory.bossThreadPrefix</span>=<span class="string">NettyBoss</span></span><br><span class="line"><span class="meta">transport.threadFactory.workerThreadPrefix</span>=<span class="string">NettyServerNIOWorker</span></span><br><span class="line"><span class="meta">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="string">NettyServerBizHandler</span></span><br><span class="line"><span class="meta">transport.threadFactory.shareBossWorker</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="string">NettyClientSelector</span></span><br><span class="line"><span class="meta">transport.threadFactory.clientSelectorThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="string">NettyClientWorkerThread</span></span><br><span class="line"><span class="meta">transport.threadFactory.bossThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">transport.threadFactory.workerThreadSize</span>=<span class="string">default</span></span><br><span class="line"><span class="meta">transport.shutdown.wait</span>=<span class="string">3</span></span><br><span class="line"><span class="meta">service.vgroupMapping.sunnyws-seata-order-group</span>=<span class="string">default</span></span><br><span class="line"><span class="meta">service.vgroupMapping.sunnyws-seata-storage-group</span>=<span class="string">default</span></span><br><span class="line"><span class="meta">service.default.grouplist</span>=<span class="string">172.16.220.50:8091</span></span><br><span class="line"><span class="meta">service.enableDegrade</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">service.disableGlobalTransaction</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.rm.asyncCommitBufferLimit</span>=<span class="string">10000</span></span><br><span class="line"><span class="meta">client.rm.lock.retryInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">client.rm.lock.retryTimes</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">client.rm.reportRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">client.rm.tableMetaCheckEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.rm.tableMetaCheckerInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">client.rm.sqlParserType</span>=<span class="string">druid</span></span><br><span class="line"><span class="meta">client.rm.reportSuccessEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.rm.sagaBranchRegisterEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.tm.commitRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">client.tm.rollbackRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">client.tm.defaultGlobalTransactionTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">client.tm.degradeCheck</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.tm.degradeCheckAllowTimes</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">client.tm.degradeCheckPeriod</span>=<span class="string">2000</span></span><br><span class="line"><span class="meta">store.mode</span>=<span class="string">file</span></span><br><span class="line"><span class="meta">store.publicKey</span>=<span class="string"></span></span><br><span class="line"><span class="meta">store.file.dir</span>=<span class="string">file_store/data</span></span><br><span class="line"><span class="meta">store.file.maxBranchSessionSize</span>=<span class="string">16384</span></span><br><span class="line"><span class="meta">store.file.maxGlobalSessionSize</span>=<span class="string">512</span></span><br><span class="line"><span class="meta">store.file.fileWriteBufferCacheSize</span>=<span class="string">16384</span></span><br><span class="line"><span class="meta">store.file.flushDiskMode</span>=<span class="string">async</span></span><br><span class="line"><span class="meta">store.file.sessionReloadReadSize</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="meta">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">store.db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">store.db.url</span>=<span class="string">jdbc:mysql://172.16.220.50:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="meta">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">store.db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="meta">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="meta">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="meta">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">store.redis.mode</span>=<span class="string">single</span></span><br><span class="line"><span class="meta">store.redis.single.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">store.redis.single.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">store.redis.maxConn</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">store.redis.minConn</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">store.redis.maxTotal</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">store.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">store.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">store.redis.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="meta">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">client.undo.dataValidation</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">client.undo.logSerialization</span>=<span class="string">jackson</span></span><br><span class="line"><span class="meta">client.undo.onlyCareUpdateColumns</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="meta">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="meta">client.undo.logTable</span>=<span class="string">undo_log</span></span><br><span class="line"><span class="meta">client.undo.compress.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">client.undo.compress.type</span>=<span class="string">zip</span></span><br><span class="line"><span class="meta">client.undo.compress.threshold</span>=<span class="string">64k</span></span><br><span class="line"><span class="meta">log.exceptionRate</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="meta">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="meta">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="meta">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="meta">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure><p><strong>推送配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-h -p 指定nacos的端口地址；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-g 指定配置的分组，注意，是配置的分组；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-t 指定命名空间id；</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">-u -w指定nacos的用户名和密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash">需要已经启动Nacos</span></span><br><span class="line">sh nacos-config.sh -h 127.0.0.1 -p 8848 -g SEATA_GROUP -t e90d261b-9c05-4bcb-b99f-b419d952737a -u nacos -w nacos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@localhost bin]# sh nacos-config.sh -h 127.0.0.1 -p 8848 -g SEATA_GROUP -t e90d261b-9c05-4bcb-b99f-b419d952737a -u nacos -w nacos</span><br><span class="line">set nacosAddr=127.0.0.1:8848</span><br><span class="line">set group=SEATA_GROUP</span><br><span class="line">Set transport.type=TCP successfully </span><br><span class="line">Set transport.server=NIO successfully </span><br><span class="line">Set transport.heartbeat=true successfully </span><br><span class="line">Set transport.enableClientBatchSendRequest=false successfully </span><br><span class="line">Set transport.threadFactory.bossThreadPrefix=NettyBoss successfully </span><br><span class="line">Set transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker successfully </span><br><span class="line">Set transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler successfully </span><br><span class="line">Set transport.threadFactory.shareBossWorker=false successfully </span><br><span class="line">Set transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector successfully </span><br><span class="line">Set transport.threadFactory.clientSelectorThreadSize=1 successfully </span><br><span class="line">Set transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread successfully </span><br><span class="line">Set transport.threadFactory.bossThreadSize=1 successfully </span><br><span class="line">Set transport.threadFactory.workerThreadSize=default successfully </span><br><span class="line">Set transport.shutdown.wait=3 successfully </span><br><span class="line">Set service.vgroupMapping.my_test_tx_group=default successfully </span><br><span class="line">Set service.default.grouplist=127.0.0.1:8091 successfully </span><br><span class="line">Set service.enableDegrade=false successfully </span><br></pre></td></tr></table></figure><h4 id="启动服务端-1"><a href="#启动服务端-1" class="headerlink" title="启动服务端"></a><strong>启动服务端</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-h: 注册到注册中心的ip</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p: Server rpc 监听端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-m: 全局事务会话信息存储模式，file、db、redis，优先读取启动参数 (Seata-Server 1.3及以上版本支持redis)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-n: Server node，多个Server时，需区分各自节点，用于生成不同区间的transactionId，以免冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-e: 多环境配置参考 http://seata.io/en-us/docs/ops/multi-configuration-isolation.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash">前台启动</span></span><br><span class="line">seata-server.sh -h 172.16.220.50 -p 8091 -m db -n 1 </span><br><span class="line"><span class="meta">#</span><span class="bash">后台启动</span></span><br><span class="line">nohup ./seata-server.sh -h 172.16.220.50 -p 8091 -m db -n 1 &gt; ./nohuo.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="业务系统集成Client"><a href="#业务系统集成Client" class="headerlink" title="业务系统集成Client"></a>业务系统集成Client</h3><ul><li>Nacos+seata</li></ul><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba seata --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入数据库进行测试</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a><strong>添加配置</strong></h4><ul><li>服务端service.vgroupMapping.XXX配置一般与application.name相同，也与客户端tx-service-group配置相同</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-seata-order</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://172.16.220.50:3306/seata_order?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone</span> <span class="string">=</span> <span class="string">GMT&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application-id:</span> <span class="string">$&#123;spring.application.name&#125;</span>  <span class="comment"># seata 应用编号，默认为 $&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">sunnyws-seata-order-group</span> <span class="comment"># seata 事务组编号，用于 TC 集群名</span></span><br><span class="line">  <span class="comment"># seata 服务配置项，对应 ServiceProperties 类</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">grouplist:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8091</span></span><br><span class="line">    <span class="comment"># 虚拟组和分组的映射, key一定要与 my_test_tx_group一致</span></span><br><span class="line">    <span class="attr">vgroupMapping:</span></span><br><span class="line">      <span class="attr">sunnyws-seata-order-group:</span> <span class="string">default</span></span><br><span class="line">    <span class="comment">#不禁用全局事务</span></span><br><span class="line">    <span class="attr">disable-global-transaction:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a><strong>添加注解</strong></h4><ul><li>业务上添加<code>@GlobalTransactional</code>注解</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h4><ul><li>sunnyws-seata-order 下订单</li><li>sunnyws-seata-storage 减库存</li></ul><ol><li>客户端配置都同上面相同</li><li>当通过feign调用storage 减库存后，抛出异常，查看是否回滚。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata4.png"></p><p>将本地<code>@Transactional</code>去除后，可以在异常抛出前看到<strong>订单</strong>和<strong>库存</strong>都已更新到数据库，并且客户端数据库<code>undo_log</code>表和seata服务端数据<code>global_table</code>表都生成了记录，xid也都相同。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata5.png"></p><p>当放开断点，抛出异常后，订单和库存也都回到之前的数据，undo_log和服务端的事务记录也被删除掉了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/seata6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="posts/24c94d92/"/>
      <url>posts/24c94d92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h1><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta">#</span><span class="bash">创建目录</span></span><br><span class="line">mkdir -p /software/redis/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>下载官方<a href="http://download.redis.io/redis-stable/redis.conf">redis.conf</a></li><li>将<code>redis.conf</code>  放到<code>/software/redis/conf/</code>下</li></ul></blockquote><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">69行|只接收来自于该IP地址的请求 生产环境再设置  开发环境可注释掉</span></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">222行|默认no  是否用守护线程的方式启动，与docker run -d 效果相同。（同时只能使用一个，这里使用-d）</span>  </span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">252行|指定日志记录级别：debug|verbose|notice|warning，默认为verbose，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">debug  用于开发和测试，记录信息较多，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">varbose 比debug稍简洁</span></span><br><span class="line"><span class="meta">#</span><span class="bash">notice  常用于生产环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash">warning 警告信息</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">786行|设置密码</span></span><br><span class="line">requirepass yourpassword</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">1059行|默认no   是否开启持久化</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line">docker run -p 6378:6379 --name redis --restart always -v/software/redis/conf/redis.conf:/etc/redis/redis.conf -v /software/redis/data:/data -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Mysql</title>
      <link href="posts/cacc85bf/"/>
      <url>posts/cacc85bf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Docker安装mysql"><a href="#Docker安装mysql" class="headerlink" title="Docker安装mysql"></a>Docker安装mysql</h1><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull  mysql:8.0</span><br></pre></td></tr></table></figure><h4 id="拉取配置文件，创建挂载目录"><a href="#拉取配置文件，创建挂载目录" class="headerlink" title="拉取配置文件，创建挂载目录"></a>拉取配置文件，创建挂载目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">普通启动  用于拉取配置文件</span></span><br><span class="line">docker run -itd -p 3306:3306 --name mysql  -e MYSQL_ROOT_PASSWORD=root  mysql:8.0</span><br><span class="line"><span class="meta">#</span><span class="bash">创建挂载目录</span></span><br><span class="line">mkdir -p /mysql/&#123;data,conf&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器id</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash">拉取配置文件  方便后面修改数据库配置</span></span><br><span class="line">docker cp 容器id:/etc/mysql/my.cnf /mysql/conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除普通启动的mysql8.0容器</span></span><br><span class="line">docker stop 容器id</span><br><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v /mysql/data:/var/lib/mysql  挂载数据库 数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v /mysql/conf/my.cnf:/etc/mysql/my.cnf   挂载数据库配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--lower_case_table_names=1   默认0   1为忽略大小写</span>  </span><br><span class="line">docker run -itd -p 3306:3306 --restart=always  --name mysql -v /mysql/data:/var/lib/mysql -v /mysql/conf/my.cnf:/etc/mysql/my.cnf -e MYSQL_ROOT_PASSWORD=root  mysql:8.0 --lower_case_table_names=1</span><br></pre></td></tr></table></figure><blockquote><ul><li>注：<br>mysql5.7版本之后,数据库lower_case_table_names必须与初始化data一致 。如果启动时没有指定，之后再修改配置，会启动报错。需要将/mysql/data/下数据清空后，才能启动成功 </li><li>生产环境 数据库部署不建议使用docker </li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="posts/b543ced0/"/>
      <url>posts/b543ced0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h3 id="何为RabbitMq"><a href="#何为RabbitMq" class="headerlink" title="何为RabbitMq?"></a>何为RabbitMq?</h3><p>RabbitMQ是一个实现了AMQP（Advanced Message Queuing Protocol）高级消息队列协议的消息队列服务，用Erlang语言。</p><h3 id="RabbitMq原理"><a href="#RabbitMq原理" class="headerlink" title="RabbitMq原理"></a>RabbitMq原理<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200322184923138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MDE3NDQ4,size_16,color_FFFFFF,t_70#align=left&display=inline&height=773&margin=%5Bobject%20Object%5D&originHeight=773&originWidth=2011&status=done&style=none&width=2011"></h3><ol><li><code>Provider</code>：消息的生产者</li><li><code>Exchange</code>：消息交换机</li><li><code>Binding</code>：绑定，将交换机与队列进行绑定</li><li><code>Queue</code>：即队列，用于存储消息</li><li><code>Consumer</code>：消息的消费者，如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者</li></ol><p><strong>简单来说，就是交换机与相应队列进行绑定，生产者生产消息并发送到对应的交换机中，再由交换机将消息转到到队列中，消费者在从订阅的队列中获取消息进行消费。</strong></p><h3 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h3><h4 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h4><p><strong>直连型交换机</strong>，根据消息携带的路由键将消息投递给对应队列。</p><p>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。<br>然后当一个消息携带着路由值为X（路由值需要<strong>完全匹配</strong>），这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p><h4 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h4><p><strong>扇型交换机</strong>，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。（消息转发速度较快一些）</p><h4 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h4><p><strong>主题交换机</strong>，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。(类似正则表达式，<strong>不需要完全匹配</strong>)</p><h3 id="安装RabbitMq"><a href="#安装RabbitMq" class="headerlink" title="安装RabbitMq"></a><a href="https://www.rabbitmq.com/download.html">安装RabbitMq</a></h3><p>Rabbit 安装需要搭建Erlang环境，采用docker安装较为简单</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull  rabbitmq:3-management</span><br><span class="line"><span class="meta">#</span><span class="bash">运行镜像  远程连接时阿里云服务器需要配置相应的安全组</span></span><br><span class="line">docker run -d  --name rabbit -p 15672:15672 -p 5672:5672  rabbitmq:3-management</span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器内部</span></span><br><span class="line">docker exec -it  849d3cbe9e0d  bash</span><br><span class="line"><span class="meta">#</span><span class="bash">添加用户rabbitmqctl add_user 账号 密码</span></span><br><span class="line">rabbitmqctl add_user root root</span><br><span class="line"><span class="meta">#</span><span class="bash">设置角色rabbitmqctl set_user_tags 账号 角色</span></span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予权限 使用户root具有默认（/）这个virtual host中所有资源的配置、写、读权限以便管理其中的资源</span></span><br><span class="line">rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合RabbitMq"><a href="#SpringBoot整合RabbitMq" class="headerlink" title="SpringBoot整合RabbitMq"></a>SpringBoot整合RabbitMq</h3><p><strong>导入maven依赖</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--rabbitmq--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-provider</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">*.*.*.*</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>以Direct Exchange为例</strong></p><p><strong>rabbitmq配置类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列 起名：TestDirectQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">TestDirectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;TestDirectQueue&quot;</span>,<span class="keyword">true</span>);  <span class="comment">//true 是否持久 会持久化到磁盘中 rabbitmq重启后消息会依然存在  但会影响性能。改为false时需先确定队列中没有之前设为true产生的消息，否则会报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Direct交换机 起名：TestDirectExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">TestDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;TestDirectExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(<span class="string">&quot;TestDirectRouting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;  <span class="comment">//使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * ? &quot;)</span><span class="comment">//每秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDirectMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String messageId = String.valueOf(UUID.randomUUID());</span><br><span class="line">        String messageData = <span class="string">&quot;这是个消息&quot;</span>;</span><br><span class="line">        String createTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;messageId&quot;</span>,messageId);</span><br><span class="line">        map.put(<span class="string">&quot;messageData&quot;</span>,messageData);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>,createTime);</span><br><span class="line">        <span class="comment">//将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange</span></span><br><span class="line">        <span class="comment">//交换机会根据绑定键值（TestDirectRouting)转发到相应的队列中</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;TestDirectExchange&quot;</span>, <span class="string">&quot;TestDirectRouting&quot;</span>, map);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息消息&quot;</span>+map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;TestDirectQueue&quot;)</span><span class="comment">//监听的队列名称 TestDirectQueue</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//每次睡眠1秒</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;DirectReceiver消费者收到消息  : &quot;</span> + testMessage.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何保证RabbitMq中消息不会丢失"><a href="#如何保证RabbitMq中消息不会丢失" class="headerlink" title="如何保证RabbitMq中消息不会丢失"></a>如何保证RabbitMq中消息不会丢失</h3><p>RabbitMq的消息丢失主要分为以下几种情况</p><ol><li>Rabbitmq崩溃或者重启</li><li>Rabbitmq生产者发送消息时丢失</li><li>Rabbitmq消费者消费消息时丢失</li></ol><h4 id="Rabbitmq崩溃或者重启"><a href="#Rabbitmq崩溃或者重启" class="headerlink" title="Rabbitmq崩溃或者重启"></a>Rabbitmq崩溃或者重启</h4><p><strong>消息持久化</strong></p><p>rabbitmq消息持久化，将消息写入磁盘中，可以保证rabbitmq崩溃时，消息不会丢失，但当大量消息需要写入磁盘时会影响性能。</p><h5 id="1、Exchange-持久化"><a href="#1、Exchange-持久化" class="headerlink" title="1、Exchange 持久化"></a>1、Exchange 持久化</h5><p>设置durable=true</p><p>创建的交换机是持久化的（默认持久化）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据交换机的父类的AbstractExchange的源代码可以看出交换机创建  默认是持久化的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractExchange</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(name, <span class="keyword">true</span>, <span class="keyword">false</span>);<span class="comment">//name,durable,autoDelete</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、Queue-设置持久化"><a href="#2、Queue-设置持久化" class="headerlink" title="2、Queue 设置持久化"></a>2、Queue 设置持久化</h5><p>创建的队列是持久化的（需要指定）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">TestDirectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建队列时指定为持久化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;TestDirectQueue&quot;</span>,<span class="keyword">true</span>);  <span class="comment">//true 是否持久</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、Message持久化发送"><a href="#3、Message持久化发送" class="headerlink" title="3、Message持久化发送"></a>3、Message持久化发送</h5><p>发送的消息是持久化的（默认持久化）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送消息设置发送模式deliveryMode=2代表持久化消息</span></span><br><span class="line">org.springframework.amqp.rabbit.core.RabbitTemplate默认情况下发送模式为deliveryMode=<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="Rabbitmq生产者发送消息时丢失"><a href="#Rabbitmq生产者发送消息时丢失" class="headerlink" title="Rabbitmq生产者发送消息时丢失"></a>Rabbitmq生产者发送消息时丢失</h4><p>生产者发送消息时主要分为以下几种情况</p><ol><li>消息推送到server，但是在server里找不到交换机</li><li>消息推送到server，找到交换机了，但是没找到队列</li><li>消息推送成功</li></ol><p><strong>如何确保消息发送成功？</strong></p><p><strong>开启confirm模式</strong></p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8021</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#给项目来个名字</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-provider</span></span><br><span class="line">  <span class="comment">#配置rabbitMq 服务器</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment">#虚拟host 可以不设置,使用server默认host</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">JCcccHost</span></span><br><span class="line">    <span class="comment">#消息确认配置项</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#确认消息已发送到交换机(Exchange)</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#确认消息已发送到队列(Queue)</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>rabbitmq配置类</strong></p><p>配置类中加入下面实例，重写ConfirmCallback ReturnCallback 中的方法</p><ol><li>找不到交换机时触发的是 ConfirmCallback 的回调函数。(false)</li><li>找不到队列是触发的是 ConfirmCallback和ReturnCallback的回调函数。</li><li>消息发送成功触发的是ConfirmCallback 的回调函数。（true）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">createRabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">    RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">    rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数</span></span><br><span class="line">    rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;相关数据：&quot;</span>+correlationData);</span><br><span class="line">            System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;确认情况：&quot;</span>+ack);</span><br><span class="line">            System.out.println(<span class="string">&quot;ConfirmCallback:     &quot;</span>+<span class="string">&quot;原因：&quot;</span>+cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.setReturnCallback(<span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;消息：&quot;</span>+message);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;回应码：&quot;</span>+replyCode);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;回应信息：&quot;</span>+replyText);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;交换机：&quot;</span>+exchange);</span><br><span class="line">            System.out.println(<span class="string">&quot;ReturnCallback:     &quot;</span>+<span class="string">&quot;路由键：&quot;</span>+routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="Rabbitmq消费者消费消息时丢失"><a href="#Rabbitmq消费者消费消息时丢失" class="headerlink" title="Rabbitmq消费者消费消息时丢失"></a>Rabbitmq消费者消费消息时丢失</h4><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供消息确认机制(message acknowledgment)。确认模式主要分为下面三种：</p><ol><li>AcknowledgeMode.NONE：不确认</li><li>AcknowledgeMode.AUTO：自动确认</li><li>AcknowledgeMode.MANUAL：手动确认&gt; - 消费者收到消息后，手动调用basic.ack/basic.nack/basic.reject后，RabbitMQ收到这些消息后，才认为本次投递成功。<br>basic.ack用于肯定确认<br>basic.nack用于否定确认（注意：这是AMQP 0-9-1的RabbitMQ扩展）<br>basic.reject用于否定确认，但与basic.nack相比有一个限制:一次只能拒绝单条消息<br>消费者端以上的3个方法都表示消息已经被正确投递，但是basic.ack表示消息已经被正确处理，但是basic.nack（多条）,basic.reject（单条）表示没有被正确处理，但是RabbitMQ中仍然需要删除这条消息。</li></ol><p>添加配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListenerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectReceiver directReceiver;<span class="comment">//Direct消息接收处理类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DirectRabbitConfig directRabbitConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class="line">        container.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        container.setMaxConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        container.setAcknowledgeMode(AcknowledgeMode.MANUAL); <span class="comment">// RabbitMQ默认是自动确认，这里改为手动确认消息</span></span><br><span class="line">        container.setQueues(directRabbitConfig.TestDirectQueue());</span><br><span class="line">        container.setMessageListener(directReceiver);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改写消费者</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RabbitListener(queues &#x3D; &quot;TestDirectQueue&quot;)&#x2F;&#x2F;监听的队列名称 TestDirectQueue</span><br><span class="line">public class DirectReceiver implements ChannelAwareMessageListener &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(Message message, Channel channel) throws Exception &#123;</span><br><span class="line">        long deliveryTag &#x3D; message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        try &#123;</span><br><span class="line">&#x2F;&#x2F;            Thread.sleep(2000);</span><br><span class="line">            &#x2F;&#x2F;因为传递消息的时候用的map传递,所以将Map从Message内取出需要做些处理</span><br><span class="line">            String msg &#x3D; message.toString();</span><br><span class="line">            String[] msgArray &#x3D; msg.split(&quot;&#39;&quot;);&#x2F;&#x2F;可以点进Message里面看源码,单引号直接的数据就是我们的map消息数据</span><br><span class="line">            System.out.println(&quot;消费者手动确定消费：&quot; + msgArray[1].trim());</span><br><span class="line">&#x2F;&#x2F;          正常处理成功</span><br><span class="line">          channel.basicAck(deliveryTag, true);</span><br><span class="line">&#x2F;&#x2F;          重新放入队列</span><br><span class="line">&#x2F;&#x2F;            channel.basicNack(deliveryTag, false, true);</span><br><span class="line">&#x2F;&#x2F;          抛弃此条消息</span><br><span class="line">&#x2F;&#x2F;          channel.basicNack(deliveryTag, false, false);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            channel.basicNack(deliveryTag, false, true);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(四) Sentinel 服务的限流 熔断 降级</title>
      <link href="posts/104c04d2/"/>
      <url>posts/104c04d2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-四-Sentinel-服务的限流-熔断-降级"><a href="#微服务实战-四-Sentinel-服务的限流-熔断-降级" class="headerlink" title="微服务实战(四) Sentinel 服务的限流 熔断 降级"></a>微服务实战(四) Sentinel 服务的限流 熔断 降级</h2><ul><li><strong>官方文档：<a href="https://sentinelguard.io/zh-cn">https://sentinelguard.io/zh-cn</a></strong></li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li><p>多样化的流量控制</p></li><li><p>熔断降级</p></li><li><p>系统负载保护</p></li><li><p>实时监控和控制台</p></li></ul><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><p>Sentinel 的使用可以分为两个部分:</p><ul><li><p>核心库（Java 客户端）：不依赖任何框架/库，能够运行于 Java 7 及以上的版本的运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持（见 <a href="https://sentinelguard.io/zh-cn/docs/open-source-framework-integrations.html">主流框架适配</a>）。</p></li><li><p>控制台（Dashboard）：Dashboard 主要负责管理推送规则、监控、管理机器信息等。</p></li></ul><h3 id="Sentinel-与-Hystrix"><a href="#Sentinel-与-Hystrix" class="headerlink" title="Sentinel 与 Hystrix"></a>Sentinel 与 Hystrix</h3><p><code>Sentinel</code> 与<code>Hystrix</code>都能实现服务的限流、熔断、降级，上篇<a href="https://sunnyws.com/2020/07/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98(%E4%B8%89)%20OpenFegin%20%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/">微服务实战(三) OpenFegin 声明式服务调用</a>也简单介绍了Hystrix的熔断和降级。不敢说那个服务更好用，但就学习而言，Sentinel 文档要详细的多。</p><p>Hystrix在2018年也官宣进入维护模式，称Hystrix（版本1.5.18）足够稳定，可以满足<code>Netflix</code>对我们现有应用程序的需求，并将<code>resilience4j</code>这样的开放和活动项目用于新的内部项目。虽然不影响现有的项目，但相信会有越来越多的人倾向于选择<code>Sentinel</code>、<code>resilience4j</code>等。</p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel">Sentinel官方文档</a>也简单做了同类组件功能对比：</p><table><thead><tr><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th><th></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发控制）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例、异常比例、异常数</td><td>基于异常比例</td><td>基于异常比例、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持近十种动态数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>单机限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>集群流控</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>流量整形</td><td>支持预热模式与匀速排队控制效果</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>热点识别/防护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>多语言支持</td><td>Java/Go/C++</td><td>Java</td><td>Java</td></tr><tr><td>Service Mesh 支持</td><td>支持 Envoy/Istio</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h3 id="Sentinel-控制台"><a href="#Sentinel-控制台" class="headerlink" title="Sentinel 控制台"></a>Sentinel 控制台</h3><p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。 基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</p><p>启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><strong>启动</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-Dserver.port=8080 用于指定 Sentinel 控制台端口为 8080</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-Dsentinel.dashboard.auth.username=sentinel 用于指定控制台的登录用户名为 sentinel；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-Dsentinel.dashboard.auth.password=123456 用于指定控制台的登录密码为 123456；如果省略这两个参数，默认用户和密码均为 sentinel；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-Dserver.servlet.session.timeout=7200 用于指定 Spring Boot 服务端 session 的过期时间，如 7200 表示 7200 秒；60m 表示 60 分钟，默认为 30 分钟；</span></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p><strong>访问<a href="http://ip:8080/">http://ip:8080</a></strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/Sentinel1.png"></p><h3 id="客户端接入"><a href="#客户端接入" class="headerlink" title="客户端接入"></a><strong>客户端接入</strong></h3><ul><li>Nacos+OpenFeign+Sentinel（Sentinel Spring Cloud）</li></ul><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a><strong>添加配置</strong></h4><ul><li>Feign取消<code>feign.hystrix.enabled</code>配置或设置为false</li><li>Feign添加<code>feign.sentinel.enabled</code>配置</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-example2</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#控制台地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8917</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 端点检查（健康检查）</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Sentinel-控制台添加配置"><a href="#Sentinel-控制台添加配置" class="headerlink" title="Sentinel 控制台添加配置"></a><strong>Sentinel 控制台添加配置</strong></h4><h5 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a><strong>流控规则</strong></h5><h6 id="阈值类型"><a href="#阈值类型" class="headerlink" title="阈值类型"></a><strong>阈值类型</strong></h6><ul><li>QPS：每秒查询率，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</li><li>线程数：访问该资源的线程数。</li></ul><h6 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a><strong>流控模式</strong></h6><ul><li>直接：当达到阈值就进行限流。</li><li>关联：当关联的资源达到阈值，就限流自己。<ul><li>适用场景：查询和修改同一表的数据，如果是高并发的应用，查询接口的流量过大，就会影响修改接口的性能，反之同理，这就可以根据业务需求，去衡量希望优先读还是优先写。</li><li>关联其实是一种保护关联资源的设计。</li></ul></li><li>链路：只记录指定链路上的流量，即指定资源从入口资源进来的流量如果达到阈值就限流。<ul><li>链路其实是一种细粒度的针对来源，而编辑流控规则中的针对来源输入框是微服务级别的，可以指定指定微服务过来的流量达到阈值就限流。</li><li>而链路是api级别的，指定的是api的调用流量达到阈值就限流。</li></ul></li></ul><h6 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a><strong>流控效果</strong></h6><ul><li><p>快速失败：直接失败，抛异常</p></li><li><p>Warm Up（预热）：根据codeFactor(冷加载因子，默认值为3)，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值。<br> 即如果阈值为100，冷加载因子为3，预热时长为10秒，那么就会用100 / 3作为最初的阈值，经过10秒之后才会将阈值达到100，进而进行限流，意思就是让允许通过的流量缓慢增加，在达到一定的时间之后才达到阈值这样会更好的保护微服务</p></li><li><p>排队等待：匀速排队，让请求以均匀的速度通过，阈值类型必须设置成QPS，否则无效。此种模式可适用于应对突发流量的场景</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel2.png"></p><h5 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a><strong>熔断策略</strong></h5><blockquote><ul><li>Sentinel 1.8后对熔断降级做了大的调整，可以定义任意时长的熔断时间，引入了半开启恢复支持。</li><li>OpenFeign+Sentinel 熔断后降级  是将fallback交给feign处理</li><li>Sentinel 默认统计的RT上限是4900ms，超出此阈值的都会算作4900ms，若需要变更此上限可以通过启动配置项<code>-Dcsp.sentinel.statistic.max.rt=xxx</code>来配置</li></ul></blockquote><ul><li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li><li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li><li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel3.png"></p><h3 id="Sentinel持久化"><a href="#Sentinel持久化" class="headerlink" title="Sentinel持久化"></a>Sentinel持久化</h3><ul><li><p>Sentinel 默认将规则保存在内存中，重启即消失。</p></li><li><p>生产环境的 Sentinel Dashboard 规则需要集中管理和持久化。</p></li></ul><p>官方文档中提到了三种推送模式来管理规则的推送。</p><table><thead><tr><th>推送模式</th><th>说明</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#%E5%8E%9F%E5%A7%8B%E6%A8%A1%E5%BC%8F">原始模式</a></td><td>API 将规则推送至客户端并直接更新到内存中，扩展写数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>WritableDataSource</code></a>）</td><td>简单，无任何依赖</td><td>不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境</td></tr><tr><td><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#Pull%E6%A8%A1%E5%BC%8F">Pull 模式</a></td><td>扩展写数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>WritableDataSource</code></a>）， 客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件 等</td><td>简单，无任何依赖；规则持久化</td><td>不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</td></tr><tr><td><strong><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel#Push%E6%A8%A1%E5%BC%8F">Push 模式</a></strong></td><td>扩展读数据源（<a href="https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95"><code>ReadableDataSource</code></a>），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 Nacos、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。<strong>生产环境下一般采用 push 模式的数据源。</strong></td><td>规则持久化；一致性；快速</td><td>引入第三方依赖</td></tr></tbody></table><p>官方建议采用Push模式的数据源,并提供了 ZooKeeper, Apollo, Nacos 等的动态数据源实现，流程图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel4.png"></p><p><strong>使用Nacos存储Sentinel的限流规则</strong></p><ul><li>采用官方建议的Push模式，配置持久化保存在Nacos,客户端监听Nacos.</li><li>这里示例为<code>OpenFeign+Nacos+Sentinel</code>,<code>sentinel</code>规则类型为<code>flow</code></li><li>当前版本的Sentinel Dashboard不具备同步修改Nacos配置的能力，需要手动修改代码。</li></ul><h5 id="不修改Sentinel-Dashboard代码"><a href="#不修改Sentinel-Dashboard代码" class="headerlink" title="不修改Sentinel Dashboard代码"></a><strong>不修改Sentinel Dashboard代码</strong></h5><ul><li>不需要修改<code>Sentinel Dashboard</code>代码，Nacos修改规则是可以同步到Sentinel的<strong>，</strong>但是通过Sentinel控制台修改或新增却不可以同步到Nacos。</li><li>客户端数据源改为Nacos,客户端只需监听Nacos上配置变化。</li><li>需要手动在Nacos上增改规则，Sentinel Dashboard上增改规则不会生效，也不会持久化到Nacos中。</li></ul><p><strong>客户端添加注解</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud ailibaba sentinel-datasource-nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改项目配置</strong></p><ul><li><code>sentinel.datasource</code>注入类型为<code>Map&lt;String, DataSourcePropertiesConfiguration&gt;</code>，所以<code>flow</code>作为key可以随便填写。</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-example2</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#控制台地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8917</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#随便填写</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.50</span><span class="string">:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;-flow-rules</span></span><br><span class="line">            <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 端点检查（健康检查）</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span>                     <span class="comment">#（默认1次 不包括第一次）最大重试次数，当注册中心中可以找到服务，但是服务连不上时将会重试，如果注册中心中找不到服务则直接走断路器</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span>           <span class="comment">#（默认0次 不包括第一次）切换实例的重试次数</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>       <span class="comment">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">4000</span>                  <span class="comment">#（默认1s）请求连接的超时时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span>                     <span class="comment">#（默认1s）请求处理的超时时间</span></span><br></pre></td></tr></table></figure><p><strong>Nacos Server添加配置文件</strong></p><ul><li>Data Id需要与配置文件中<code>sentinel.datasource.xx.nacos.dataId</code>相同</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel6.png"></p><p><strong>添加配置</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;app&quot;</span>:<span class="string">&quot;sunnyws-service-example2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;clusterConfig&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;acquireRefuseStrategy&quot;</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;clientOfflineTime&quot;</span>:<span class="number">2000</span>,</span><br><span class="line">            <span class="attr">&quot;fallbackToLocalWhenFail&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;resourceTimeout&quot;</span>:<span class="number">2000</span>,</span><br><span class="line">            <span class="attr">&quot;resourceTimeoutStrategy&quot;</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;sampleCount&quot;</span>:<span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;strategy&quot;</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;thresholdType&quot;</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;windowIntervalMs&quot;</span>:<span class="number">1000</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;clusterMode&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;</span>:<span class="number">100</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>:<span class="number">1616226526395</span>,</span><br><span class="line">        <span class="attr">&quot;gmtModified&quot;</span>:<span class="number">1616226526395</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>:<span class="string">&quot;172.16.220.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;</span>:<span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>:<span class="number">8917</span>,</span><br><span class="line">        <span class="attr">&quot;resource&quot;</span>:<span class="string">&quot;GET:http://sunnyws-service-example1/test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><ul><li>resource：资源名，即限流规则的作用对象</li><li>limitApp：流控针对的调用来源，若为 default 则不区分调用来源</li><li>grade：限流阈值类型（QPS 或并发线程数）；0代表根据并发数量来限流，1代表根据QPS来进行流量控制</li><li>count：限流阈值</li><li>strategy：调用关系限流策略</li><li>controlBehavior：流量控制效果（直接拒绝、Warm Up、匀速排队）</li><li>clusterMode：是否为集群模式</li></ul></blockquote><ul><li>启动客户端，注册到nacos到，打开Sentinel Dashboard，可以看到上面nacos新建的限流规则。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel7.png"></p><h5 id="修改Sentinel-Dashboard代码"><a href="#修改Sentinel-Dashboard代码" class="headerlink" title="修改Sentinel Dashboard代码"></a><strong>修改Sentinel Dashboard代码</strong></h5><ul><li>通过修改Sentinel Dashboard相关代码，将控制台数据源改为与客户端相同的Nacos，从Nacos上读取配置，并将控制台上规则变化持久化到Nacos上，实现与客户端数据的持久化与一致性。</li><li>客户端配置与上面配置相同，只是Nacos中Sentinel 配置文件的Data Id与Group 需要修改。</li></ul><p><strong>下载源码包</strong></p><ul><li>根据版本下载相应的版本包：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></li></ul><p><strong>修改配置</strong></p><ul><li>修改Sentinel  Dashboard模块<code>pom.xml</code>，注释test</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改代码</strong></p><ul><li>将<code>test</code>目录中<code>sentinel-dashboard/src/test/java/com/alibaba/csp/sentinel/dashboard/rule/nacos</code>复制到<code>sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/rule/nacos</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel9.png"></p><ul><li><strong>需要修改代码文件</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel11.png"></p><ul><li><strong>修改<code>DashboardConfig</code>增加配置项</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos server_addr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_NACOS_SERVER_ADDR = <span class="string">&quot;sentinel.dashboard.nacos.server.addr&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_NACOS_SERVER_NAMESPACE = <span class="string">&quot;sentinel.dashboard.nacos.server.namespace&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos username</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_NACOS_SERVER_USERNAME = <span class="string">&quot;sentinel.dashboard.nacos.server.username&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nacos password</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_NACOS_SERVER_PASSWORD = <span class="string">&quot;sentinel.dashboard.nacos.server.password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getConfigNacosServerAddr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getConfigStr(CONFIG_NACOS_SERVER_ADDR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getConfigNacosServerNamespace</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getConfigStr(CONFIG_NACOS_SERVER_NAMESPACE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getConfigNacosServerUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getConfigStr(CONFIG_NACOS_SERVER_USERNAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getConfigNacosServerPassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getConfigStr(CONFIG_NACOS_SERVER_PASSWORD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修改<code>NacosConfig</code>中<code>nacosConfigService</code></strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigService <span class="title">nacosConfigService</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.put(PropertyKeyConst.SERVER_ADDR, DashboardConfig.getConfigNacosServerAddr());</span><br><span class="line">    properties.put(PropertyKeyConst.NAMESPACE,DashboardConfig.getConfigNacosServerNamespace());</span><br><span class="line">    properties.put(PropertyKeyConst.USERNAME,DashboardConfig.getConfigNacosServerUsername());</span><br><span class="line">    properties.put(PropertyKeyConst.PASSWORD,DashboardConfig.getConfigNacosServerPassword());</span><br><span class="line">    <span class="keyword">return</span> ConfigFactory.createConfigService(properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>修改<code>FlowControllerV1</code></strong></p><ul><li><p>注入Nacos流控规则</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel12.png"></p></li><li><p>新增Nacos  <code>publicshRules</code>方法(将配置发布到配置中心Nacos)</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel13.png"></p></li><li><p>获取配置改为Nacos 上获取</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel14.png"></p></li><li><p>保存配置 改为持久化到Nacos</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel15.png"></p></li></ul></li><li><p><strong>Nacos修改配置文件</strong></p><ul><li><code>Data Id</code>为<code>application.name</code>+<code>-flow-rules</code>，<code>Group</code>为<code>SENTINEL_GROUP</code></li><li>这是因为<code>FlowRuleNacosProvider</code>、<code>FlowRuleNacosPublisher</code>中采用静态常量进行了初始化</li><li>也可自定义修改静态常量<code>GROUP_ID</code>和<code>FLOW_DATA_ID_POSTFIX</code>值，或和Nacos配置相同改为启动配置。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel5.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel16.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel17.png"></p></li><li><p><strong>重新部署和启动</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Dsentinel.dashboard.nacos.server.addr       Nacos 地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dsentinel.dashboard.nacos.server.namespace  Nacos NameSpace</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dsentinel.dashboard.nacos.server.username   Nacos用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dsentinel.dashboard.nacos.server.password   Nacos密码</span></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=172.16.220.50:8080 -Dproject.name=sentinel-dashboard -Dsentinel.dashboard.nacos.server.addr=172.16.220.50:8848 -Dsentinel.dashboard.nacos.server.namespace=e90d261b-9c05-4bcb-b99f-b419d952737a -Dsentinel.dashboard.nacos.server.username=nacos -Dsentinel.dashboard.nacos.server.password=nacos -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><ul><li><p><strong>Dashboard新增流控规则，查看Nacos文件配置是否持久化</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel19.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/sentinel20.png"></p></li></ul><p>参考：<a href="https://www.jianshu.com/p/fb3218b21da5">https://www.jianshu.com/p/fb3218b21da5</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(三) OpenFegin 声明式服务调用</title>
      <link href="posts/1dd572b4/"/>
      <url>posts/1dd572b4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-三-OpenFegin-声明式服务调用"><a href="#微服务实战-三-OpenFegin-声明式服务调用" class="headerlink" title="微服务实战(三) OpenFegin 声明式服务调用"></a>微服务实战(三) OpenFegin 声明式服务调用</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>Fegin是一个声明式的Http客户端,它使得写Http客户端变得更简单,使用Fegin只需要创建一个接口并注解,它具有可插拔的注解特性。</li><li>Nacos很好的兼容了Fegin,Fegin中也是默认集成了Ribbons实现负载均衡的效果,底层使用了HttpClient作为服务框架。</li></ul><h3 id="Feign-Nacos实现服务间调用"><a href="#Feign-Nacos实现服务间调用" class="headerlink" title="Feign+Nacos实现服务间调用"></a>Feign+Nacos实现服务间调用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a><strong>引入依赖</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类添加注解"><a href="#启动类添加注解" class="headerlink" title="启动类添加注解"></a><strong>启动类添加注解</strong></h4><p><code>@EnableFeignClients</code>启用feign客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a><strong>定义接口</strong></h4><p><code>@FeignClient</code> 定义feign客户端</p><p>参数：</p><blockquote><ul><li>name  与value相同，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现。</li><li>url: url一般用于调试，可以手动指定@FeignClient调用的地址</li><li>fallback: 定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback指定的类必须实现@FeignClient标记的接口</li><li>url: url一般用于调试，可以手动指定@FeignClient调用的地址</li><li>configuration: Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract</li><li>fallbackFactory: 工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;sunnyws-service-example1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Example1Client</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a><strong>调用</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Example1Client example1Client;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始调用example1服务的test方法！&quot;</span>);</span><br><span class="line">    <span class="keyword">long</span> time1=System.currentTimeMillis();</span><br><span class="line">    example1Client.test();</span><br><span class="line">    <span class="keyword">long</span> time2=System.currentTimeMillis();</span><br><span class="line">    log.info(<span class="string">&quot;耗时：&quot;</span>+(time2-time1)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;调用完成！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign-Hystrix-服务的熔断-降级"><a href="#Feign-Hystrix-服务的熔断-降级" class="headerlink" title="Feign + Hystrix 服务的熔断 降级"></a><strong>Feign + Hystrix 服务的熔断 降级</strong></h3><ul><li><p><strong>请求熔断</strong>：Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力。</p></li><li><p><strong>服务降级 Fallback</strong>：当处理出现异常，或不具备处理能力时（负载过高、线程池用完），则会快速返回一个预先指定的值。</p><ul><li><p>Fallback主要是用来解决依赖的服务不可用或者调用服务失败或超时，使用默认的返回值。</p></li><li><p>OpenFeign 中Fallback<code>是通过</code>Hystrix<code>实现的， 所以需要开启</code>Hystrix</p></li></ul></li><li><p>有服务熔断，必然要有服务降级。</p></li><li><p>在网络请求时，可能会出现异常请求，如果还想再异常情况下使系统可用，那么就需要熔断，降级处理。</p></li></ul><p><strong>修改配置</strong></p><ul><li>feign.hystrix.enabled: true  #开启<code>Hystrix</code>默认关闭</li><li>hystrix默认超时时间为1s</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-example2</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="comment">#配置服务降级全局超时时间</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">12000</span>  <span class="comment">#默认（1s）</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#（默认true）开启超时熔断,为false将超时控制交给ribbon</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="comment">#10秒内，5次请求，失败率在50%，熔断8秒。</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span>  <span class="comment">#默认20 ，一个rolling window内最小的请求数。如果设为20， 10秒（Hystrix的滑动窗口算法）内发起了至少20次请求，失败率超过50%（errorThresholdPercentage）,从熔断开启后,不在调用该远程服务</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">8000</span>  <span class="comment">#默认5S   休眠时长</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment">#触发熔断的失败请求最小占比，默认50%</span></span><br></pre></td></tr></table></figure><p><strong>定义Fallback实现类</strong></p><p>实现Feign接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example1ClientFallBack</span> <span class="keyword">implements</span> <span class="title">Example1Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;熔断方法被调用了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign接口指定一个实现Feign接口的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;sunnyws-service-example1&quot;,fallback = Example1ClientFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Example1Client</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign-Ribbon-服务的负载均衡和重试"><a href="#Feign-Ribbon-服务的负载均衡和重试" class="headerlink" title="Feign + Ribbon 服务的负载均衡和重试"></a>Feign + Ribbon 服务的负载均衡和重试</h3><ul><li>openfeign默认集成了ribbon，做下简单配置即可实现负载均衡</li><li>openfeign中ribbon默认负载算法为轮询</li><li>openfeign中ribbon默认重试机制为当前请求实例 重试1次</li></ul><p>比较常用的负载均衡策略有：</p><blockquote><p>随机 (Random)<br>轮询 (RoundRobin)<br>一致性哈希 (ConsistentHash)<br>哈希 (Hash)<br>加权（Weighted）</p></blockquote><ul><li>Ribbon 提供了 IRule 接口，通过其可以设置并更换负载均衡规则。</li><li>IRule 实质就是 根据某种负载均衡规则，从服务列表中选取一个需要访问的服务。</li><li>一般默认使用 ZoneAvoidanceRule + RoundRobinRule。</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">【IRule 子类如下：】</span></span><br><span class="line">RoundRobinRule   </span><br><span class="line"><span class="meta">#</span><span class="bash">轮询，按照服务列表顺序 循环选择服务。</span></span><br><span class="line">    </span><br><span class="line">RandomRule      </span><br><span class="line"><span class="meta">#</span><span class="bash">随机，随机的从服务列表中选取服务。</span></span><br><span class="line">    </span><br><span class="line">RetryRule        </span><br><span class="line"><span class="meta">#</span><span class="bash">重试，先按照轮询策略获取服务，若获取失败，则在指定时间进行重试，重新获取可用服务。</span></span><br><span class="line">    </span><br><span class="line">WeightedResponseTimeRule   </span><br><span class="line"><span class="meta">#</span><span class="bash">加权响应时间，响应时间越低（即响应时间快），权重越高，越容易被选择。刚开始启动时，使用轮询策略。</span></span><br><span class="line">    </span><br><span class="line">BestAvailableRule          </span><br><span class="line"><span class="meta">#</span><span class="bash">高可用，先过滤掉不可用服务（多次访问故障而处于断路器跳闸的服务），选择一个并发量最小的服务。</span></span><br><span class="line"></span><br><span class="line">AvailabilityFilteringRule</span><br><span class="line"><span class="meta">#</span><span class="bash">可用筛选，先过滤掉不可用服务 以及 并发量超过阈值的服务，对剩余服务按轮询策略访问。</span></span><br><span class="line"></span><br><span class="line">ZoneAvoidanceRule</span><br><span class="line"><span class="meta">#</span><span class="bash">区域回避，默认规则，综合判断服务所在区域的性能 以及 服务的可用性，过滤结果后采用轮询的方式选择结果。</span></span><br></pre></td></tr></table></figure><p><strong>基本使用</strong></p><p>OpenFeign默认集成Ribbon,如果只是简单的使用，直接在配置文件中添加相应配置即可。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-example2</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment">#（默认1次 不包括第一次）最大重试次数，当注册中心中可以找到服务，但是服务连不上时将会重试，如果注册中心中找不到服务则直接走断路器</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span> <span class="comment">#（默认0次 不包括第一次）切换实例的重试次数</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span>  <span class="comment">#（默认1s）请求连接的超时时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment">#（默认1s）请求处理的超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="comment">#配置服务降级全局超时时间</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">12000</span>  <span class="comment">#默认（1s）</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#（默认true）开启超时熔断,为false将超时控制交给ribbon</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="comment">#10秒内，5次请求，失败率在50%，熔断8秒。</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">5</span>  <span class="comment">#默认20 ，一个rolling window内最小的请求数。如果设为20， 10秒（Hystrix的滑动窗口算法）内发起了至少20次请求，失败率超过50%（errorThresholdPercentage）,从熔断开启后,不在调用该远程服务</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">8000</span>  <span class="comment">#默认5S   休眠时长</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment">#触发熔断的失败请求最小占比，默认50%</span></span><br></pre></td></tr></table></figure><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a><strong>设置超时时间</strong></h3><p><strong>hystrix</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="comment">#配置服务降级全局超时时间</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">12000</span>  <span class="comment">#默认（1s）</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#（默认true）开启超时熔断,为false将超时控制交给ribbon</span></span><br></pre></td></tr></table></figure><p><strong>ribbon</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment">#（默认1次 不包括第一次）最大重试次数，当注册中心中可以找到服务，但是服务连不上时将会重试，如果注册中心中找不到服务则直接走断路器</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#（默认0次 不包括第一次）切换实例的重试次数</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span>  <span class="comment">#（默认1s）请求连接的超时时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment">#（默认1s）请求处理的超时时间</span></span><br></pre></td></tr></table></figure><ul><li>Hystrix与Ribbon的默认请求超时时间都是1秒</li><li>在接口调用的时候，两个计时器会同时读秒。所以建议配置Hystrix的超时时间要大于ribbon的超时时间，ribbon重试超时后，再进行熔断处理。</li><li>OpenFeign默认开启<code>Ribbon</code>，开启<code>Hystrix</code>需要添加配置。当开启Hystrix，单独设置Hystrix的超时时间，可能会小于Ribbon的默认时间，会出现不确定的结果。</li><li>当Hystrix超时时间 &lt; Ribbon超时时间，程序会先回调进入到Hystrix的fallback方法，并继续执行下去。Ribbon会继续发送请求，直到请求完成，或达到重试次数，Ribbon的重试也就没有了意义。</li><li>Ribbon的重试次数不包括第一次请求，如果<code>MaxAutoRetries=1</code>，<code>MaxAutoRetriesNextServer=2</code>，则最大请求次数为6（<code>（1+1）*（2+1）</code>）次，最大超时时间为（ConnectTimeout+ReadTimeout）*6</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(二) Nacos 动态服务发现、配置和服务管理平台</title>
      <link href="posts/1beed924/"/>
      <url>posts/1beed924/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-二-Nacos-动态服务发现、配置和服务管理平台"><a href="#微服务实战-二-Nacos-动态服务发现、配置和服务管理平台" class="headerlink" title="微服务实战(二) Nacos 动态服务发现、配置和服务管理平台"></a>微服务实战(二) Nacos 动态服务发现、配置和服务管理平台</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><h3 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h3><ul><li><strong>服务发现和服务健康监测</strong></li><li><strong>动态配置服务</strong></li><li><strong>动态 DNS 服务</strong></li><li><strong>服务及其元数据管理</strong></li></ul><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote><p>官网wiki：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/">https://github.com/alibaba/spring-cloud-alibaba/wiki/</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/nacos-version.png"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>官方介绍：</p><blockquote><p>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html">Maven</a>环境，请确保是在以下版本环境中安装使用:</p><ul><li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li><li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a>。</li></ul></blockquote><h3 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h3><h4 id="单机部署（Linux）"><a href="#单机部署（Linux）" class="headerlink" title="单机部署（Linux）"></a><strong>单机部署（Linux）</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">github上 下载安装包</span> </span><br><span class="line">wget https://github.com/alibaba/nacos/releases/download/1.4.0/nacos-server-1.4.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">解压至安装目录</span></span><br><span class="line">tar -zxvf ./nacos-server-1.4.0.tar.gz -C /sunny/software/</span><br><span class="line"><span class="meta">#</span><span class="bash">结构</span></span><br><span class="line">├── bin</span><br><span class="line">│   ├── shutdown.cmd</span><br><span class="line">│   ├── shutdown.sh</span><br><span class="line">│   ├── startup.cmd</span><br><span class="line">│   └── startup.sh</span><br><span class="line">├── conf</span><br><span class="line">│   ├── application.properties</span><br><span class="line">│   ├── application.properties.example</span><br><span class="line">│   ├── cluster.conf.example</span><br><span class="line">│   ├── nacos-logback.xml</span><br><span class="line">│   ├── nacos-mysql.sql</span><br><span class="line">│   └── schema.sql</span><br><span class="line">├── LICENSE</span><br><span class="line">├── NOTICE</span><br><span class="line">└── target</span><br><span class="line">    └── nacos-server.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置文件application.properties</span></span><br><span class="line">vim ./conf/application.properties</span><br></pre></td></tr></table></figure><blockquote><p>Mysql  新建数据库 nacos  执行解压包中的<code>nacos-mysql.sql</code></p></blockquote><ul><li>修改配置文件<code>application.properties</code></li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line">db.user=root</span><br><span class="line">db.password=root</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">cd ./bin/</span><br><span class="line">sh startup.sh -m standalone</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">登录  默认账号/密码 nacos/nacos</span></span><br><span class="line">http://ip:8848/nacos  查看系统</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/nacos2.png"></p><h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a><strong>集群部署</strong></h4><ul><li>官网文档：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></li></ul><h3 id="Nacos-Spring-Cloud"><a href="#Nacos-Spring-Cloud" class="headerlink" title="Nacos Spring Cloud"></a><strong>Nacos Spring Cloud</strong></h3><p><strong>版本选择</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/SpringCloudAlibaba_01.jpg"></p><p><strong>导入依赖</strong></p><ul><li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更。</li><li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Ailibaba Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>添加配置</strong></p><ul><li><strong>Nacos Server</strong>添加<strong>命名空间</strong>和<strong>项目配置文件</strong></li><li><strong>项目</strong>新增配置文件<code>bootstrap.yml</code></li><li><strong>Nacos Server</strong> <code>Data Id</code>需要与<strong>项目</strong>中 <code>&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</code>一致，prefix默认为 <code>spring.application.name</code> 的值（例sunnyws-service-demo-dev.yml）。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/nacos3.png"></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sunnyws-service-demo</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.16</span><span class="number">.220</span><span class="number">.10</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">e90d261b-9c05-4bcb-b99f-b419d952737a</span></span><br></pre></td></tr></table></figure><p><strong>启动类添加注解</strong></p><p><code>@EnableDiscoveryClient</code>让注册中心能够发现，扫描到该服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动程序注册到Nacos</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/nacos4.png"></p><h3 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h3><p>// TODO</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(三) 基本命令</title>
      <link href="posts/9a065954/"/>
      <url>posts/9a065954/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker（三）基本命令"><a href="#Docker（三）基本命令" class="headerlink" title="Docker（三）基本命令"></a>Docker（三）基本命令</h2><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker7.png"></p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看docker版本</span></span><br><span class="line">docker  -v</span><br><span class="line"><span class="meta">#</span><span class="bash">查看docker详细信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="meta">#</span><span class="bash">登录docker</span></span><br><span class="line">docker login</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a><strong>查找镜像</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker search  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker search hello</span><br><span class="line">NAME                                       DESCRIPTION                                     STARS               OFFICIAL         AUTOMATED</span><br><span class="line">hello-world                                Hello World! (an example of minimal Dockeriz…   1392                [OK]                </span><br><span class="line">kitematic/hello-world-nginx                A light-weight nginx container that demonstr…   148                                     </span><br><span class="line">tutum/hello-world                          Image to test docker deployments. Has Apache…   79                                      [OK]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">返回参数</span></span><br><span class="line">- NAME:镜像仓库源的名称</span><br><span class="line">- DESCRIPTION: 镜像的描述</span><br><span class="line">- OFFICIAL: 是否 docker 官方发布</span><br><span class="line">- stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</span><br><span class="line">- AUTOMATED: 自动构建。</span><br></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a><strong>下载镜像</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker pull  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete </span><br><span class="line">Digest: sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br></pre></td></tr></table></figure><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a><strong>查看镜像</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 列出所有镜像</span></span><br><span class="line">docker images  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              d1165f221234        7 days ago          13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">返回参数</span></span><br><span class="line">- REPOSITORY：表示镜像的仓库源</span><br><span class="line">- TAG：镜像的标签</span><br><span class="line">- IMAGE ID：镜像ID</span><br><span class="line">- CREATED：镜像创建时间</span><br><span class="line">- SIZE：镜像大小</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 详情</span></span><br><span class="line">docker inspect   </span><br><span class="line"><span class="meta">#</span><span class="bash">执行选项:</span></span><br><span class="line">-f,   --format string 　　使用给定的Go模板格式化输出</span><br><span class="line">-s,  --size 　　　　　   如果类型是container，则显示总文件大小</span><br><span class="line">　   --type string 　　   返回指定类型的JSON</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker inspect mysql:5.6</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;mysql:5.6&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2016-05-24T04:01:41.168371815Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;b0cf605c7757&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;3306/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a><strong>删除镜像</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 docker rmi  images id|name</span></span><br><span class="line">docker rmi  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker rmi d1165f221234</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Deleted: sha256:d1165f2212346b2bab48cb01c1e39ee8ad1be46b87873d9ca7a4e434980a7726</span><br><span class="line">Deleted: sha256:f22b99068db93900abe17f7f5e09ec775c2826ecfe9db961fea68293744144bd</span><br><span class="line">[root@10 ~]# docker rmi hello-world</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:308866a43596e83578c7dfa15e27a73011bdd402185a84c5cd7f32a88b501a24</span><br><span class="line">Deleted: sha256:d1165f2212346b2bab48cb01c1e39ee8ad1be46b87873d9ca7a4e434980a7726</span><br><span class="line">Deleted: sha256:f22b99068db93900abe17f7f5e09ec775c2826ecfe9db961fea68293744144bd</span><br></pre></td></tr></table></figure><h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a><strong>创建镜像</strong></h4><h5 id="容器提交"><a href="#容器提交" class="headerlink" title="容器提交"></a><strong>容器提交</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从容器创建一个新的镜像。</span></span><br><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-a :提交的镜像作者；</span><br><span class="line">-c :使用Dockerfile指令来创建镜像；</span><br><span class="line">-m :提交时的说明文字；</span><br><span class="line">-p :在commit时，将容器暂停。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker commit -a &quot;sunny&quot; -m &quot;my mysql8.0&quot; dfe157c9b8ab  mysql8.0:v1 </span><br></pre></td></tr></table></figure><h5 id="DockerFile创建"><a href="#DockerFile创建" class="headerlink" title="DockerFile创建"></a><strong>DockerFile创建</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用 Dockerfile 创建镜像。</span></span><br><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">--build-arg=[] :设置镜像创建时的变量；</span><br><span class="line">--cpu-shares :设置 cpu 使用权重；</span><br><span class="line">--cpu-period :限制 CPU CFS周期；</span><br><span class="line">--cpu-quota :限制 CPU CFS配额；</span><br><span class="line">--cpuset-cpus :指定使用的CPU id；</span><br><span class="line">--cpuset-mems :指定使用的内存 id；</span><br><span class="line">--disable-content-trust :忽略校验，默认开启；</span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line">--force-rm :设置镜像过程中删除中间容器；</span><br><span class="line">--isolation :使用容器隔离技术；</span><br><span class="line">--label=[] :设置镜像使用的元数据；</span><br><span class="line">-m :设置内存最大值；</span><br><span class="line">--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</span><br><span class="line">--no-cache :创建镜像的过程不使用缓存；</span><br><span class="line">--pull :尝试去更新镜像的新版本；</span><br><span class="line">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class="line">--rm :设置镜像成功后删除中间容器；</span><br><span class="line">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class="line">--ulimit :Ulimit配置。</span><br><span class="line">--squash :将 Dockerfile 中所有的操作压缩为一层。</span><br><span class="line">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个 标签。</span><br><span class="line">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例 使用当前目录的 Dockerfile 创建镜像</span></span><br><span class="line">[root@10 ~]# ocker build -t mysql/mysql:v1 . </span><br></pre></td></tr></table></figure><h5 id="本地导入"><a href="#本地导入" class="headerlink" title="本地导入"></a><strong>本地导入</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 导入使用 docker save 命令导出的镜像。</span></span><br><span class="line">docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker load ./mysql8.0.tar</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将指定镜像保存成 tar 归档文件。</span></span><br><span class="line">docker save [OPTIONS]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]#docker save -o mysql8.0.tar mysql/mysql:8.0</span><br></pre></td></tr></table></figure><h4 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a><strong>上传镜像</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span> </span><br><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker push myapache:v1</span><br></pre></td></tr></table></figure><h4 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a><strong>查看历史</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker history [OPTIONS] IMAGE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny ~]# docker history mysql:8.0</span><br><span class="line">IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT</span><br><span class="line">c8562eaf9d81   7 weeks ago    /bin/sh -c #(nop)  CMD [&quot;mysqld&quot;]               0B       </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop)  EXPOSE 3306 33060            0B       </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop)  ENTRYPOINT [&quot;docker-entry…   0B       </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c ln -s usr/local/bin/docker-entryp…   34B     </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop) COPY file:a209112a748b68e0…   13.1kB   </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop) COPY dir:2e040acc386ebd23b…   1.12kB   </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop)  VOLUME [/var/lib/mysql]      0B       </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c &#123;   echo mysql-community-server m…   411MB   </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c echo &#x27;deb http://repo.mysql.com/a…   55B     </span><br><span class="line">&lt;missing&gt;      7 weeks ago    /bin/sh -c #(nop)  ENV MYSQL_VERSION=8.0.23-…   0B       </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c #(nop)  ENV MYSQL_MAJOR=8.0          0B       </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c set -ex;  key=&#x27;A4A9406876FCBD3C45…   2.61kB   </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   52.2MB   </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c mkdir /docker-entrypoint-initdb.d    0B       </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c set -eux;  savedAptMark=&quot;$(apt-ma…   4.17MB   </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c #(nop)  ENV GOSU_VERSION=1.12        0B       </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   9.34MB   </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c groupadd -r mysql &amp;&amp; useradd -r -…   329kB   </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B       </span><br><span class="line">&lt;missing&gt;      2 months ago   /bin/sh -c #(nop) ADD file:422aca8901ae3d869…   69.2MB  </span><br></pre></td></tr></table></figure><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a><strong>设置别名</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span> </span><br><span class="line">docker tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker tag  mysql:8.0  mysql/mysql:v1</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a><strong>创建容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例 以mysql 8.0镜像为例</span></span><br><span class="line">docker run -itd -p 3306:3306 --restart=always  --name mysql -v /mysql/data:/var/lib/mysql -v /mysql/conf/my.cnf:/etc/mysql/my.cnf -e MYSQL_ROOT_PASSWORD=root  mysql:8.0 --lower_case_table_names=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line">-h &quot;mars&quot;: 指定容器的hostname；</span><br><span class="line">-e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class="line">--env-file=[]: 从指定文件读入环境变量；</span><br><span class="line">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line">--link=[]: 添加链接到另一个容器；</span><br><span class="line">--expose=[]: 开放一个端口或一组端口；</span><br><span class="line">--volume , -v: 绑定一个卷</span><br></pre></td></tr></table></figure><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a><strong>查看容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器</span></span><br><span class="line">docker ps [OPTIONS]  </span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-a :显示所有的容器，包括未运行的。</span><br><span class="line">-f :根据条件过滤显示的内容。</span><br><span class="line">--format :指定返回值的模板文件。</span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line">-n :列出最近创建的n个容器。</span><br><span class="line">--no-trunc :不截断输出。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">-s :显示总的文件大小。</span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny public]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED       STATUS          PORTS                               NAMES</span><br><span class="line">dfe157c9b8ab   mysql:8.0            &quot;docker-entrypoint.s…&quot;   2 weeks ago   Up 26 seconds   0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql</span><br><span class="line">5101c0a37164   becivells/soar-web   &quot;python /home/soar-w…&quot;   2 weeks ago   Up 2 weeks      0.0.0.0:5077-&gt;5077/tcp              soar-web</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器变化</span></span><br><span class="line">docker diff </span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny public]# docker diff dfe157c9b8ab</span><br><span class="line">C /run</span><br><span class="line">C /run/mysqld</span><br><span class="line">A /run/mysqld/mysqld.pid</span><br><span class="line">A /run/mysqld/mysqld.sock</span><br><span class="line">A /run/mysqld/mysqld.sock.lock</span><br><span class="line">A /run/mysqld/mysqlx.sock</span><br><span class="line">A /run/mysqld/mysqlx.sock.lock</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br></pre></td></tr></table></figure><h4 id="启停容器"><a href="#启停容器" class="headerlink" title="启停容器"></a><strong>启停容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta">#</span><span class="bash">停止</span></span><br><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny public]# docker stop  dfe157c9b8ab</span><br><span class="line">dfe157c9b8ab</span><br><span class="line">[root@sunny public]# docker start dfe157c9b8ab</span><br><span class="line">dfe157c9b8ab</span><br><span class="line">[root@sunny public]# docker restart dfe157c9b8ab</span><br><span class="line">dfe157c9b8ab</span><br></pre></td></tr></table></figure><h4 id="进出容器"><a href="#进出容器" class="headerlink" title="进出容器"></a><strong>进出容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入指定容器</span></span><br><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-d :分离模式: 在后台运行</span><br><span class="line">-i :即使没有附加也保持STDIN 打开</span><br><span class="line">-t :分配一个伪终端</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny public]# docker exec -it dfe157c9b8ab  /bin/bash</span><br><span class="line">root@dfe157c9b8ab:/# </span><br><span class="line">root@dfe157c9b8ab:/# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除一个或多个容器。</span></span><br><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-f :通过 SIGKILL 信号强制删除一个运行中的容器。</span><br><span class="line">-l :移除容器间的网络连接，而非容器本身。</span><br><span class="line">-v :删除与容器关联的卷</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]# docker rm a9b5219807d4</span><br><span class="line">a9b5219807d4</span><br></pre></td></tr></table></figure><h4 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a><strong>导出容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用于容器与主机之间的数据拷贝。</span></span><br><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]#docker cp  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将指定容器保存成 tar 归档文件。</span></span><br><span class="line">docker export [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@10 ~]#docker export -o mysql8.0.tar a404c6c174a2</span><br></pre></td></tr></table></figure><h4 id="容器监控"><a href="#容器监控" class="headerlink" title="容器监控"></a><strong>容器监控</strong></h4><h5 id="获取容器日志"><a href="#获取容器日志" class="headerlink" title="获取容器日志"></a><strong>获取容器日志</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">获取容器日志</span></span><br><span class="line">docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-f : 跟踪日志输出</span><br><span class="line">--since :显示某个开始时间的所有日志</span><br><span class="line">-t : 显示时间戳</span><br><span class="line">--tail :仅列出最新N条容器日志</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny ~]# docker logs -f dfe157c9b8ab</span><br><span class="line">2021-02-23 04:18:23+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.23-1debian10 started.</span><br><span class="line">2021-02-23 04:18:23+00:00 [Note] [Entrypoint]: Switching to dedicated user &#x27;mysql&#x27;</span><br><span class="line">2021-02-23 04:18:23+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.23-1debian10 started.</span><br><span class="line">2021-02-23 04:18:23+00:00 [Note] [Entrypoint]: Initializing database files</span><br></pre></td></tr></table></figure><h5 id="查看端口映射"><a href="#查看端口映射" class="headerlink" title="查看端口映射"></a><strong>查看端口映射</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看容器端口映射</span></span><br><span class="line">docker port</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny ~]# docker port  mysql</span><br><span class="line">3306/tcp -&gt; 0.0.0.0:3306</span><br></pre></td></tr></table></figure><h5 id="查看进程信息"><a href="#查看进程信息" class="headerlink" title="查看进程信息"></a><strong>查看进程信息</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看容器中运行的进程信息，支持 ps 命令参数</span></span><br><span class="line">docker top</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny ~]# docker top mysql</span><br><span class="line">UID            PID            PPID            C         STIME            TTY             TIME            CMD</span><br><span class="line">systemd+       29330          29311           0         11:06            pts/0           00:00:14       mysqld --lower_case_table_names=1</span><br><span class="line">root           30468          29311           0         11:25            pts/1           00:00:00       /bin/bash</span><br></pre></td></tr></table></figure><h5 id="获取实时事件"><a href="#获取实时事件" class="headerlink" title="获取实时事件"></a><strong>获取实时事件</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从服务器获取实时事件</span></span><br><span class="line">docker events [OPTIONS]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行参数</span></span><br><span class="line">-f ：根据条件过滤事件；</span><br><span class="line">--since ：从指定的时间戳后显示所有事件;</span><br><span class="line">--until ：流水时间显示到指定的时间为止；</span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">[root@sunny ~]# docker events -f &quot;image&quot;=&quot;mysql:8.0&quot; --since=&quot;1467302400&quot; </span><br><span class="line">2021-02-23T12:13:07.523753461+08:00 image pull mysql:8.0 (name=mysql)</span><br><span class="line">2021-02-23T12:14:40.028267149+08:00 container create 9a4847994beb9490d43dd8d29f7aa75c0c4c93f7b36820ec5ab54869386a758d (image=mysql:8.0, name=mysql)</span><br><span class="line">2021-02-23T12:14:40.522154628+08:00 container start 9a4847994beb9490d43dd8d29f7aa75c0c4c93f7b36820ec5ab54869386a758d (image=mysql:8.0, name=mysql)</span><br><span class="line">2021-02-23T12:16:38.338443947+08:00 container archive-path 9a4847994beb9490d43dd8d29f7aa75c0c4c93f7b36820ec5ab54869386a758d (image=mysql:8.0, name=mysql)</span><br><span class="line">2021-02-23T12:17:10.791576988+08:00 container kill 9a4847994beb9490d43dd8d29f7aa75c0c4c93f7b36820ec5ab54869386a758d (image=mysql:8.0, name=mysql, signal=15)</span><br><span class="line">2021-02-23T12:17:12.188009909+08:00 container die 9a4847994beb9490d43</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(二) 安装</title>
      <link href="posts/22ea6090/"/>
      <url>posts/22ea6090/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker（二）安装"><a href="#Docker（二）安装" class="headerlink" title="Docker（二）安装"></a>Docker（二）安装</h2><h3 id="Centos-yum安装docker"><a href="#Centos-yum安装docker" class="headerlink" title="Centos yum安装docker"></a>Centos yum安装docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Docker 要求 CentOS 系统的内核版本高于 3.10。 查看是否符合</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖</span></span><br><span class="line">yum install -y yum-untils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加docker yum 源 这里是docker-ce社区免费版</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看docker-ce 版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash">安装docker   docker-ce-版本.ce</span></span><br><span class="line">yum install -y docker-ce-18.03.1.ce</span><br><span class="line"><span class="meta">#</span><span class="bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash">设置开机自启</span></span><br><span class="line">systemctl enable docker </span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><strong>修改docker镜像源</strong></p><p>常用Docker国内源：</p><ul><li>Docker 官方中国区：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></li><li>网易：<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></li><li>中国科技大学：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加源</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看Registry Mirrors:</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务实战(一) 微服务架构简述</title>
      <link href="posts/cbeb21bd/"/>
      <url>posts/cbeb21bd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="微服务实战-一-微服务架构简述"><a href="#微服务实战-一-微服务架构简述" class="headerlink" title="微服务实战(一) 微服务架构简述"></a>微服务实战(一) 微服务架构简述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>微服务(Microservices Architecture)是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>由完成特定功能的小型服务组成</p><p>把一个庞大的系统拆分成多个模块，每个模块又可以细分多个微服务，每个服务都可独立的并且支持多节点部署，运行在独立的进程中。</p></li><li><p>去中心化的服务治理</p><p>每个微服务允许使用不同的技术来开发， 且数据可以不再单独的保存在一个数据库中，允许多种数据库技术。</p></li><li><p>高内聚低耦合的设计</p><p>组成各个应用的微服务，都要尽可能地实现“高内聚和低耦合”的目标，每个微服务都拥有自己的领域边界和完整的业务逻辑。</p></li><li><p>容错设计和弹性设计</p><p>当服务发生故障时，能够快速地试错，能够快速地检测出故障，而且能够在一定的情况下自动恢复。</p></li><li><p>自动化运维</p><p>基础设施例如服务器、数据库、中间件等能够弹性且自动化分配资源，微服务迭代构建要能够满足自动化的提交版本、自动化代码检查、自动化测试、自动化部署以及监控等。</p></li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><blockquote><p>优势</p></blockquote><ul><li>每个服务都比较简单，只关注于一个业务功能。</li><li>微服务架构方式是松耦合的，可以提供更高的灵活性。</li><li>微服务可通过最佳及最合适的不同的编程语言与工具进行开发，能够做到有的放矢地解决针对性问题。</li><li>每个微服务可由不同团队独立开发，互不影响，加快推出市场的速度。</li><li>微服务架构是持续交付(CD)的巨大推动力，允许在频繁发布不同服务的同时保持系统其他部分的可用性和稳定性</li></ul><blockquote><p>不足</p></blockquote><ul><li>整体复杂度变高。</li><li>微服务变多，怎么监控所有微服务，保证服务稳定，运维变的复杂。</li><li>分布式数据一致性、分布式事务</li><li>服务保障一个服务出了问题，如何才能不影响其他服务</li></ul><h3 id="常用微服务方案"><a href="#常用微服务方案" class="headerlink" title="常用微服务方案"></a>常用微服务方案</h3><ul><li><p>SpringCloud</p><p>SpringCloud是一系列框架的有序集合。它基于SpringBoot的便利性融合了一整套实现微服务的框架并提供了服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等组件。</p></li><li><p>Dubbo</p><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。但Dubbo只是一种服务治理与RPC实现方案，没有一套较为完整的架构方案。</p></li><li><p>Spring Cloud Alibaba</p><p> SpringCloud Alibaba是阿里巴巴结合自身微服务实践,开源的微服务全家桶，是SpringCloud的子项目。该项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。同时也支持Dubbo等功能的接入。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/SpringCloudAlibaba_03.jpg"></p><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><ul><li>注册中心（Erurka、Nacos）</li><li>配置中心（SpringCloud Config 、 Nacos）</li><li>服务调用（Feign、OpenFeign、Dubbo RPC）</li><li>容错限流（Hystrix、Sentinel）</li><li>负载均衡（Ribbon、Dubbo LB）</li><li>分布式事务（Seata）</li><li>网关（Zuul、SpringCloud Gateway、Dubbo PROXY）</li><li>API文档（Swagger）</li><li>异步队列（MQ）</li><li>分布式任务调度(xxl-job、Elastic-Job、Alibaba Cloud SchedulerX)</li><li>持续集成（Jenkins）</li><li>分布式缓存（Redis）</li><li>分库分表（sharding jdbc）</li><li>日志收集（ELK）</li><li>调用链追踪（ Cat、Zipkin、Pinpoint、SkyWalking）</li><li>容器化（Docker+k8s）</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.bilibili.com/read/cv4106747/">https://www.bilibili.com/read/cv4106747/</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(一) 概述</title>
      <link href="posts/110a64a9/"/>
      <url>posts/110a64a9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Docker（一）概述"><a href="#Docker（一）概述" class="headerlink" title="Docker（一）概述"></a>Docker（一）概述</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p><a href="http://c.biancheng.net/docker/">Docker</a> 是一种运行于 Linux 和 Windows 上的软件，用于创建、管理和编排容器。</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。</p><h3 id="moby、docker-ce与docker-ee"><a href="#moby、docker-ce与docker-ee" class="headerlink" title="moby、docker-ce与docker-ee"></a><strong>moby、docker-ce与docker-ee</strong></h3><p>最早的时候docker就是一个开源项目，主要由docker公司维护。</p><p>2017年年初，docker公司将原先的docker项目改名为moby，并创建了docker-ce和docker-ee。</p><ul><li><p>moby是继承了原先的docker的项目，是社区维护的的开源项目，谁都可以在moby的基础打造自己的容器产品</p></li><li><p>docker-ce是docker公司维护的开源项目，是一个基于moby项目的免费的容器产品.</p></li><li><p>docker-ee是docker公司维护的闭源产品，强调安全，是docker公司的商业产品。</p></li></ul><h3 id="为什么使用Docker"><a href="#为什么使用Docker" class="headerlink" title="为什么使用Docker"></a><strong>为什么使用Docker</strong></h3><ul><li>更高效的利用系统资源</li><li>更快速的启动时间</li><li>一致的运行环境</li><li>持续交付和部署</li><li>更轻松的迁移</li><li>更轻松的维护和扩展</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Docker 包括三个基本概念：</p><ul><li>镜像（<code>Image</code>）：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>容器（<code>Container</code>）：镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（<code>Repository</code>）：仓库（<code>Repository</code>）类似Git的远程仓库，集中存放镜像文件。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker5.png"></p><h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><ul><li>当项目大规模使用 Docker 时，将会涉及容器通信的问题。要解决容器通信问题，必须先了 解很多关于网络的知识</li><li>Docker 作为目前最火的轻量级容器技术，有很多令人称道的功能，如 Docker 的镜像管理。 然而，Docker 同样有着很多不完善的地方，网络方面就是 Docker 比较薄弱的部分。因此， 有必要深入了解 Docker 的网络知识，以满足更高的网络需求</li></ul><p>Docker 从 1.7 版本开始，便把网络和存储从 Docker 中正式以插件的形式剥离开来，并且分别为其定义了标准，Docker 定义的网络模型标准称之为 CNM (Container Network Model) 。</p><blockquote><p>Docker 推出 CNM 的同时，CoreOS 推出了 CNI（Container Network Interfac）。起初，以 Kubernetes 为代表的容器编排阵营考虑过使用 CNM 作为容器的网络标准，但是后来由于很多技术和非技术原因（如果你对详细原因感兴趣，可以参考这篇博客），Kubernetes 决定支持 CoreOS 推出的容器网络标准 CNI。</p><p>从此，容器的网络标准便分为两大阵营，一个是以 Docker 公司为代表的 CNM，另一个便是以 Google、Kubernetes、CoreOS 为代表的 CNI 网络标准。</p><p>虽然最后k8s的CNI成为了容器网络标准，但是libnetwork的容器网络模式使得pod中容器共享网络环境成为可能</p></blockquote><h4 id="CNM"><a href="#CNM" class="headerlink" title="CNM"></a><strong>CNM</strong></h4><p>CNM (Container Network Model) 是 Docker 发布的容器网络标准，意在规范和指定容器网络发展标准，CNM 抽象了容器的网络接口 ，使得只要满足 CNM 接口的网络方案都可以接入到 Docker 容器网络，更好地满足了用户网络模型多样化的需求。</p><p>CNM 只是定义了网络标准，对于底层的具体实现并不太关心，这样便解耦了容器和网络，使得容器的网络模型更加灵活。</p><p>CNM 定义的网络标准包含三个重要元素。</p><p>沙箱（Sandbox）：沙箱代表了一系列网络堆栈的配置，其中包含路由信息、网络接口等网络资源的管理，沙箱的实现通常是 Linux 的 Net Namespace，但也可以通过其他技术来实现，比如 FreeBSD jail 等。</p><p>接入点（Endpoint）：接入点将沙箱连接到网络中，代表容器的网络接口，接入点的实现通常是 Linux 的 veth 设备对。</p><p>网络（Network）：网络是一组可以互相通信的接入点，它将多接入点组成一个子网，并且多个接入点之间可以相互通信。</p><p>CNM 的三个要素基本抽象了所有网络模型，使得网络模型的开发更加规范。</p><p>为了更好地构建容器网络标准，Docker 团队把网络功能从 Docker 中剥离出来，成为独立的项目 libnetwork，它通过插件的形式为 Docker 提供网络功能。Libnetwork 是开源的，使用 Golang 编写，它完全遵循 CNM 网络规范，是 CNM 的官方实现。</p><h4 id="Libnetwork-的工作流程"><a href="#Libnetwork-的工作流程" class="headerlink" title="Libnetwork 的工作流程"></a><strong>Libnetwork 的工作流程</strong></h4><p>Libnetwork 是 Docker 启动容器时，用来为 Docker 容器提供网络接入功能的插件，它可以让 Docker 容器顺利接入网络，实现主机和容器网络的互通。下面，我们来详细了解一下 Libnetwork 是如何为 Docker 容器提供网络的。</p><ul><li><p>第一步：Docker 通过调用 libnetwork.New 函数来创建 NetworkController 实例。NetworkController 是一个接口类型，提供了各种接口，代码如下：</p><blockquote><p>type NetworkController interface {<br>   // 创建一个新的网络。 options 参数用于指定特性类型的网络选项。<br>   NewNetwork(networkType, name string, id string, options …NetworkOption) (Network, error)<br>   // … 此次省略部分接口<br>}</p></blockquote></li><li><p>第二步：通过调用 NewNetwork 函数创建指定名称和类型的 Network，其中 Network 也是接口类型，代码如下:</p><blockquote><p>type Network interface {<br>   // 为该网络创建一个具有唯一指定名称的接入点（Endpoint）<br>   CreateEndpoint(name string, options …EndpointOption) (Endpoint, error)</p><p>   // 删除网络<br>   Delete() error<br>// … 此次省略部分接口<br>}</p></blockquote></li><li><p>第三步：通过调用 CreateEndpoint 来创建接入点（Endpoint）。在 CreateEndpoint 函数中为容器分配了 IP 和网卡接口。其中 Endpoint 也是接口类型，代码如下：</p></li><li><blockquote><p>// Endpoint 表示网络和沙箱之间的逻辑连接。<br>type Endpoint interface {<br>   // 将沙箱连接到接入点，并将为接入点分配的网络资源填充到沙箱中。<br>   // the network resources allocated for the endpoint.<br>   Join(sandbox Sandbox, options …EndpointOption) error<br>   // 删除接入点<br>   Delete(force bool) error<br>   // … 此次省略部分接口<br>}</p></blockquote></li><li><p>第四步：调用 NewSandbox 来创建容器沙箱，主要是初始化 Namespace 相关的资源。</p></li><li><p>第五步：调用 Endpoint 的 Join 函数将沙箱和网络接入点关联起来，此时容器就加入了 Docker 网络并具备了网络访问能力。</p></li></ul><h4 id="Libnetwork-常见网络模式"><a href="#Libnetwork-常见网络模式" class="headerlink" title="Libnetwork 常见网络模式"></a><strong>Libnetwork 常见网络模式</strong></h4><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>bridge</td><td>为每一个容器分配、设置 IP 等，并将容器连接到一个 docker0 虚拟网桥，<strong>默认</strong>为该模式。</td></tr><tr><td>host</td><td>容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</td></tr><tr><td>none</td><td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网桥连接，IP 等。</td></tr><tr><td>container</td><td>新创建的容器不会创建自己的网卡和配置自己的 IP，而是和一个指定的容器共享 IP、端口 范围等。</td></tr></tbody></table><h5 id="bridge-网络模式"><a href="#bridge-网络模式" class="headerlink" title="bridge 网络模式"></a><strong>bridge 网络模式</strong></h5><ul><li>在该模式中，Docker 守护进程创建了一个虚拟以太网桥 docker0，新建的容器会自动桥接到这个接口，附加 在其上的任何网卡之间都能自动转发数据包 </li><li>默认情况下，守护进程会创建一对对等虚拟设备接口 veth pair，将其中一个接口设置为容器的 eth0接口（容 器的网卡），另一个接口放置在宿主机的命名空间中，以类似 vethxxx 这样的名字命名，从而将宿主机上的 所有容器都连接到这个内部网络上</li><li>关于 bridge 网络模式的使用，只需要在创建容器时通过参数 –net bridge 或者 –network bridge 指定即可， 当然这也是创建容器默认使用的网络模式，也就是说这个参数是可以省略的<ul><li>Docker Daemon 利用 veth pair 技术，在宿主机上创建一对对等虚拟网络接口设备，假设为 veth0 和 veth1。而 veth pair 技术的特性可以保证无论哪一个 veth 接收到网络报文，都会将报文传输给另一方。 </li><li>Docker Daemon 将 veth0 附加到 Docker Daemon 创建的 docker0 网桥上。保证宿主机的网络报文可以发往 veth0；</li><li>Docker Daemon 将 veth1 添加到 Docker Container 所属的 namespace 下，并被改名为 eth0。如此一来，宿主机的 网络报文若发往 veth0，则立即会被 Container 的 eth0 接收，实现宿主机到 Docker Container 网络的联通性；同时， 也保证 Docker Container 单独使用 eth0，实现容器网络环境的隔离性</li></ul></li></ul><h5 id="host-网络模式"><a href="#host-网络模式" class="headerlink" title="host 网络模式"></a><strong>host 网络模式</strong></h5><ul><li>host 网络模式需要在创建容器时通过参数 –net host 或者 –network host 指定；</li><li>采用 host 网络模式的 Docker Container，可以直接使用宿主机的 IP 地址与外界进行通信， 若宿主机的 eth0 是一个公有 IP，那么容器也拥有这个公有 IP。同时容器内服务的端口也可 以使用宿主机的端口，无需额外进行 NAT 转换</li><li>host 网络模式可以让容器共享宿主机网络栈，这样的好处是外部主机与容器直接通信，但是 容器的网络缺少隔离性</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker8.png"></p><h5 id="none-网络模式"><a href="#none-网络模式" class="headerlink" title="none 网络模式"></a><strong>none 网络模式</strong></h5><ul><li>none 网络模式是指禁用网络功能，只有 lo 接口 local 的简写，代表 127.0.0.1，即 localhost 本地环回接口。在创建容器时通过参数 –net none 或者 –network none 指定；</li><li>none 网络模式即不为 Docker Container 创建任何的网络环境，容器内部就只能使用 loopback 网络设备，不会再有其他的网络资源。可以说 none 模式为 Docke Container 做了 极少的网络设定，但是俗话说得好“少即是多”，在没有网络配置的情况下，作为 Docker 开发者，才能在这基础做其他无限多可能的网络定制开发。这也恰巧体现了 Docker 设计理 念的开放</li></ul><h5 id="container-网络模式"><a href="#container-网络模式" class="headerlink" title="container 网络模式"></a><strong>container 网络模式</strong></h5><ul><li>Container 网络模式是 Docker 中一种较为特别的网络的模式。在创建容器时通过参数 –net container:已运行的容器名称|ID 或者 –network container:已运行的容器名称|ID 指定</li><li>处于这个模式下的 Docker 容器会共享一个网络栈，这样两个容器之间可以使用 localhost 高 效快速通信</li><li>Container 网络模式即新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定 的容器共享 IP、端口范围等。同样两个容器除了网络方面相同之外，其他的如文件系统、进 程列表等还是隔离的</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker9.png"></p><h3 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h3><p>容器本质上是一种进程隔离的技术。容器为进程提供了一个隔离的环境，容器内的进程无法访问容器外的进程。</p><h4 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a><strong>chroot</strong></h4><p>什么是 chroot 呢？下面是 chroot 维基百科定义：</p><blockquote><p>chroot 是在 Unix 和 Linux 系统的一个操作，针对正在运作的软件行程和它的子进程，改变它外显的根目录。一个运行在这个环境下，经由 chroot 设置根目录的程序，它不能够对这个指定根目录之外的文件进行访问动作，不能读取，也不能更改它的内容。</p></blockquote><p>通俗地说 ，chroot 就是可以改变某进程的根目录，使这个程序不能访问目录之外的其他目录，这个跟我们在一个容器中是很相似的。下面我们通过一个实例来演示下 chroot。</p><h4 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a><strong>Namespaces</strong></h4><p>命名空间 (namespaces) 是 <a href="https://www.linuxprobe.com/">Linux</a> 为我们提供的用于分离进程树、网络接口、挂载点以及进程间通信等资源的方法。在日常使用 Linux 或者 macOS 时，我们并没有运行多个完全分离的服务器的需要，但是如果我们在服务器上启动了多个服务，这些服务其实会相互影响的，每一个服务都能看到其他服务的进程，也可以访问宿主机器上的任意文件，这是很多时候我们都不愿意看到的，我们更希望运行在同一台机器上的不同服务能做到完全隔离，就像运行在多台不同的机器上一样。</p><p>在这种情况下，一旦服务器上的某一个服务被入侵，那么入侵者就能够访问当前机器上的所有服务和文件，这也是我们不想看到的，而 Docker 其实就通过 Linux 的 Namespaces 对不同的容器实现了隔离。</p><p>Linux 的命名空间机制提供了以下七种不同的命名空间，包括CLONE_NEWCGROUP、CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER和CLONE_NEWUTS，通过这七个选项我们能在创建新的进程时设置新进程应该在哪些资源上与宿主机器进行隔离。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker1.png"></p><h4 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a><strong>cgroups</strong></h4><p>cgroups是Linux内核提供的一种机制，这种机制可以根据需求把一系列系统任务及其子任务整合（或分隔）到按资源划分等级的不同组内，从而为系统资源管理提供一个统一的框架。</p><p>本质上来说，cgroups是内核附加在程序上的一系列钩子（hook），通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。</p><p>cgroups主要有以下几个功能：</p><ul><li><strong>资源限制：</strong>cgroups可以对任务使用的资源总额进行限制，比如内存大小限制；</li><li><strong>优先级分配：</strong>通过分配的CPU时间片数量及磁盘IO带宽大小，实际上就相当于控制了任务运行的优先级。</li><li><strong>资源统计：</strong>cgroups可以统计系统的资源使用量，如CPUwetjfta\mwdhetjgtffu,p个功能非常适用计费。</li><li><strong>任务控制：</strong>cgroups可以对任务执行挂起、恢复等操作。</li></ul><h4 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a><strong>联合文件系统</strong></h4><p>联合文件系统，又叫 UnionFS，是一种通过创建文件层进程操作的文件系统，因此，联合文件系统非常轻快。Docker 使用联合文件系统为容器提供构建层，使得容器可以实现写时复制以及镜像的分层构建和存储。常用的联合文件系统有 AUFS、Overlay 和 Devicemapper 等。</p><h4 id="其他的进程隔离技术"><a href="#其他的进程隔离技术" class="headerlink" title="其他的进程隔离技术"></a><strong>其他的进程隔离技术</strong></h4><p>除了namespace和cgroups之外，比较重要的进程隔离技术还有selinux、apparmor、capability、netlink。</p><p>Selinx与apparmor可以增加对容器的访问控制，capability实现了将超级用户root的权限分割为多种不同的capability权限，从而实现对容器的更细颗粒度的权限控制，netlink技术则可实现对docker容器网络环境的配置与创建。</p><h4 id="LXC、Libcontainer"><a href="#LXC、Libcontainer" class="headerlink" title="LXC、Libcontainer"></a><strong>LXC、Libcontainer</strong></h4><p>基于各种进程隔离技术，我们就可以创建一个个满足应用运行要求的容器。但这个过程非常复杂。需要有一个简易的容器管理工具。Docker就是最流行的容器管理工具。但docker并没有直接操作namespace等这些linux内核技术，而是基于lxc或libcontainer之上再进行一次封装。通过lxc\libcontainer来操作这些linux内核技术。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker2.png"></p><p>docker1.8之后废弃了LXC(Linux Container,即linux虚拟容器技术)，引入了基于Go构建的libcontainer的execution driver. 有了libcontainer这个项目, Docker不再需要依赖于Linux部件( LXC, libvirt, systemd-nspawn… )就可以处理namespaces, control groups, capabilities, apparmor profiles, network interfaces。</p><p>LXC是第一个真正意义的容器管理工具，主要是提供了方便的命令行接口供用户操作以调用底层的namespace等进程隔离进行。而libcontainer与lxc相比，实际上是反向定义容器了实现标准，将底层实现都抽象化到Libcontainer的接口。这就意味着，底层容器的实现方式变成了一种可变的方案，无论是使用namespace、cgroups技术抑或是使用systemd等其他方案，只要可以与上层的Libcontainer定义的接口对接，那么libcontainer上层的Docker也就可以运行。这也为Docker实现全面的跨平台带来了可能。</p><h3 id="Docker-VS-虚拟机"><a href="#Docker-VS-虚拟机" class="headerlink" title="Docker VS 虚拟机"></a>Docker VS 虚拟机</h3><p>Docker架构与虚拟机架构对比情况如下图。最直观的差别在于docker容器中是没有独立的os，而是与宿主机共用同一个内核。然后通过隔离技术，让我们在进入每一个容器时，所看到的内容和操作的环境就像是在一个虚拟机中一样。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker3.png"></p><p><strong>容器与虚拟机的对比</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sunnyws/BlogAssets@master/img/contentimg/docker4.png"></p><p><strong>参考</strong>：<a href="http://tech.canway.net/news/146.html">http://tech.canway.net/news/146.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7源码安装Nginx</title>
      <link href="posts/b7fd7bc5/"/>
      <url>posts/b7fd7bc5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Centos7源码安装Nginx"><a href="#Centos7源码安装Nginx" class="headerlink" title="Centos7源码安装Nginx"></a>Centos7源码安装Nginx</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a><strong>下载安装包</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /sunny/packages</span><br><span class="line">wget http://nginx.org/download/nginx-1.8.1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a><strong>安装相关依赖</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装nginx所需包</span></span><br><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a><strong>安装Nginx</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压包</span></span><br><span class="line">tar -zxvf ./nginx-1.8.1.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">进入解压路径</span></span><br><span class="line">cd ./nginx-1.8.1/</span><br><span class="line"><span class="meta">#</span><span class="bash">配置  --prefix 为指定安装目录</span></span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">编译 安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash">启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a><strong>设置开机启动</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/systemd/system</span><br><span class="line">touch nginx.service</span><br><span class="line">vim ./nginx.service</span><br></pre></td></tr></table></figure><p>写入内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta">#</span><span class="bash">允许开机自启</span></span><br><span class="line">systemctl enable nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">停止服务</span></span><br><span class="line">systemctl stop nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">启动服务</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure><p>Unit:服务的说明</p><blockquote><ul><li>Description:描述服务</li><li>After:描述服务类别</li><li>[Service]服务运行参数的设置</li><li>Type=forking是后台运行的形式</li><li>ExecStart为服务的具体运行命令</li><li>ExecReload为重启命令</li><li>ExecStop为停止命令</li><li>PrivateTmp=True表示给服务分配独立的临时空间</li><li>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</li><li>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</li></ul></blockquote><h4 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a><strong>添加模块</strong></h4><ul><li>以ssl模块为例</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看原有模块 及编译安装位置</span></span><br><span class="line">[root@30 nginx]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.8.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">先停止nginx</span> </span><br><span class="line">[root@30 nginx]# /usr/local/nginx/sbin/nginx -s quit</span><br><span class="line"><span class="meta">#</span><span class="bash">进入安装包路径</span></span><br><span class="line">[root@30 nginx]# cd /sunny/packages/nginx-1.8.1/</span><br><span class="line"><span class="meta">#</span><span class="bash">配置及编译  不要进行make install，否则就是覆盖安装</span></span><br><span class="line">[root@30 nginx-1.8.1]# ./configure --prefix=/opt/software/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">[root@30 nginx-1.8.1]# make</span><br><span class="line"><span class="meta">#</span><span class="bash">备份原有启动文件</span></span><br><span class="line">[root@30 nginx-1.8.1]# cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br><span class="line"><span class="meta">#</span><span class="bash">覆盖原有nginx启动文件</span></span><br><span class="line">[root@30 nginx-1.8.1]# cp ./objs/nginx /usr/local/nginx/sbin/</span><br><span class="line">cp：是否覆盖&quot;/usr/local/nginx/sbin/nginx&quot;？ y</span><br><span class="line"><span class="meta">#</span><span class="bash">启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">查看模块</span></span><br><span class="line">[root@10 sbin]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.8.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/opt/software/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动时若出现以下问题  需要手动创建/opt/software/nginx/logs/error.log 文件  在启动</span></span><br><span class="line">nginx: [alert] could not open error log file: open() &quot;/opt/software/nginx/logs/error.log&quot; failed (21: Is a directory)</span><br><span class="line">2021/03/12 20:31:52 [emerg] 20388#0: open() &quot;/opt/software/nginx/../conf/nginx.conf&quot; failed (2: No such file or directory)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="posts/fe29e710/"/>
      <url>posts/fe29e710/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h2><p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p><blockquote><ul><li>速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</li><li>支持丰富数据类型，支持string，list，set，sorted set，hash</li><li>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li><li>丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</li></ul></blockquote><p><strong>缺点</strong></p><blockquote><ul><li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要 等待机器重启或者手动切换前端的IP才能恢复。 </li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题， 降低了系统的可用性。 </li><li>Redis的主从复制采用全量复制，复制过程中主机会fork出一个子进程对内存做一份快照， 并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内存。 若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群 或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全 量的数据复制，这对实际的系统运营造成了不小的麻烦。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题， 运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>会话缓存（Session Cache）</li><li>全页缓存（FPC）</li><li>队列</li><li>排行榜/计数器</li><li>…</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p><h4 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h4><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><h4 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><h3 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h3><h4 id="RDB（默认开启）"><a href="#RDB（默认开启）" class="headerlink" title="RDB（默认开启）"></a><strong>RDB</strong>（默认开启）</h4><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。也是默认的持久化方式，这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。</p><p><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">save &lt;指定时间间隔&gt; &lt;执行指定次数更新操作&gt;,若不想用RDB方案，可以把 save <span class="string">&quot;&quot;</span> 的注释打开，下面三个注释。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> save <span class="string">&quot;&quot;</span></span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta">#</span><span class="bash">地数据库文件名，一般采用默认的 dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定本地数据库存放目录</span></span><br><span class="line">dir ./</span><br><span class="line"><span class="meta">#</span><span class="bash">默认开启数据压缩</span></span><br><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>适合大规模的数据恢复。</li><li>如果业务对数据完整性和一致性要求不高，RDB是很好的选择。</li></ul><p><strong>缺点</strong></p><ul><li>数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。</li><li>备份时占用内存，因为Redis 在备份时会独立创建一个子进程，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。</li></ul><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>redis会将每一个收到的写命令都通过write函数追加到文件中(默认是 appendonly.aof)。当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</p><p>当然由于os会在内核中缓存 write做的修改，所以可能不是立即写到磁盘上。这样aof方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis我们想要 通过fsync函数强制os写入到磁盘的时机。</p><p><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启aof  默认no</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span><span class="bash">指定本地数据库文件名，默认值为 appendonly.aof</span></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">指定更新日志条件 always|everysec(默认)|no</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always：同步持久化，每次发生数据变化会立刻写入到磁盘中。性能较差当数据完整性比较好（慢，安全）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">everysec：出厂默认推荐，每秒异步记录一次（默认值）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">no：不同步</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件增长比例，指当前aof文件比上次重写的增长比例大小。aof重写即在aof文件在一定大小之后，重新将整个内存写到aof文件当中</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件重写最小的文件大小</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta">#</span><span class="bash">指redis在恢复时，会忽略最后一条可能存在问题的指令。默认值yes。即在aof写入时，可能存在指令写错的问题(突然断电，写了一半)，这种情况下，yes会<span class="built_in">log</span>并继续，而no会直接恢复失败.</span></span><br><span class="line">aof-load-truncated yes</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>数据的完整性和一致性更高</li></ul><p><strong>缺点</strong></p><ul><li>因为AOF记录的内容多，文件会越来越大，数据恢复也会越来越慢。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><strong>描述</strong></p><blockquote><p>在高并发下，查询一个不存在的值时，缓存不会被命中，导致大量请求直接落到数据库上，如活动系统里面查询一个不存在的活动。</p></blockquote><p><strong>解决方案</strong></p><blockquote><ul><li>布隆过滤器</li><li>缓存空对象</li></ul></blockquote><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><strong>描述</strong></p><blockquote><p>在高并发下，对一个特定的值进行查询，但是这个时候缓存正好过期了，缓存没有命中，导致大量请求直接落到数据库上。</p></blockquote><p><strong>解决方案</strong></p><blockquote><ul><li>设置热点数据永远不过期。</li><li>加互斥锁。</li><li>限流做安全保障</li></ul></blockquote><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h3><p><strong>描述</strong></p><blockquote><p>在高并发下，大量的缓存key在同一时间失效，导致大量的请求落到数据库上</p></blockquote><p><strong>解决方案</strong></p><blockquote><ul><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>Redis 高可用</li><li>设置热点数据永远不过期。</li></ul></blockquote><h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a><strong>过期策略</strong></h3><p>Redis同时使用了惰性删除与定期删除.</p><ul><li>定时删除：在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。</li></ul><blockquote><p>优点：对内存最友好的。可以及时释放键所占用的内存。</p><p>缺点：对 CPU 不友好。特别在过期键比较多的情况下，删除过期键会占用相当一部分 CPU 时间。同时在内存不紧张，CPU 紧张的情况下，将 CPU 用在删除和当前任务不想关的过期键上，无疑会对服务器响应时间和吞吐量造成影响。</p></blockquote><ul><li>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。</li></ul><blockquote><p>优点：对 CPU 最友好。只有在操作的时候进行过期检查，删除的目标仅限于当前需要处理的键，不会在删除其他无关本次操作的过期键上花费任何 CPU 时间。</p><p>缺点：对内存不友好。这个十分容易理解了，键过期了，但因为一直没有被访问到，所以一直保留着（除非手动执行 flushdb 操来于清空当前数据库中的所有 key。），相当于内存泄漏。</p></blockquote><ul><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。</li></ul><h3 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h3><p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li></ul><p><strong>配置</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认下，64位机器 redis的配置maxmemory是没有设置的，一般推荐Redis设置内存为最大物理内存的四分之三</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory &lt;bytes&gt;  最大使用内存大小  例：0.75G</span></span><br><span class="line">maxmemory 751619276 </span><br><span class="line"><span class="meta">#</span><span class="bash">设置淘汰机制</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redis.conf中的默认的过期策略是 volatile-lru</span></span><br><span class="line">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常用命令</title>
      <link href="posts/c6501dfc/"/>
      <url>posts/c6501dfc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux-常用命令"></a>Linux-常用命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find   path   -option   [   -print ]   [ -exec   -ok   command ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>-name</td><td>按文件名查找</td><td>find  / -name april*</td><td>在/目录下查找文件名以april开头的文件</td></tr><tr><td>-perm</td><td>按执行权限查找</td><td>find  /  -perm  0700</td><td>在/目录下查找权限为700的文件</td></tr><tr><td>-user</td><td>按文件属主来查找</td><td>find  /  -user  fred</td><td>查找在/目录下属于FRED这个用户的文件</td></tr><tr><td>-group</td><td>按组来查找</td><td>find  /  -group  cat</td><td>查找在/目录下属于组group cat的文件</td></tr><tr><td>-mtime</td><td>按文件更改时间来查找文件</td><td>find  /  -mtime  -1</td><td>查找在/目录下最后24小时里修改过的文件</td></tr><tr><td>-size</td><td>按文件大小查询</td><td>find  /home  -size  -512k</td><td>查小于512k的文件</td></tr></tbody></table><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep 指令用于查找内容包含指定的范本样式的文件.</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>-i</td><td>忽略字符大小写的差别</td><td>grep -i test ./test.log</td><td>在test.log文件中查找”test”，并忽略大小写</td></tr><tr><td>-w</td><td>只匹配整个单词 ，而不是字符串的一部分</td><td>grep -w Test ./test.log</td><td>在test.log文件中查找”Test”，匹配整个字符串</td></tr><tr><td>-l</td><td>列出文件内容符合指定的样式的文件名称。</td><td>grep -l Test ./*</td><td>查找当前文件中包含”Test”的文件名</td></tr><tr><td>-L</td><td>列出文件内容不符合指定的样式的文件名称。</td><td>grep -L Test ./*</td><td>查找当前文件中不包含”Test”的文件名</td></tr><tr><td>-C</td><td>除了显示符合样式的那一行之外，并显示该行之前后的内容。</td><td>grep -C  2 Test ./test.log</td><td>显示文件中”Test”字符串的上下文2行内容</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找指定进程</span></span><br><span class="line">[root@slave1 chinaictc]# ps -ef|grep nacos</span><br><span class="line">root       8395   1003  0 10:40 pts/2    00:00:00 grep --color=auto nacos</span><br><span class="line">root     142099      1  2  2020 ?        21:48:58 /usr/java/jdk1.8.0_231/bin/java -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=true -Dnacos.member.list= -Djava.ext.dirs=/usr/java/jdk1.8.0_231/jre/lib/ext:/usr/java/jdk1.8.0_231/lib/ext -Xloggc:/home/project/soft/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/home/project/soft/nacos/plugins/health,/home/project/soft/nacos/plugins/cmdb -Dnacos.home=/home/project/soft/nacos -jar /home/project/soft/nacos/target/nacos-server.jar --spring.config.location=file:/home/project/soft/nacos/conf/,classpath:/,classpath:/config/,file:./,file:./config/ --logging.config=/home/project/soft/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288 nacos.nacos</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><strong>cp</strong></h4><blockquote><p>cp（英文全拼：copy file）命令主要用于复制文件或目录。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp [options] source dest</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>-R/r</td><td>递归处理，将指定目录下的所有文件与子目录一并处理；</td><td>cp -r a/* /b</td><td>将a目录下所有目录移到b下</td></tr><tr><td>-i</td><td>覆盖既有文件之前先询问用户；</td><td>cp -i /usr/men m*.c /usr/zh</td><td>将以m开头的文件复制到另一个文件中，若已存在则询问用户。</td></tr><tr><td>-f</td><td>若目标文件已存在，则会直接覆盖原文件</td><td>cp -f test1 test2</td><td>文件改名</td></tr><tr><td>-L</td><td>列出文件内容不符合指定的样式的文件名称。</td><td>grep -L Test ./*</td><td>查找当前文件中不包含”Test”的文件名</td></tr><tr><td>-C</td><td>除了显示符合样式的那一行之外，并显示该行之前后的内容。</td><td>grep -C  2 Test ./test.log</td><td>显示文件中”Test”字符串的上下文2行内容</td></tr></tbody></table><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><blockquote><p> mv（英文全拼：move file）命令用来为文件或目录改名、或将文件或目录移入其它位置。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv [options] source dest</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-b</td><td>当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</td></tr><tr><td>-i</td><td>如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</td></tr><tr><td>-f</td><td>如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</td></tr><tr><td>-n</td><td>不要覆盖任何已存在的文件或目录。</td></tr><tr><td>-u</td><td>当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">移动到上级目录 当文件存在时，覆盖前，为其创建一个备份；</span></span><br><span class="line">[root@sunny test]# mv -b ./test.log  ../</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改文件名称</span></span><br><span class="line">[root@sunny ~]# mv test.log test1.txt</span><br></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><blockquote><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [-AbeEnstTuv] [--help] [--version] fileName</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-n</td><td>由 1 开始对所有输出的行数编号。</td></tr><tr><td>-b</td><td>和 -n 相似，只不过对于空白行不编号。</td></tr><tr><td>-s</td><td>当遇到有连续两行以上的空白行，就代换为一行的空白行。</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将文件内容 输入到另一个文件中</span></span><br><span class="line">[root@sunny ~]# cat ./test.log &gt;./test.txt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">带行号 输出文本内容</span></span><br><span class="line">[root@sunny ~]# cat -n ./test.log </span><br><span class="line">     1当前位置：首页 &gt; 美文欣赏 &gt; 原创美文 &gt; 小园香径独徘徊</span><br><span class="line">     2小园香径独徘徊</span><br><span class="line">     3推荐人：一江秋水 来源: 原创 时间: 2021-01-01 10:48 阅读: 197次 大 中 小</span><br><span class="line">     4小园香径独徘徊</span><br><span class="line">     5　　小园香径独徘徊</span><br><span class="line">     6</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清空日志内容</span></span><br><span class="line">[root@sunny ~]# cat /dev/null &gt; /logs/test.log</span><br></pre></td></tr></table></figure><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><blockquote><p>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p></blockquote><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩文件 将a.c文件压缩为gz 包</span></span><br><span class="line">[root@sunny ~]# tar -czvf test.tar.gz a.c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压gz文件夹 到指定文件夹</span></span><br><span class="line">[root@sunny ~]# tar -xzvf test.tar.gz -C /home</span><br></pre></td></tr></table></figure><h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><blockquote><p>用于解压缩由zip命令压缩的“.zip”压缩包。</p></blockquote><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压压缩包 到指定文件夹</span></span><br><span class="line">[root@sunny ~]# unzip  test.zip -d /home</span><br></pre></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><blockquote><p>tail 命令可用于查看文件的内容。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail [参数] [文件]  </span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>-f</td><td>循环读取,常用于查阅正在改变的日志文件</td><td>tail -100f ./test.log</td><td>数据最后100行，并监听文本变化</td></tr><tr><td>-c</td><td>显示的字节数</td><td>tail -c 100 test.log</td><td>输出最后的100个字符</td></tr><tr><td>-n</td><td>显示文件的尾部 n 行内容</td><td>tail -n 5 test.log</td><td>输出最后的5行</td></tr></tbody></table><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><blockquote><p>wget是Linux中的一个下载文件的工具</p></blockquote><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载单个文件</span></span><br><span class="line">[root@sunny /]# wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"><span class="meta">#</span><span class="bash">使用参数-O来指定一个文件名</span></span><br><span class="line">[root@sunny /]# wget -O mysql.tar  https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"><span class="meta">#</span><span class="bash">wget -c重新启动下载中断的文件</span></span><br><span class="line">[root@sunny /]# wget -c https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"><span class="meta">#</span><span class="bash">wget -b后台下载</span></span><br><span class="line">[root@sunny /]# wget -b https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.21-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><blockquote><p>查看 Linux 中当前运行的进程的命令。能列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量等.</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-A</td><td>列出所有的进程</td></tr><tr><td>-e</td><td>此参数的效果和指定”A”参数相同</td></tr><tr><td>-f</td><td>显示UID,PPIP,C与STIME栏位</td></tr><tr><td>a</td><td>显示现行终端机下的所有程序，包括其他用户的程序</td></tr><tr><td>u</td><td>以用户为主的格式来显示程序状况。</td></tr><tr><td>x</td><td>显示所有程序，不以终端机来区分</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找进程</span></span><br><span class="line">[root@sunny ~]# ps -ef|grep mysql</span><br><span class="line">root      2399   833  0 09:39 pts/0    00:00:00 grep --color=auto mysql</span><br><span class="line">mysql    32158     1  0  2020 ?        23:42:40 /usr/sbin/mysqld</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sunny ~]# ps aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.1  43516  2860 ?        Ss    2020   3:21 /usr/lib/systemd/systemd --system --deserialize 20</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S     2020   0:00 [kthreadd]</span><br><span class="line">root         3  0.0  0.0      0     0 ?        S     2020   5:39 [ksoftirqd/0]</span><br><span class="line">root         5  0.0  0.0      0     0 ?        S&lt;    2020   0:00 [kworker/0:0H]</span><br></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><blockquote><p>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有连线中的Socket</td></tr><tr><td>-n</td><td>直接使用IP地址，而不通过域名服务器。</td></tr><tr><td>-t</td><td>显示TCP传输协议的连线状况。</td></tr><tr><td>-u</td><td>显示UDP传输协议的连线状况</td></tr><tr><td>-l</td><td>仅列出有在 Listen (监听) 的服务状态</td></tr><tr><td>-p</td><td>显示建立相关链接的程序名</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看tcp连接</span></span><br><span class="line">[root@sunny ~]# netstat -ntlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:8848            0.0.0.0:*               LISTEN      3453/java           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      3331/sshd           </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      32158/mysqld        </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看utp连接</span></span><br><span class="line">[root@sunny ~]# netstat -nulp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           678/dhclient        </span><br><span class="line">udp        0      0 0.0.0.0:53337           0.0.0.0:*                           3453/java           </span><br><span class="line">udp        0      0 172.18.0.1:123          0.0.0.0:*                           768/ntpd            </span><br><span class="line">udp        0      0 172.17.32.36:123        0.0.0.0:*                           768/ntpd </span><br></pre></td></tr></table></figure><h4 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h4><blockquote><p>ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有连线中的Socket</td></tr><tr><td>-n</td><td>不解析服务名称。</td></tr><tr><td>-t</td><td>显示TCP传输协议的连线状况。</td></tr><tr><td>-u</td><td>显示UDP传输协议的连线状况</td></tr><tr><td>-l</td><td>仅列出有在 Listen (监听) 的服务状态</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看tcp连接</span></span><br><span class="line">[root@sunny ~]# ss -ntl</span><br><span class="line">State      Recv-Q Send-Q          Local Address:Port             Peer Address:Port              </span><br><span class="line">LISTEN     0      100                  *:8848                          *:*                  </span><br><span class="line">LISTEN     0      128                  *:22                            *:*                  </span><br><span class="line">LISTEN     0      128                  :::3306                         :::*                  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看utp连接</span></span><br><span class="line">[root@sunny ~]# ss -nul</span><br><span class="line">State      Recv-Q Send-Q           Local Address:Port             Peer Address:Port              </span><br><span class="line">UNCONN     0      0                      *:68                          *:*                  </span><br><span class="line">UNCONN     0      0                     *:53337                        *:*                  </span><br><span class="line">UNCONN     0      0                  172.18.0.1:123                    *:* </span><br></pre></td></tr></table></figure><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><blockquote><p>sof命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof ［options］ filename</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-a</td><td>列出打开文件存在的进程；</td></tr><tr><td>-c&lt;进程名&gt;</td><td>列出指定进程所打开的文件；</td></tr><tr><td>-g</td><td>列出GID号进程详情；</td></tr><tr><td>-d&lt;文件号&gt;</td><td>列出占用该文件号的进程；</td></tr><tr><td>+d&lt;目录&gt;</td><td>列出目录下被打开的文件；</td></tr><tr><td>+D&lt;目录&gt;</td><td>递归列出目录下被打开的文件；</td></tr><tr><td>-n&lt;目录&gt;</td><td>列出使用NFS的文件；</td></tr><tr><td>-i&lt;条件&gt;</td><td>列出符合条件的进程。（4、6、协议、:端口、 @ip ）</td></tr><tr><td>-p&lt;进程号&gt;</td><td>列出指定进程号所打开的文件；</td></tr><tr><td>-u</td><td>列出UID号进程详情；</td></tr><tr><td>-h</td><td>显示帮助信息；</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看端口占用</span></span><br><span class="line">[root@sunny ~]# lsof -i:8848</span><br><span class="line">COMMAND  PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    3453 root   91u  IPv4 38510255      0t0  TCP *:8848 (LISTEN)</span><br></pre></td></tr></table></figure><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><blockquote><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-d</td><td>改变显示的更新速度</td></tr><tr><td>-n</td><td>更新的次数</td></tr><tr><td>-p&lt;进程号&gt;</td><td>显示指定的进程信息</td></tr></tbody></table><p><strong>示例</strong>（centos）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sunny ~]# top</span><br><span class="line">top - 09:23:57 up 336 days, 16:37,  1 user,  load average: 0.01, 0.05, 0.05</span><br><span class="line">Tasks:  72 total,   1 running,  71 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  1.3 us,  0.5 sy,  0.0 ni, 98.1 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1883724 total,    93244 free,  1269136 used,   521344 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used,   442780 avail Mem </span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                         </span><br><span class="line">    1 root      20   0   43516   2860   1300 S  0.0  0.2   3:22.16 systemd                                         </span><br><span class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.42 kthreadd                                         </span><br><span class="line">    3 root      20   0       0      0      0 S  0.0  0.0   5:39.87 ksoftirqd/0                                     </span><br><span class="line">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H </span><br></pre></td></tr></table></figure><blockquote><ul><li><p>top </p><p>up：当前系统时间</p><p>days：系统连续运行天数和时间</p><p>user：登录系统的用户数量</p><p>load average：5分钟、10分钟、15分钟的负载情况</p></li><li><p>task</p><p>total :系统现有的总进程数</p><p>running：系统正在运行的进程数</p><p>sleeping：系统正在休眠的进程数</p><p>stopped：系统已经停止的进程数</p><p>zombie：系统僵尸状态的进程数</p></li><li><p>%cpu</p><p>us, user： 用户空间占用CPU的百分比。</p><p>sy，system: 内核空间占用CPU的百分比。</p><p>ni，niced： 改变过优先级的进程占用CPU的百分比</p><p>id，空闲CPU百分比</p><p>wa，IO wait: IO等待占用CPU的百分比</p><p>hi： 硬中断（Hardware IRQ）占用CPU的百分比</p><p>si: 软中断（Software Interrupts）占用CPU的百分比</p><p>st：这个虚拟机被hypervisor偷去的CPU百分比</p></li><li><p>mem</p><p>total： 物理内存总量</p><p>free：使用中的内存总量</p><p>used：空闲内存总量</p><p>buff/cache：缓存的内存量</p></li><li><p>swap</p><p>total： 交换区总量</p><p>free：使用的交换区总量</p><p>used：空闲交换区总量</p><p>avail Mem：缓冲的交换区总量</p></li><li><p>进程信息</p><p>PID：进程id</p><p>USER：进程所有者的用户名</p><p>PR：优先级</p><p>NI：nice值。负值表示高优先级，正值表示低优先级</p><p>VIRT：进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES：进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR：共享内存大小，单位kb</p><p>S：进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p><p>%CPU：上次更新到现在的CPU时间占用百分比</p><p>%MEM：进程使用的物理内存百分比</p><p>TIME+：进程使用的CPU时间总计，单位1/100秒</p><p>COMMAND：命令名/命令行</p></li></ul></blockquote><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@slave1 file]# sar -u 1 5</span><br><span class="line">Linux 3.10.0-862.el7.x86_64 (slave1) 12/30/2020 _x86_64_(40 CPU)</span><br><span class="line">02:12:08 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">02:12:09 PM     all      0.43      0.00      0.25      0.03      0.00     99.29</span><br><span class="line">02:12:10 PM     all      0.65      0.00      0.35      0.00      0.00     98.99</span><br><span class="line">02:12:11 PM     all      0.93      0.00      0.38      0.00      0.00     98.69</span><br><span class="line">02:12:12 PM     all      0.55      0.00      0.28      0.00      0.00     99.17</span><br><span class="line">02:12:13 PM     all      0.50      0.00      0.40      0.00      0.00     99.09</span><br></pre></td></tr></table></figure><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><blockquote><p> free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free [-bkmotV][-s &lt;间隔秒数&gt;]</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-b</td><td>以Byte为单位显示内存使用情况。</td></tr><tr><td>-k</td><td>以KB为单位显示内存使用情况。</td></tr><tr><td>-m</td><td>以MB为单位显示内存使用情况。</td></tr><tr><td>-g</td><td>以GB为单位显示内存使用情况</td></tr><tr><td>-t</td><td>显示内存总和列。</td></tr><tr><td>-s&lt;间隔秒数&gt;</td><td>持续观察内存使用状况。</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sunnyws ~]# free -g</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:             62          59           0           0           2           1</span><br><span class="line">Swap:            31          13          18</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每10s 执行一次</span></span><br><span class="line">[root@sunnyws ~]# free -s 10</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:       65237716    57855548      329208       63356     7052960     6236136</span><br><span class="line">Swap:      32767996    19907324    12860672</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:       65237716    57857980      326460       63356     7053276     6233672</span><br><span class="line">Swap:      32767996    19907068    12860928</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><blockquote><p> jps是java提供的一个显示当前所有java进程pid的命令，适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p></blockquote><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps -option</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>-q</td><td>只显示pid，不显示class名称,jar文件名和传递给main方法的参数</td></tr><tr><td>-m</td><td>输出传递给main方法的参数，在嵌入式jvm上可能是null</td></tr><tr><td>-l</td><td>输出应用程序main class的完整package名或者应用程序的jar文件完整路径名</td></tr><tr><td>-v</td><td>输出传递给JVM的参数</td></tr><tr><td>-V</td><td>按文件更改时间来查找文件</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@sunnyws ~]# jps -v</span><br><span class="line">142099 nacos-server.jar -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=true -Dnacos.member.list= -Djava.ext.dirs=/usr/java/jdk1.8.0_231/jre/lib/ext:/usr/java/jdk1.8.0_231/lib/ext -Xloggc:/home/project/soft/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/home/project/soft/nacos/plugins/health,/home/project/soft/nacos/plugins/cmdb -Dnacos.home=/home/project/soft/nacos</span><br></pre></td></tr></table></figure><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>jstat -gccause</p><p>jstat -gcutil</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
